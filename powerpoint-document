// Generated .IDL file (by the OLE/COM Object Viewer)
//
// typelib filename: MSPPT.OLB

[
  uuid(91493440-5A91-11CF-8700-00AA0060263B),
  version(2.12),
  helpstring("Microsoft PowerPoint 16.0 Object Library"),
  helpfile("VBAPP10.CHM"),
  helpcontext(0x0007a120)
]
library PowerPoint
{
    // TLib :     // TLib : Microsoft Visual Basic for Applications Extensibility 5.3 : {0002E157-0000-0000-C000-000000000046}
    importlib("VBE6EXT.OLB");
    // TLib : Microsoft Office 16.0 Object Library : {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}
    importlib("MSO.DLL");
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface Collection;
    interface _Application;
    interface _Global;
    interface ColorFormat;
    interface SlideShowWindow;
    interface Selection;
    interface DocumentWindows;
    interface SlideShowWindows;
    interface DocumentWindow;
    interface View;
    interface SlideShowView;
    interface SlideShowSettings;
    interface NamedSlideShows;
    interface NamedSlideShow;
    interface PrintOptions;
    interface PrintRanges;
    interface PrintRange;
    interface AddIns;
    interface AddIn;
    interface Presentations;
    interface PresEvents;
    interface Hyperlinks;
    interface Hyperlink;
    interface PageSetup;
    interface Fonts;
    interface ExtraColors;
    interface Slides;
    interface _Slide;
    interface SlideRange;
    interface _Master;
    interface SldEvents;
    interface ColorSchemes;
    interface ColorScheme;
    interface RGBColor;
    interface SlideShowTransition;
    interface SoundEffect;
    interface SoundFormat;
    interface HeadersFooters;
    interface Shapes;
    interface Placeholders;
    interface PlaceholderFormat;
    interface FreeformBuilder;
    interface Shape;
    interface ShapeRange;
    interface GroupShapes;
    interface Adjustments;
    interface PictureFormat;
    interface FillFormat;
    interface LineFormat;
    interface ShadowFormat;
    interface ConnectorFormat;
    interface TextEffectFormat;
    interface ThreeDFormat;
    interface TextFrame;
    interface CalloutFormat;
    interface ShapeNodes;
    interface ShapeNode;
    interface OLEFormat;
    interface LinkFormat;
    interface ObjectVerbs;
    interface AnimationSettings;
    interface ActionSettings;
    interface ActionSetting;
    interface PlaySettings;
    interface TextRange;
    interface Ruler;
    interface RulerLevels;
    interface RulerLevel;
    interface TabStops;
    interface TabStop;
    interface Font;
    interface ParagraphFormat;
    interface BulletFormat;
    interface TextStyles;
    interface TextStyle;
    interface TextStyleLevels;
    interface TextStyleLevel;
    interface HeaderFooter;
    interface _Presentation;
    interface Tags;
    interface MouseTracker;
    interface MouseDownHandler;
    interface OCXExtender;
    interface OCXExtenderEvents;
    interface EApplication;
    interface Table;
    interface Columns;
    interface Column;
    interface Rows;
    interface Row;
    interface CellRange;
    interface Cell;
    interface Borders;
    interface Panes;
    interface Pane;
    interface DefaultWebOptions;
    interface WebOptions;
    interface PublishObjects;
    interface PublishObject;
    interface MasterEvents;
    interface _PowerRex;
    interface Comments;
    interface Comment;
    interface Designs;
    interface Design;
    interface DiagramNode;
    interface DiagramNodeChildren;
    interface DiagramNodes;
    interface Diagram;
    interface TimeLine;
    interface Sequences;
    interface Sequence;
    interface Effect;
    interface Timing;
    interface EffectParameters;
    interface EffectInformation;
    interface AnimationBehaviors;
    interface AnimationBehavior;
    interface MotionEffect;
    interface ColorEffect;
    interface ScaleEffect;
    interface RotationEffect;
    interface PropertyEffect;
    interface AnimationPoints;
    interface AnimationPoint;
    interface CanvasShapes;
    interface AutoCorrect;
    interface Options;
    interface CommandEffect;
    interface FilterEffect;
    interface SetEffect;
    interface CustomLayouts;
    interface CustomLayout;
    interface TableStyle;
    interface CustomerData;
    interface Research;
    interface TableBackground;
    interface TextFrame2;
    interface FileConverters;
    interface FileConverter;
    interface Axes;
    interface Axis;
    interface AxisTitle;
    interface Chart;
    interface ChartBorder;
    interface ChartCharacters;
    interface ChartArea;
    interface ChartColorFormat;
    interface ChartData;
    interface ChartFillFormat;
    interface ChartFormat;
    interface ChartGroup;
    interface ChartGroups;
    interface ChartTitle;
    interface Corners;
    interface DataLabel;
    interface DataLabels;
    interface DataTable;
    interface DisplayUnitLabel;
    interface DownBars;
    interface DropLines;
    interface ErrorBars;
    interface Floor;
    interface ChartFont;
    interface Gridlines;
    interface HiLoLines;
    interface Interior;
    interface LeaderLines;
    interface Legend;
    interface LegendEntries;
    interface LegendEntry;
    interface LegendKey;
    interface PlotArea;
    interface Point;
    interface Points;
    interface Series;
    interface SeriesCollection;
    interface SeriesLines;
    interface TickLabels;
    interface Trendline;
    interface Trendlines;
    interface UpBars;
    interface Walls;
    interface MediaFormat;
    interface SectionProperties;
    interface Player;
    interface ResampleMediaTask;
    interface ResampleMediaTasks;
    interface MediaBookmark;
    interface MediaBookmarks;
    interface Coauthoring;
    interface Broadcast;
    interface ProtectedViewWindows;
    interface ProtectedViewWindow;
    interface FullSeriesCollection;
    interface ChartCategory;
    interface CategoryCollection;
    interface ThemeVariant;
    interface ThemeVariants;
    interface Theme;
    interface SlideNavigation;
    interface Guides;
    interface Guide;

    typedef [uuid(B2CD8E94-209B-4FB7-8FA1-D3F682EFBEDA)]
    enum {
        ppWindowNormal = 1,
        ppWindowMinimized = 2,
        ppWindowMaximized = 3
    } PpWindowState;

    typedef [uuid(9FB6D0E7-A063-4A3A-9E65-4BA1C830F0F7)]
    enum {
        ppArrangeTiled = 1,
        ppArrangeCascade = 2
    } PpArrangeStyle;

    typedef [uuid(B57D2996-78B9-4F86-A0D3-EFD3A3896175)]
    enum {
        ppViewSlide = 1,
        ppViewSlideMaster = 2,
        ppViewNotesPage = 3,
        ppViewHandoutMaster = 4,
        ppViewNotesMaster = 5,
        ppViewOutline = 6,
        ppViewSlideSorter = 7,
        ppViewTitleMaster = 8,
        ppViewNormal = 9,
        ppViewPrintPreview = 10,
        ppViewThumbnails = 11,
        ppViewMasterThumbnails = 12
    } PpViewType;

    typedef [uuid(6D5A5494-54C4-4E15-90D3-62E5AAAD2605)]
    enum {
        ppSchemeColorMixed = -2,
        ppNotSchemeColor = 0,
        ppBackground = 1,
        ppForeground = 2,
        ppShadow = 3,
        ppTitle = 4,
        ppFill = 5,
        ppAccent1 = 6,
        ppAccent2 = 7,
        ppAccent3 = 8
    } PpColorSchemeIndex;

    typedef [uuid(3724E368-DD02-4F14-A8B5-FF234A727CCC)]
    enum {
        ppSlideSizeOnScreen = 1,
        ppSlideSizeLetterPaper = 2,
        ppSlideSizeA4Paper = 3,
        ppSlideSize35MM = 4,
        ppSlideSizeOverhead = 5,
        ppSlideSizeBanner = 6,
        ppSlideSizeCustom = 7,
        ppSlideSizeLedgerPaper = 8,
        ppSlideSizeA3Paper = 9,
        ppSlideSizeB4ISOPaper = 10,
        ppSlideSizeB5ISOPaper = 11,
        ppSlideSizeB4JISPaper = 12,
        ppSlideSizeB5JISPaper = 13,
        ppSlideSizeHagakiCard = 14,
        ppSlideSizeOnScreen16x9 = 15,
        ppSlideSizeOnScreen16x10 = 16
    } PpSlideSizeType;

    typedef [uuid(01F8F37D-78D4-4920-B2A2-227B23A7ED66)]
    enum {
        ppSaveAsPresentation = 1,
        ppSaveAsPowerPoint7 = 2,
        ppSaveAsPowerPoint4 = 3,
        ppSaveAsPowerPoint3 = 4,
        ppSaveAsTemplate = 5,
        ppSaveAsRTF = 6,
        ppSaveAsShow = 7,
        ppSaveAsAddIn = 8,
        ppSaveAsPowerPoint4FarEast = 10,
        ppSaveAsDefault = 11,
        ppSaveAsHTML = 12,
        ppSaveAsHTMLv3 = 13,
        ppSaveAsHTMLDual = 14,
        ppSaveAsMetaFile = 15,
        ppSaveAsGIF = 16,
        ppSaveAsJPG = 17,
        ppSaveAsPNG = 18,
        ppSaveAsBMP = 19,
        ppSaveAsWebArchive = 20,
        ppSaveAsTIF = 21,
        ppSaveAsPresForReview = 22,
        ppSaveAsEMF = 23,
        ppSaveAsOpenXMLPresentation = 24,
        ppSaveAsOpenXMLPresentationMacroEnabled = 25,
        ppSaveAsOpenXMLTemplate = 26,
        ppSaveAsOpenXMLTemplateMacroEnabled = 27,
        ppSaveAsOpenXMLShow = 28,
        ppSaveAsOpenXMLShowMacroEnabled = 29,
        ppSaveAsOpenXMLAddin = 30,
        ppSaveAsOpenXMLTheme = 31,
        ppSaveAsPDF = 32,
        ppSaveAsXPS = 33,
        ppSaveAsXMLPresentation = 34,
        ppSaveAsOpenDocumentPresentation = 35,
        ppSaveAsOpenXMLPicturePresentation = 36,
        ppSaveAsWMV = 37,
        ppSaveAsStrictOpenXMLPresentation = 38,
        ppSaveAsMP4 = 39,
        ppSaveAsExternalConverter = 64000
    } PpSaveAsFileType;

    typedef [uuid(F7F8452D-30C2-4866-87BF-455A9FD787D8)]
    enum {
        ppDefaultStyle = 1,
        ppTitleStyle = 2,
        ppBodyStyle = 3
    } PpTextStyleType;

    typedef [uuid(2D20E1EA-0942-4429-8725-916EA0D91045)]
    enum {
        ppLayoutMixed = -2,
        ppLayoutTitle = 1,
        ppLayoutText = 2,
        ppLayoutTwoColumnText = 3,
        ppLayoutTable = 4,
        ppLayoutTextAndChart = 5,
        ppLayoutChartAndText = 6,
        ppLayoutOrgchart = 7,
        ppLayoutChart = 8,
        ppLayoutTextAndClipart = 9,
        ppLayoutClipartAndText = 10,
        ppLayoutTitleOnly = 11,
        ppLayoutBlank = 12,
        ppLayoutTextAndObject = 13,
        ppLayoutObjectAndText = 14,
        ppLayoutLargeObject = 15,
        ppLayoutObject = 16,
        ppLayoutTextAndMediaClip = 17,
        ppLayoutMediaClipAndText = 18,
        ppLayoutObjectOverText = 19,
        ppLayoutTextOverObject = 20,
        ppLayoutTextAndTwoObjects = 21,
        ppLayoutTwoObjectsAndText = 22,
        ppLayoutTwoObjectsOverText = 23,
        ppLayoutFourObjects = 24,
        ppLayoutVerticalText = 25,
        ppLayoutClipArtAndVerticalText = 26,
        ppLayoutVerticalTitleAndText = 27,
        ppLayoutVerticalTitleAndTextOverChart = 28,
        ppLayoutTwoObjects = 29,
        ppLayoutObjectAndTwoObjects = 30,
        ppLayoutTwoObjectsAndObject = 31,
        ppLayoutCustom = 32,
        ppLayoutSectionHeader = 33,
        ppLayoutComparison = 34,
        ppLayoutContentWithCaption = 35,
        ppLayoutPictureWithCaption = 36
    } PpSlideLayout;

    typedef [uuid(B5A60D8C-605C-4784-BA39-FB4B9AAEEA01)]
    enum {
        ppEffectMixed = -2,
        ppEffectNone = 0,
        ppEffectCut = 257,
        ppEffectCutThroughBlack = 258,
        ppEffectRandom = 513,
        ppEffectBlindsHorizontal = 769,
        ppEffectBlindsVertical = 770,
        ppEffectCheckerboardAcross = 1025,
        ppEffectCheckerboardDown = 1026,
        ppEffectCoverLeft = 1281,
        ppEffectCoverUp = 1282,
        ppEffectCoverRight = 1283,
        ppEffectCoverDown = 1284,
        ppEffectCoverLeftUp = 1285,
        ppEffectCoverRightUp = 1286,
        ppEffectCoverLeftDown = 1287,
        ppEffectCoverRightDown = 1288,
        ppEffectDissolve = 1537,
        ppEffectFade = 1793,
        ppEffectUncoverLeft = 2049,
        ppEffectUncoverUp = 2050,
        ppEffectUncoverRight = 2051,
        ppEffectUncoverDown = 2052,
        ppEffectUncoverLeftUp = 2053,
        ppEffectUncoverRightUp = 2054,
        ppEffectUncoverLeftDown = 2055,
        ppEffectUncoverRightDown = 2056,
        ppEffectRandomBarsHorizontal = 2305,
        ppEffectRandomBarsVertical = 2306,
        ppEffectStripsUpLeft = 2561,
        ppEffectStripsUpRight = 2562,
        ppEffectStripsDownLeft = 2563,
        ppEffectStripsDownRight = 2564,
        ppEffectStripsLeftUp = 2565,
        ppEffectStripsRightUp = 2566,
        ppEffectStripsLeftDown = 2567,
        ppEffectStripsRightDown = 2568,
        ppEffectWipeLeft = 2817,
        ppEffectWipeUp = 2818,
        ppEffectWipeRight = 2819,
        ppEffectWipeDown = 2820,
        ppEffectBoxOut = 3073,
        ppEffectBoxIn = 3074,
        ppEffectFlyFromLeft = 3329,
        ppEffectFlyFromTop = 3330,
        ppEffectFlyFromRight = 3331,
        ppEffectFlyFromBottom = 3332,
        ppEffectFlyFromTopLeft = 3333,
        ppEffectFlyFromTopRight = 3334,
        ppEffectFlyFromBottomLeft = 3335,
        ppEffectFlyFromBottomRight = 3336,
        ppEffectPeekFromLeft = 3337,
        ppEffectPeekFromDown = 3338,
        ppEffectPeekFromRight = 3339,
        ppEffectPeekFromUp = 3340,
        ppEffectCrawlFromLeft = 3341,
        ppEffectCrawlFromUp = 3342,
        ppEffectCrawlFromRight = 3343,
        ppEffectCrawlFromDown = 3344,
        ppEffectZoomIn = 3345,
        ppEffectZoomInSlightly = 3346,
        ppEffectZoomOut = 3347,
        ppEffectZoomOutSlightly = 3348,
        ppEffectZoomCenter = 3349,
        ppEffectZoomBottom = 3350,
        ppEffectStretchAcross = 3351,
        ppEffectStretchLeft = 3352,
        ppEffectStretchUp = 3353,
        ppEffectStretchRight = 3354,
        ppEffectStretchDown = 3355,
        ppEffectSwivel = 3356,
        ppEffectSpiral = 3357,
        ppEffectSplitHorizontalOut = 3585,
        ppEffectSplitHorizontalIn = 3586,
        ppEffectSplitVerticalOut = 3587,
        ppEffectSplitVerticalIn = 3588,
        ppEffectFlashOnceFast = 3841,
        ppEffectFlashOnceMedium = 3842,
        ppEffectFlashOnceSlow = 3843,
        ppEffectAppear = 3844,
        ppEffectCircleOut = 3845,
        ppEffectDiamondOut = 3846,
        ppEffectCombHorizontal = 3847,
        ppEffectCombVertical = 3848,
        ppEffectFadeSmoothly = 3849,
        ppEffectNewsflash = 3850,
        ppEffectPlusOut = 3851,
        ppEffectPushDown = 3852,
        ppEffectPushLeft = 3853,
        ppEffectPushRight = 3854,
        ppEffectPushUp = 3855,
        ppEffectWedge = 3856,
        ppEffectWheel1Spoke = 3857,
        ppEffectWheel2Spokes = 3858,
        ppEffectWheel3Spokes = 3859,
        ppEffectWheel4Spokes = 3860,
        ppEffectWheel8Spokes = 3861,
        ppEffectWheelReverse1Spoke = 3862,
        ppEffectVortexLeft = 3863,
        ppEffectVortexUp = 3864,
        ppEffectVortexRight = 3865,
        ppEffectVortexDown = 3866,
        ppEffectRippleCenter = 3867,
        ppEffectRippleRightUp = 3868,
        ppEffectRippleLeftUp = 3869,
        ppEffectRippleLeftDown = 3870,
        ppEffectRippleRightDown = 3871,
        ppEffectGlitterDiamondLeft = 3872,
        ppEffectGlitterDiamondUp = 3873,
        ppEffectGlitterDiamondRight = 3874,
        ppEffectGlitterDiamondDown = 3875,
        ppEffectGlitterHexagonLeft = 3876,
        ppEffectGlitterHexagonUp = 3877,
        ppEffectGlitterHexagonRight = 3878,
        ppEffectGlitterHexagonDown = 3879,
        ppEffectGalleryLeft = 3880,
        ppEffectGalleryRight = 3881,
        ppEffectConveyorLeft = 3882,
        ppEffectConveyorRight = 3883,
        ppEffectDoorsVertical = 3884,
        ppEffectDoorsHorizontal = 3885,
        ppEffectWindowVertical = 3886,
        ppEffectWindowHorizontal = 3887,
        ppEffectWarpIn = 3888,
        ppEffectWarpOut = 3889,
        ppEffectFlyThroughIn = 3890,
        ppEffectFlyThroughOut = 3891,
        ppEffectFlyThroughInBounce = 3892,
        ppEffectFlyThroughOutBounce = 3893,
        ppEffectRevealSmoothLeft = 3894,
        ppEffectRevealSmoothRight = 3895,
        ppEffectRevealBlackLeft = 3896,
        ppEffectRevealBlackRight = 3897,
        ppEffectHoneycomb = 3898,
        ppEffectFerrisWheelLeft = 3899,
        ppEffectFerrisWheelRight = 3900,
        ppEffectSwitchLeft = 3901,
        ppEffectSwitchUp = 3902,
        ppEffectSwitchRight = 3903,
        ppEffectSwitchDown = 3904,
        ppEffectFlipLeft = 3905,
        ppEffectFlipUp = 3906,
        ppEffectFlipRight = 3907,
        ppEffectFlipDown = 3908,
        ppEffectFlashbulb = 3909,
        ppEffectShredStripsIn = 3910,
        ppEffectShredStripsOut = 3911,
        ppEffectShredRectangleIn = 3912,
        ppEffectShredRectangleOut = 3913,
        ppEffectCubeLeft = 3914,
        ppEffectCubeUp = 3915,
        ppEffectCubeRight = 3916,
        ppEffectCubeDown = 3917,
        ppEffectRotateLeft = 3918,
        ppEffectRotateUp = 3919,
        ppEffectRotateRight = 3920,
        ppEffectRotateDown = 3921,
        ppEffectBoxLeft = 3922,
        ppEffectBoxUp = 3923,
        ppEffectBoxRight = 3924,
        ppEffectBoxDown = 3925,
        ppEffectOrbitLeft = 3926,
        ppEffectOrbitUp = 3927,
        ppEffectOrbitRight = 3928,
        ppEffectOrbitDown = 3929,
        ppEffectPanLeft = 3930,
        ppEffectPanUp = 3931,
        ppEffectPanRight = 3932,
        ppEffectPanDown = 3933,
        ppEffectFallOverLeft = 3934,
        ppEffectFallOverRight = 3935,
        ppEffectDrapeLeft = 3936,
        ppEffectDrapeRight = 3937,
        ppEffectCurtains = 3938,
        ppEffectWindLeft = 3939,
        ppEffectWindRight = 3940,
        ppEffectPrestige = 3941,
        ppEffectFracture = 3942,
        ppEffectCrush = 3943,
        ppEffectPeelOffLeft = 3944,
        ppEffectPeelOffRight = 3945,
        ppEffectPageCurlSingleLeft = 3946,
        ppEffectPageCurlSingleRight = 3947,
        ppEffectPageCurlDoubleLeft = 3948,
        ppEffectPageCurlDoubleRight = 3949,
        ppEffectAirplaneLeft = 3950,
        ppEffectAirplaneRight = 3951,
        ppEffectOrigamiLeft = 3952,
        ppEffectOrigamiRight = 3953
    } PpEntryEffect;

    typedef [uuid(EFCD481C-B00B-4718-A6FF-51D98493EE88)]
    enum {
        ppAnimateLevelMixed = -2,
        ppAnimateLevelNone = 0,
        ppAnimateByFirstLevel = 1,
        ppAnimateBySecondLevel = 2,
        ppAnimateByThirdLevel = 3,
        ppAnimateByFourthLevel = 4,
        ppAnimateByFifthLevel = 5,
        ppAnimateByAllLevels = 16
    } PpTextLevelEffect;

    typedef [uuid(9688FA96-8CF6-4642-8839-DD659D86C9B9)]
    enum {
        ppAnimateUnitMixed = -2,
        ppAnimateByParagraph = 0,
        ppAnimateByWord = 1,
        ppAnimateByCharacter = 2
    } PpTextUnitEffect;

    typedef [uuid(B46F41B2-4241-49D4-B772-6182B7F4398D)]
    enum {
        ppAnimateChartMixed = -2,
        ppAnimateBySeries = 1,
        ppAnimateByCategory = 2,
        ppAnimateBySeriesElements = 3,
        ppAnimateByCategoryElements = 4,
        ppAnimateChartAllAtOnce = 5
    } PpChartUnitEffect;

    typedef [uuid(4E58B80C-D41E-470A-A2F8-05373CA3EA5D)]
    enum {
        ppAfterEffectMixed = -2,
        ppAfterEffectNothing = 0,
        ppAfterEffectHide = 1,
        ppAfterEffectDim = 2,
        ppAfterEffectHideOnClick = 3
    } PpAfterEffect;

    typedef [uuid(F60170D6-43CA-47A4-88BF-F782728E1C87)]
    enum {
        ppAdvanceModeMixed = -2,
        ppAdvanceOnClick = 1,
        ppAdvanceOnTime = 2
    } PpAdvanceMode;

    typedef [uuid(EAF0356F-6B2B-4163-A40F-4DD7D6B40A43)]
    enum {
        ppSoundEffectsMixed = -2,
        ppSoundNone = 0,
        ppSoundStopPrevious = 1,
        ppSoundFile = 2
    } PpSoundEffectType;

    typedef [uuid(927D5C5E-9E3B-46E0-AE7B-3E89A0B53FF7)]
    enum {
        ppFollowColorsMixed = -2,
        ppFollowColorsNone = 0,
        ppFollowColorsScheme = 1,
        ppFollowColorsTextAndBackground = 2
    } PpFollowColors;

    typedef [uuid(939ABC08-6F0E-4595-A12F-F96CFCB7FF77)]
    enum {
        ppUpdateOptionMixed = -2,
        ppUpdateOptionManual = 1,
        ppUpdateOptionAutomatic = 2
    } PpUpdateOption;

    typedef [uuid(07012DE4-763E-467D-8B87-1E10304332F8)]
    enum {
        ppAlignmentMixed = -2,
        ppAlignLeft = 1,
        ppAlignCenter = 2,
        ppAlignRight = 3,
        ppAlignJustify = 4,
        ppAlignDistribute = 5,
        ppAlignThaiDistribute = 6,
        ppAlignJustifyLow = 7
    } PpParagraphAlignment;

    typedef [uuid(28F0103E-1D08-431E-8CDD-5554D008BBC3)]
    enum {
        ppBaselineAlignMixed = -2,
        ppBaselineAlignBaseline = 1,
        ppBaselineAlignTop = 2,
        ppBaselineAlignCenter = 3,
        ppBaselineAlignFarEast50 = 4,
        ppBaselineAlignAuto = 5
    } PpBaselineAlignment;

    typedef [uuid(F08DD520-1E7A-4812-9CE2-A96B079299D1)]
    enum {
        ppTabStopMixed = -2,
        ppTabStopLeft = 1,
        ppTabStopCenter = 2,
        ppTabStopRight = 3,
        ppTabStopDecimal = 4
    } PpTabStopType;

    typedef [uuid(CC8F164E-EBD7-4366-8DD6-76E984C2A8F5)]
    enum {
        ppIndentControlMixed = -2,
        ppIndentReplaceAttr = 1,
        ppIndentKeepAttr = 2
    } PpIndentControl;

    typedef [uuid(57187984-0CFA-4AD7-955A-ADA220110FC2)]
    enum {
        ppCaseSentence = 1,
        ppCaseLower = 2,
        ppCaseUpper = 3,
        ppCaseTitle = 4,
        ppCaseToggle = 5
    } PpChangeCase;

    typedef [uuid(A14B5D3E-EAA8-45C0-A41C-D0AA208BA279)]
    enum {
        ppSlideShowPointerNone = 0,
        ppSlideShowPointerArrow = 1,
        ppSlideShowPointerPen = 2,
        ppSlideShowPointerAlwaysHidden = 3,
        ppSlideShowPointerAutoArrow = 4,
        ppSlideShowPointerEraser = 5
    } PpSlideShowPointerType;

    typedef [uuid(FB066093-3DFF-4C61-9AE6-6C76C635FD55)]
    enum {
        ppSlideShowRunning = 1,
        ppSlideShowPaused = 2,
        ppSlideShowBlackScreen = 3,
        ppSlideShowWhiteScreen = 4,
        ppSlideShowDone = 5
    } PpSlideShowState;

    typedef [uuid(98884CD0-F359-48CB-BED8-0EC3090A59D6)]
    enum {
        ppSlideShowManualAdvance = 1,
        ppSlideShowUseSlideTimings = 2,
        ppSlideShowRehearseNewTimings = 3
    } PpSlideShowAdvanceMode;

    typedef [uuid(6911A8C8-1743-4AAF-988B-55FF9AE94329)]
    enum {
        ppFileDialogOpen = 1,
        ppFileDialogSave = 2
    } PpFileDialogType;

    typedef [uuid(8D624138-9944-443C-8BE1-EB10E90DD8C6)]
    enum {
        ppPrintOutputSlides = 1,
        ppPrintOutputTwoSlideHandouts = 2,
        ppPrintOutputThreeSlideHandouts = 3,
        ppPrintOutputSixSlideHandouts = 4,
        ppPrintOutputNotesPages = 5,
        ppPrintOutputOutline = 6,
        ppPrintOutputBuildSlides = 7,
        ppPrintOutputFourSlideHandouts = 8,
        ppPrintOutputNineSlideHandouts = 9,
        ppPrintOutputOneSlideHandouts = 10
    } PpPrintOutputType;

    typedef [uuid(D3A902F8-8526-4DDB-A72E-218C989128DB)]
    enum {
        ppPrintHandoutVerticalFirst = 1,
        ppPrintHandoutHorizontalFirst = 2
    } PpPrintHandoutOrder;

    typedef [uuid(901438D1-D781-49CA-AECA-83D6FC958D6A)]
    enum {
        ppPrintColor = 1,
        ppPrintBlackAndWhite = 2,
        ppPrintPureBlackAndWhite = 3
    } PpPrintColorType;

    typedef [uuid(68CF3B66-38FC-4CC7-88CA-07C394CC6A4A)]
    enum {
        ppSelectionNone = 0,
        ppSelectionSlides = 1,
        ppSelectionShapes = 2,
        ppSelectionText = 3
    } PpSelectionType;

    typedef [uuid(F37B6599-0312-44BF-984E-1136C06CDAB2)]
    enum {
        ppDirectionMixed = -2,
        ppDirectionLeftToRight = 1,
        ppDirectionRightToLeft = 2
    } PpDirection;

    typedef [uuid(1BEA23A4-497F-44D7-B7D8-80EB71A02FB5)]
    enum {
        ppDateTimeFormatMixed = -2,
        ppDateTimeMdyy = 1,
        ppDateTimeddddMMMMddyyyy = 2,
        ppDateTimedMMMMyyyy = 3,
        ppDateTimeMMMMdyyyy = 4,
        ppDateTimedMMMyy = 5,
        ppDateTimeMMMMyy = 6,
        ppDateTimeMMyy = 7,
        ppDateTimeMMddyyHmm = 8,
        ppDateTimeMMddyyhmmAMPM = 9,
        ppDateTimeHmm = 10,
        ppDateTimeHmmss = 11,
        ppDateTimehmmAMPM = 12,
        ppDateTimehmmssAMPM = 13,
        ppDateTimeFigureOut = 14,
        ppDateTimeUAQ1 = 15,
        ppDateTimeUAQ2 = 16,
        ppDateTimeUAQ3 = 17,
        ppDateTimeUAQ4 = 18,
        ppDateTimeUAQ5 = 19,
        ppDateTimeUAQ6 = 20,
        ppDateTimeUAQ7 = 21
    } PpDateTimeFormat;

    typedef [uuid(6DC8F1EC-4F59-43D5-97D9-EFC09D099444)]
    enum {
        ppTransitionSpeedMixed = -2,
        ppTransitionSpeedSlow = 1,
        ppTransitionSpeedMedium = 2,
        ppTransitionSpeedFast = 3
    } PpTransitionSpeed;

    typedef [uuid(5106E4A7-532C-413F-B2C7-8D532008F511)]
    enum {
        ppMouseClick = 1,
        ppMouseOver = 2
    } PpMouseActivation;

    typedef [uuid(EB78AE17-FAD3-4EDF-8A0B-0A379069749B)]
    enum {
        ppActionMixed = -2,
        ppActionNone = 0,
        ppActionNextSlide = 1,
        ppActionPreviousSlide = 2,
        ppActionFirstSlide = 3,
        ppActionLastSlide = 4,
        ppActionLastSlideViewed = 5,
        ppActionEndShow = 6,
        ppActionHyperlink = 7,
        ppActionRunMacro = 8,
        ppActionRunProgram = 9,
        ppActionNamedSlideShow = 10,
        ppActionOLEVerb = 11,
        ppActionPlay = 12
    } PpActionType;

    typedef [uuid(ADEADB7E-F268-4574-90FE-BC0BF4B28B3C)]
    enum {
        ppPlaceholderMixed = -2,
        ppPlaceholderTitle = 1,
        ppPlaceholderBody = 2,
        ppPlaceholderCenterTitle = 3,
        ppPlaceholderSubtitle = 4,
        ppPlaceholderVerticalTitle = 5,
        ppPlaceholderVerticalBody = 6,
        ppPlaceholderObject = 7,
        ppPlaceholderChart = 8,
        ppPlaceholderBitmap = 9,
        ppPlaceholderMediaClip = 10,
        ppPlaceholderOrgChart = 11,
        ppPlaceholderTable = 12,
        ppPlaceholderSlideNumber = 13,
        ppPlaceholderHeader = 14,
        ppPlaceholderFooter = 15,
        ppPlaceholderDate = 16,
        ppPlaceholderVerticalObject = 17,
        ppPlaceholderPicture = 18
    } PpPlaceholderType;

    typedef [uuid(E893BD55-3FC7-3CDA-9281-1ACB65441C8B)]
    enum {
        ppShowTypeSpeaker = 1,
        ppShowTypeWindow = 2,
        ppShowTypeKiosk = 3,
        ppShowTypeWindow2 = 4
    } PpSlideShowType;

    typedef [uuid(F8FB4BD4-ECE4-4009-9FA6-AC93191315EB)]
    enum {
        ppPrintAll = 1,
        ppPrintSelection = 2,
        ppPrintCurrent = 3,
        ppPrintSlideRange = 4,
        ppPrintNamedSlideShow = 5,
        ppPrintSection = 6
    } PpPrintRangeType;

    typedef [uuid(A8FB07E5-9C29-4F16-9DC4-CA6333719385)]
    enum {
        ppAutoSizeMixed = -2,
        ppAutoSizeNone = 0,
        ppAutoSizeShapeToFitText = 1
    } PpAutoSize;

    typedef [uuid(51491CE7-3402-4004-9836-2307103F3731)]
    enum {
        ppMediaTypeMixed = -2,
        ppMediaTypeOther = 1,
        ppMediaTypeSound = 2,
        ppMediaTypeMovie = 3
    } PpMediaType;

    typedef [uuid(6CB42C6D-2958-4F46-8327-E6ABB83F719D)]
    enum {
        ppSoundFormatMixed = -2,
        ppSoundFormatNone = 0,
        ppSoundFormatWAV = 1,
        ppSoundFormatMIDI = 2,
        ppSoundFormatCDAudio = 3
    } PpSoundFormatType;

    typedef [uuid(C8F6BBD1-4841-4C73-ACBB-69CE5637808E)]
    enum {
        ppFarEastLineBreakLevelNormal = 1,
        ppFarEastLineBreakLevelStrict = 2,
        ppFarEastLineBreakLevelCustom = 3
    } PpFarEastLineBreakLevel;

    typedef [uuid(170ECD11-1508-446D-99F0-A5DF077F35FF)]
    enum {
        ppShowAll = 1,
        ppShowSlideRange = 2,
        ppShowNamedSlideShow = 3
    } PpSlideShowRangeType;

    typedef [uuid(DCA36717-111A-4633-B688-32C9548576D4)]
    enum {
        ppFrameColorsBrowserColors = 1,
        ppFrameColorsPresentationSchemeTextColor = 2,
        ppFrameColorsPresentationSchemeAccentColor = 3,
        ppFrameColorsWhiteTextOnBlack = 4,
        ppFrameColorsBlackTextOnWhite = 5
    } PpFrameColors;

    [
      odl,
      uuid(91493450-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007a508),
      hidden,
      dual,
      oleautomation
    ]
    interface Collection : IDispatch {
        [id(0xfffffffc), propget, restricted, helpcontext(0x0007a509)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a), restricted, helpcontext(0x0007a50a)]
        HRESULT _Index(
                        [in] int Index,
                        [out, retval] VARIANT* _Index);
        [id(0x0000000b), propget, helpcontext(0x0007a50b)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(91493442-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007a8f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Application : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007a8f1)]
        HRESULT Presentations([out, retval] Presentations** Presentations);
        [id(0x000007d2), propget, helpcontext(0x0007a8f2)]
        HRESULT Windows([out, retval] DocumentWindows** Windows);
        [id(0x000007d3), propget, hidden, helpcontext(0x0007a8f3)]
        HRESULT Dialogs([out, retval] IUnknown** Dialogs);
        [id(0x000007d4), propget, helpcontext(0x0007a8f4)]
        HRESULT ActiveWindow([out, retval] DocumentWindow** ActiveWindow);
        [id(0x000007d5), propget, helpcontext(0x0007a8f5)]
        HRESULT ActivePresentation([out, retval] Presentation** ActivePresentation);
        [id(0x000007d6), propget, helpcontext(0x0007a8f6)]
        HRESULT SlideShowWindows([out, retval] SlideShowWindows** SlideShowWindows);
        [id(0x000007d7), propget, helpcontext(0x0007a8f7)]
        HRESULT CommandBars([out, retval] CommandBars** CommandBars);
        [id(0x000007d8), propget, helpcontext(0x0007a8f8)]
        HRESULT Path([out, retval] BSTR* Path);
        [id(00000000), propget, helpcontext(0x0007a8f9)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d9), propget, helpcontext(0x0007a8fa)]
        HRESULT Caption([out, retval] BSTR* Caption);
        [id(0x000007d9), propput, helpcontext(0x0007a8fa)]
        HRESULT Caption([in] BSTR Caption);
        [id(0x000007da), propget, hidden, helpcontext(0x0007a8fb)]
        HRESULT Assistant([out, retval] Assistant** Assistant);
        [id(0x000007db), propget, hidden, helpcontext(0x0007a8fc)]
        HRESULT FileSearch([out, retval] FileSearch** FileSearch);
        [id(0x000007dc), propget, hidden, helpcontext(0x0007a8fd)]
        HRESULT FileFind([out, retval] IFind** FileFind);
        [id(0x000007dd), propget, helpcontext(0x0007a8fe)]
        HRESULT Build([out, retval] BSTR* Build);
        [id(0x000007de), propget, helpcontext(0x0007a8ff)]
        HRESULT Version([out, retval] BSTR* Version);
        [id(0x000007df), propget, helpcontext(0x0007a900)]
        HRESULT OperatingSystem([out, retval] BSTR* OperatingSystem);
        [id(0x000007e0), propget, helpcontext(0x0007a901)]
        HRESULT ActivePrinter([out, retval] BSTR* ActivePrinter);
        [id(0x000007e1), propget, helpcontext(0x0007a902)]
        HRESULT Creator([out, retval] long* Creator);
        [id(0x000007e2), propget, helpcontext(0x0007a903)]
        HRESULT AddIns([out, retval] AddIns** AddIns);
        [id(0x000007e3), propget, helpcontext(0x0007a904)]
        HRESULT VBE([out, retval] VBE** VBE);
        [id(0x000007e4), helpcontext(0x0007a905)]
        HRESULT Help(
                        [in, optional, defaultvalue("vbapp10.chm")] BSTR HelpFile,
                        [in, optional, defaultvalue(0)] int ContextID);
        [id(0x000007e5), helpcontext(0x0007a906)]
        HRESULT Quit();
        [id(0x000007e6), vararg, helpcontext(0x0007a907)]
        HRESULT Run(
                        [in] BSTR MacroName,
                        [in] SAFEARRAY(VARIANT)* safeArrayOfParams,
                        [out, retval] VARIANT* Run);
        [id(0x000007e7), hidden, helpcontext(0x0007a908)]
        HRESULT PPFileDialog(
                        [in] PpFileDialogType Type,
                        [out, retval] IUnknown** PPFileDialog);
        [id(0x000007e8), restricted, helpcontext(0x0007a909)]
        HRESULT LaunchSpelling([in] DocumentWindow* pWindow);
        [id(0x000007e9), propget, helpcontext(0x0007a90a)]
        HRESULT Left([out, retval] single* Left);
        [id(0x000007e9), propput, helpcontext(0x0007a90a)]
        HRESULT Left([in] single Left);
        [id(0x000007ea), propget, helpcontext(0x0007a90b)]
        HRESULT Top([out, retval] single* Top);
        [id(0x000007ea), propput, helpcontext(0x0007a90b)]
        HRESULT Top([in] single Top);
        [id(0x000007eb), propget, helpcontext(0x0007a90c)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007eb), propput, helpcontext(0x0007a90c)]
        HRESULT Width([in] single Width);
        [id(0x000007ec), propget, helpcontext(0x0007a90d)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007ec), propput, helpcontext(0x0007a90d)]
        HRESULT Height([in] single Height);
        [id(0x000007ed), propget, helpcontext(0x0007a90e)]
        HRESULT WindowState([out, retval] PpWindowState* WindowState);
        [id(0x000007ed), propput, helpcontext(0x0007a90e)]
        HRESULT WindowState([in] PpWindowState WindowState);
        [id(0x000007ee), propget, helpcontext(0x0007a90f)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x000007ee), propput, helpcontext(0x0007a90f)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x000007ef), propget, restricted, helpcontext(0x0007a910)]
        HRESULT HWND([out, retval] long* HWND);
        [id(0x000007f0), propget, helpcontext(0x0007a911)]
        HRESULT Active([out, retval] MsoTriState* Active);
        [id(0x000007f1), helpcontext(0x0007a912)]
        HRESULT Activate();
        [id(0x000007f2), propget, hidden, helpcontext(0x0007a913)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** AnswerWizard);
        [id(0x000007f3), propget, helpcontext(0x0007a914)]
        HRESULT COMAddIns([out, retval] COMAddIns** COMAddIns);
        [id(0x000007f4), propget, helpcontext(0x0007a915)]
        HRESULT ProductCode([out, retval] BSTR* ProductCode);
        [id(0x000007f5), propget, hidden, helpcontext(0x0007a916)]
        HRESULT DefaultWebOptions([out, retval] DefaultWebOptions** DefaultWebOptions);
        [id(0x000007f6), propget, helpcontext(0x0007a917)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** LanguageSettings);
        [id(0x000007f7), propget, hidden, helpcontext(0x0007a918)]
        HRESULT MsoDebugOptions([out, retval] MsoDebugOptions** MsoDebugOptions);
        [id(0x000007f8), propget, helpcontext(0x0007a919)]
        HRESULT ShowWindowsInTaskbar([out, retval] MsoTriState* ShowWindowsInTaskbar);
        [id(0x000007f8), propput, helpcontext(0x0007a919)]
        HRESULT ShowWindowsInTaskbar([in] MsoTriState ShowWindowsInTaskbar);
        [id(0x000007f9), propget, hidden, helpcontext(0x0007a91a)]
        HRESULT Marker([out, retval] IUnknown** Marker);
        [id(0x000007fa), propget, helpcontext(0x0007a91b)]
        HRESULT FeatureInstall([out, retval] MsoFeatureInstall* FeatureInstall);
        [id(0x000007fa), propput, helpcontext(0x0007a91b)]
        HRESULT FeatureInstall([in] MsoFeatureInstall FeatureInstall);
        [id(0x000007fb), hidden, helpcontext(0x0007a91c)]
        HRESULT GetOptionFlag(
                        [in] long Option,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Persist,
                        [out, retval] VARIANT_BOOL* GetOptionFlag);
        [id(0x000007fc), hidden, helpcontext(0x0007a91d)]
        HRESULT SetOptionFlag(
                        [in] long Option,
                        [in] VARIANT_BOOL State,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Persist);
        [id(0x000007fd), propget, helpcontext(0x0007a91e)]
        HRESULT FileDialog(
                        [in] MsoFileDialogType Type,
                        [out, retval] FileDialog** FileDialog);
        [id(0x000007fe), propget, helpcontext(0x0007a91f)]
        HRESULT DisplayGridLines([out, retval] MsoTriState* DisplayGridLines);
        [id(0x000007fe), propput, helpcontext(0x0007a91f)]
        HRESULT DisplayGridLines([in] MsoTriState DisplayGridLines);
        [id(0x000007ff), propget, helpcontext(0x0007a920)]
        HRESULT AutomationSecurity([out, retval] MsoAutomationSecurity* AutomationSecurity);
        [id(0x000007ff), propput, helpcontext(0x0007a920)]
        HRESULT AutomationSecurity([in] MsoAutomationSecurity AutomationSecurity);
        [id(0x00000800), propget, helpcontext(0x0007a921)]
        HRESULT NewPresentation([out, retval] NewFile** NewPresentation);
        [id(0x00000801), propget, helpcontext(0x0007a922)]
        HRESULT DisplayAlerts([out, retval] PpAlertLevel* DisplayAlerts);
        [id(0x00000801), propput, helpcontext(0x0007a922)]
        HRESULT DisplayAlerts([in] PpAlertLevel DisplayAlerts);
        [id(0x00000802), propget, helpcontext(0x0007a923)]
        HRESULT ShowStartupDialog([out, retval] MsoTriState* ShowStartupDialog);
        [id(0x00000802), propput, helpcontext(0x0007a923)]
        HRESULT ShowStartupDialog([in] MsoTriState ShowStartupDialog);
        [id(0x00000803), hidden, helpcontext(0x0007a924)]
        HRESULT SetPerfMarker([in] int Marker);
        [id(0x00000804), propget, helpcontext(0x0007a925)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** AutoCorrect);
        [id(0x00000805), propget, helpcontext(0x0007a926)]
        HRESULT Options([out, retval] Options** Options);
        [id(0x00000806), hidden, helpcontext(0x0007a927)]
        HRESULT LaunchPublishSlidesDialog([in] BSTR SlideLibraryUrl);
        [id(0x00000807), hidden, helpcontext(0x0007a928)]
        HRESULT LaunchSendToPPTDialog([in] VARIANT* SlideUrls);
        [id(0x00000808), propget, helpcontext(0x0007a929)]
        HRESULT DisplayDocumentInformationPanel([out, retval] VARIANT_BOOL* DisplayDocumentInformationPanel);
        [id(0x00000808), propput, helpcontext(0x0007a929)]
        HRESULT DisplayDocumentInformationPanel([in] VARIANT_BOOL DisplayDocumentInformationPanel);
        [id(0x00000809), propget, helpcontext(0x0007a92a)]
        HRESULT Assistance([out, retval] IAssistance** Assistance);
        [id(0x0000080a), propget, helpcontext(0x0007a92b)]
        HRESULT ActiveEncryptionSession([out, retval] long* ActiveEncryptionSession);
        [id(0x0000080b), propget, helpcontext(0x0007a92c)]
        HRESULT FileConverters([out, retval] FileConverters** FileConverters);
        [id(0x0000080c), propget, helpcontext(0x0007a92d)]
        HRESULT SmartArtLayouts([out, retval] SmartArtLayouts** SmartArtLayouts);
        [id(0x0000080d), propget, helpcontext(0x0007a92e)]
        HRESULT SmartArtQuickStyles([out, retval] SmartArtQuickStyles** SmartArtQuickStyles);
        [id(0x0000080e), propget, helpcontext(0x0007a92f)]
        HRESULT SmartArtColors([out, retval] SmartArtColors** SmartArtColors);
        [id(0x0000080f), propget, helpcontext(0x0007a930)]
        HRESULT ProtectedViewWindows([out, retval] ProtectedViewWindows** ProtectedViewWindows);
        [id(0x00000810), propget, helpcontext(0x0007a931)]
        HRESULT ActiveProtectedViewWindow([out, retval] ProtectedViewWindow** ActiveProtectedViewWindow);
        [id(0x00000811), propget, helpcontext(0x0007a932)]
        HRESULT IsSandboxed([out, retval] VARIANT_BOOL* IsSandboxed);
        [id(0x00000812), propget, hidden, helpcontext(0x0007a933)]
        HRESULT ResampleMediaTasks([out, retval] ResampleMediaTasks** ResampleMediaTasks);
        [id(0x00000813), helpcontext(0x0007a934)]
        HRESULT StartNewUndoEntry();
        [id(0x00000814), propget, helpcontext(0x0007a935)]
        HRESULT FileValidation([out, retval] MsoFileValidationMode* FileValidation);
        [id(0x00000814), propput, helpcontext(0x0007a935)]
        HRESULT FileValidation([in] MsoFileValidationMode FileValidation);
        [id(0x00000815), helpcontext(0x0007a936)]
        HRESULT OpenThemeFile(
                        [in] BSTR themeFileName,
                        [out, retval] Theme** Theme);
        [id(0x00000816), propget, helpcontext(0x0007a937)]
        HRESULT ChartDataPointTrack([out, retval] VARIANT_BOOL* pfChartDataPointTrack);
        [id(0x00000816), propput, helpcontext(0x0007a937)]
        HRESULT ChartDataPointTrack([in] VARIANT_BOOL pfChartDataPointTrack);
        [id(0x00000817), propget, helpcontext(0x0007a938)]
        HRESULT DisplayGuides([out, retval] MsoTriState* DisplayGridLines);
        [id(0x00000817), propput, helpcontext(0x0007a938)]
        HRESULT DisplayGuides([in] MsoTriState DisplayGridLines);
    };

    [
      odl,
      uuid(91493451-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007acd8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Global : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007acd9)]
        HRESULT ActivePresentation([out, retval] Presentation** ActivePresentation);
        [id(0x000007d2), propget, helpcontext(0x0007acda)]
        HRESULT ActiveWindow([out, retval] DocumentWindow** ActiveWindow);
        [id(0x000007d3), propget, helpcontext(0x0007acdb)]
        HRESULT AddIns([out, retval] AddIns** AddIns);
        [id(0x000007d4), propget, helpcontext(0x0007acdc)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d5), propget, hidden, helpcontext(0x0007acdd)]
        HRESULT Assistant([out, retval] Assistant** Assistant);
        [id(0x000007d6), propget, hidden, helpcontext(0x0007acde)]
        HRESULT Dialogs([out, retval] IUnknown** Dialogs);
        [id(0x000007d7), propget, helpcontext(0x0007acdf)]
        HRESULT Presentations([out, retval] Presentations** Presentations);
        [id(0x000007d8), propget, helpcontext(0x0007ace0)]
        HRESULT SlideShowWindows([out, retval] SlideShowWindows** SlideShowWindows);
        [id(0x000007d9), propget, helpcontext(0x0007ace1)]
        HRESULT Windows([out, retval] DocumentWindows** Windows);
        [id(0x000007da), propget, helpcontext(0x0007ace2)]
        HRESULT CommandBars([out, retval] CommandBars** CommandBars);
        [id(0x000007db), propget, hidden, helpcontext(0x0007ace3)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** AnswerWizard);
        [id(0x000007dc), propget, helpcontext(0x0007ace4)]
        HRESULT FileConverters([out, retval] FileConverters** FileConverters);
        [id(0x000007dd), propget, helpcontext(0x0007ace5)]
        HRESULT ProtectedViewWindows([out, retval] ProtectedViewWindows** ProtectedViewWindows);
        [id(0x000007de), propget, helpcontext(0x0007ace6)]
        HRESULT ActiveProtectedViewWindow([out, retval] ProtectedViewWindow** ActiveProtectedViewWindow);
        [id(0x000007df), propget, helpcontext(0x0007ace7)]
        HRESULT IsSandboxed([out, retval] VARIANT_BOOL* IsSandboxed);
    };

    [
      uuid(91493441-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007b0c0)
    ]
    coclass Application {
        [default] interface _Application;
        [default, source] interface EApplication;
    };

    [
      uuid(91493443-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007b4a8),
      appobject,
      hidden
    ]
    coclass Global {
        [default] interface _Global;
    };

    [
      odl,
      uuid(91493452-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007b890),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x0007b891)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), propget, helpcontext(0x0007b892)]
        HRESULT RGB([out, retval] MsoRGBType* RGB);
        [id(00000000), propput, helpcontext(0x0007b892)]
        HRESULT RGB([in] MsoRGBType RGB);
        [id(0x00000065), propget, helpcontext(0x0007b893)]
        HRESULT Type([out, retval] MsoColorType* Type);
        [id(0x000007d3), propget, helpcontext(0x0007b894)]
        HRESULT SchemeColor([out, retval] PpColorSchemeIndex* SchemeColor);
        [id(0x000007d3), propput, helpcontext(0x0007b894)]
        HRESULT SchemeColor([in] PpColorSchemeIndex SchemeColor);
        [id(0x00000067), propget, helpcontext(0x0007b895)]
        HRESULT TintAndShade([out, retval] single* pValue);
        [id(0x00000067), propput, helpcontext(0x0007b895)]
        HRESULT TintAndShade([in] single pValue);
        [id(0x00000068), propget, helpcontext(0x0007b896)]
        HRESULT ObjectThemeColor([out, retval] MsoThemeColorIndex* ObjectThemeColor);
        [id(0x00000068), propput, helpcontext(0x0007b896)]
        HRESULT ObjectThemeColor([in] MsoThemeColorIndex ObjectThemeColor);
        [id(0x00000069), propget, helpcontext(0x0007b897)]
        HRESULT Brightness([out, retval] single* Brightness);
        [id(0x00000069), propput, helpcontext(0x0007b897)]
        HRESULT Brightness([in] single Brightness);
    };

    [
      odl,
      uuid(91493453-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007bc78),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideShowWindow : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007bc79)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007bc7a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007bc7b)]
        HRESULT View([out, retval] SlideShowView** View);
        [id(0x000007d4), propget, helpcontext(0x0007bc7c)]
        HRESULT Presentation([out, retval] Presentation** Presentation);
        [id(0x000007d5), propget, helpcontext(0x0007bc7d)]
        HRESULT IsFullScreen([out, retval] MsoTriState* IsFullScreen);
        [id(0x000007d6), propget, helpcontext(0x0007bc7e)]
        HRESULT Left([out, retval] single* Left);
        [id(0x000007d6), propput, helpcontext(0x0007bc7e)]
        HRESULT Left([in] single Left);
        [id(0x000007d7), propget, helpcontext(0x0007bc7f)]
        HRESULT Top([out, retval] single* Top);
        [id(0x000007d7), propput, helpcontext(0x0007bc7f)]
        HRESULT Top([in] single Top);
        [id(0x000007d8), propget, helpcontext(0x0007bc80)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007d8), propput, helpcontext(0x0007bc80)]
        HRESULT Width([in] single Width);
        [id(0x000007d9), propget, helpcontext(0x0007bc81)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007d9), propput, helpcontext(0x0007bc81)]
        HRESULT Height([in] single Height);
        [id(0x000007da), propget, restricted, helpcontext(0x0007bc82)]
        HRESULT HWND([out, retval] long* HWND);
        [id(0x000007db), propget, helpcontext(0x0007bc83)]
        HRESULT Active([out, retval] MsoTriState* Active);
        [id(0x000007dc), helpcontext(0x0007bc84)]
        HRESULT Activate();
        [id(0x000007dd), propget, helpcontext(0x0007bc85)]
        HRESULT SlideNavigation([out, retval] SlideNavigation** navigation);
    };

    [
      odl,
      uuid(91493454-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007c060),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Selection : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007c061)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007c062)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), helpcontext(0x0007c063)]
        HRESULT Cut();
        [id(0x000007d4), helpcontext(0x0007c064)]
        HRESULT Copy();
        [id(0x000007d5), helpcontext(0x0007c065)]
        HRESULT Delete();
        [id(0x000007d6), helpcontext(0x0007c066)]
        HRESULT Unselect();
        [id(0x000007d7), propget, helpcontext(0x0007c067)]
        HRESULT Type([out, retval] PpSelectionType* Type);
        [id(0x000007d8), propget, helpcontext(0x0007c068)]
        HRESULT SlideRange([out, retval] SlideRange** SlideRange);
        [id(0x000007d9), propget, helpcontext(0x0007c069)]
        HRESULT ShapeRange([out, retval] ShapeRange** ShapeRange);
        [id(0x000007da), propget, helpcontext(0x0007c06a)]
        HRESULT TextRange([out, retval] TextRange** TextRange);
        [id(0x000007db), propget, helpcontext(0x0007c06b)]
        HRESULT ChildShapeRange([out, retval] ShapeRange** ChildShapeRange);
        [id(0x000007dc), propget, helpcontext(0x0007c06c)]
        HRESULT HasChildShapeRange([out, retval] VARIANT_BOOL* HasChildShapeRange);
        [id(0x000007dd), propget, helpcontext(0x0007c06d)]
        HRESULT TextRange2([out, retval] TextRange2** TextRange2);
    };

    [
      odl,
      uuid(91493455-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007c448),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DocumentWindows : Collection {
        [id(0x000007d1), propget, helpcontext(0x0007c449)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007c44a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0007c44b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] DocumentWindow** Item);
        [id(0x000007d3), helpcontext(0x0007c44c)]
        HRESULT Arrange([in, optional, defaultvalue(1)] PpArrangeStyle arrangeStyle);
    };

    [
      odl,
      uuid(91493456-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007c830),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideShowWindows : Collection {
        [id(0x000007d1), propget, helpcontext(0x0007c831)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007c832)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0007c833),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] SlideShowWindow** Item);
    };

    [
      odl,
      uuid(91493457-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007cc18),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DocumentWindow : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007cc19)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007cc1a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007cc1b)]
        HRESULT Selection([out, retval] Selection** Selection);
        [id(0x000007d4), propget, helpcontext(0x0007cc1c)]
        HRESULT View([out, retval] View** View);
        [id(0x000007d5), propget, helpcontext(0x0007cc1d)]
        HRESULT Presentation([out, retval] Presentation** Presentation);
        [id(0x000007d6), propget, helpcontext(0x0007cc1e)]
        HRESULT ViewType([out, retval] PpViewType* ViewType);
        [id(0x000007d6), propput, helpcontext(0x0007cc1e)]
        HRESULT ViewType([in] PpViewType ViewType);
        [id(0x000007d7), propget, helpcontext(0x0007cc1f)]
        HRESULT BlackAndWhite([out, retval] MsoTriState* BlackAndWhite);
        [id(0x000007d7), propput, helpcontext(0x0007cc1f)]
        HRESULT BlackAndWhite([in] MsoTriState BlackAndWhite);
        [id(0x000007d8), propget, helpcontext(0x0007cc20)]
        HRESULT Active([out, retval] MsoTriState* Active);
        [id(0x000007d9), propget, helpcontext(0x0007cc21)]
        HRESULT WindowState([out, retval] PpWindowState* WindowState);
        [id(0x000007d9), propput, helpcontext(0x0007cc21)]
        HRESULT WindowState([in] PpWindowState WindowState);
        [id(00000000), propget, helpcontext(0x0007cc22)]
        HRESULT Caption([out, retval] BSTR* Caption);
        [id(0x000007da), propget, helpcontext(0x0007cc23)]
        HRESULT Left([out, retval] single* Left);
        [id(0x000007da), propput, helpcontext(0x0007cc23)]
        HRESULT Left([in] single Left);
        [id(0x000007db), propget, helpcontext(0x0007cc24)]
        HRESULT Top([out, retval] single* Top);
        [id(0x000007db), propput, helpcontext(0x0007cc24)]
        HRESULT Top([in] single Top);
        [id(0x000007dc), propget, helpcontext(0x0007cc25)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007dc), propput, helpcontext(0x0007cc25)]
        HRESULT Width([in] single Width);
        [id(0x000007dd), propget, helpcontext(0x0007cc26)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007dd), propput, helpcontext(0x0007cc26)]
        HRESULT Height([in] single Height);
        [id(0x000007de), helpcontext(0x0007cc27)]
        HRESULT FitToPage();
        [id(0x000007df), helpcontext(0x0007cc28)]
        HRESULT Activate();
        [id(0x000007e0), helpcontext(0x0007cc29)]
        HRESULT LargeScroll(
                        [in, optional, defaultvalue(1)] int Down,
                        [in, optional, defaultvalue(0)] int Up,
                        [in, optional, defaultvalue(0)] int ToRight,
                        [in, optional, defaultvalue(0)] int ToLeft);
        [id(0x000007e1), helpcontext(0x0007cc2a)]
        HRESULT SmallScroll(
                        [in, optional, defaultvalue(1)] int Down,
                        [in, optional, defaultvalue(0)] int Up,
                        [in, optional, defaultvalue(0)] int ToRight,
                        [in, optional, defaultvalue(0)] int ToLeft);
        [id(0x000007e2), helpcontext(0x0007cc2b)]
        HRESULT NewWindow([out, retval] DocumentWindow** NewWindow);
        [id(0x000007e3), helpcontext(0x0007cc2c)]
        HRESULT Close();
        [id(0x000007e4), propget, restricted, helpcontext(0x0007cc2d)]
        HRESULT HWND([out, retval] long* HWND);
        [id(0x000007e5), propget, helpcontext(0x0007cc2e)]
        HRESULT ActivePane([out, retval] Pane** ActivePane);
        [id(0x000007e6), propget, helpcontext(0x0007cc2f)]
        HRESULT Panes([out, retval] Panes** Panes);
        [id(0x000007e7), propget, helpcontext(0x0007cc30)]
        HRESULT SplitVertical([out, retval] long* SplitVertical);
        [id(0x000007e7), propput, helpcontext(0x0007cc30)]
        HRESULT SplitVertical([in] long SplitVertical);
        [id(0x000007e8), propget, helpcontext(0x0007cc31)]
        HRESULT SplitHorizontal([out, retval] long* SplitHorizontal);
        [id(0x000007e8), propput, helpcontext(0x0007cc31)]
        HRESULT SplitHorizontal([in] long SplitHorizontal);
        [id(0x000007e9), helpcontext(0x0007cc32)]
        HRESULT RangeFromPoint(
                        [in] int X,
                        [in] int Y,
                        [out, retval] IDispatch** RangeFromPoint);
        [id(0x000007ea), helpcontext(0x0007cc33)]
        HRESULT PointsToScreenPixelsX(
                        [in] single Points,
                        [out, retval] int* PointsToScreenPixelsX);
        [id(0x000007eb), helpcontext(0x0007cc34)]
        HRESULT PointsToScreenPixelsY(
                        [in] single Points,
                        [out, retval] int* PointsToScreenPixelsY);
        [id(0x000007ec), helpcontext(0x0007cc35)]
        HRESULT ScrollIntoView(
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [in, optional, defaultvalue(-1)] MsoTriState Start);
        [id(0x000007ed), helpcontext(0x0007cc36)]
        HRESULT IsSectionExpanded(
                        [in] int sectionIndex,
                        [out, retval] VARIANT_BOOL* IsSectionExpanded);
        [id(0x000007ee), helpcontext(0x0007cc37)]
        HRESULT ExpandSection(
                        [in] int sectionIndex,
                        [in] VARIANT_BOOL Expand);
        [id(0x000007ef), helpcontext(0x0007cc38)]
        HRESULT ShowInsertAppDialog([in] int Filter);
    };

    [
      odl,
      uuid(91493458-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007d000),
      dual,
      nonextensible,
      oleautomation
    ]
    interface View : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007d001)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007d002)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007d003)]
        HRESULT Type([out, retval] PpViewType* Type);
        [id(0x000007d4), propget, helpcontext(0x0007d004)]
        HRESULT Zoom([out, retval] int* Zoom);
        [id(0x000007d4), propput, helpcontext(0x0007d004)]
        HRESULT Zoom([in] int Zoom);
        [id(0x000007d5), helpcontext(0x0007d005)]
        HRESULT Paste();
        [id(0x000007d6), propget, helpcontext(0x0007d006)]
        HRESULT Slide([out, retval] IDispatch** Slide);
        [id(0x000007d6), propput, helpcontext(0x0007d006)]
        HRESULT Slide([in] IDispatch* Slide);
        [id(0x000007d7), helpcontext(0x0007d007)]
        HRESULT GotoSlide([in] int Index);
        [id(0x000007d8), propget, helpcontext(0x0007d008)]
        HRESULT DisplaySlideMiniature([out, retval] MsoTriState* DisplaySlideMiniature);
        [id(0x000007d8), propput, helpcontext(0x0007d008)]
        HRESULT DisplaySlideMiniature([in] MsoTriState DisplaySlideMiniature);
        [id(0x000007d9), propget, helpcontext(0x0007d009)]
        HRESULT ZoomToFit([out, retval] MsoTriState* ZoomToFit);
        [id(0x000007d9), propput, helpcontext(0x0007d009)]
        HRESULT ZoomToFit([in] MsoTriState ZoomToFit);
        [id(0x000007da), helpcontext(0x0007d00a)]
        HRESULT PasteSpecial(
                        [in, optional, defaultvalue(0)] PpPasteDataType DataType,
                        [in, optional, defaultvalue(0)] MsoTriState DisplayAsIcon,
                        [in, optional, defaultvalue("")] BSTR IconFileName,
                        [in, optional, defaultvalue(0)] int IconIndex,
                        [in, optional, defaultvalue("")] BSTR IconLabel,
                        [in, optional, defaultvalue(0)] MsoTriState Link);
        [id(0x000007db), propget, helpcontext(0x0007d00b)]
        HRESULT PrintOptions([out, retval] PrintOptions** PrintOptions);
        [id(0x000007dc), helpcontext(0x0007d00c)]
        HRESULT PrintOut(
                        [in, optional, defaultvalue(-1)] int From,
                        [in, optional, defaultvalue(-1)] int To,
                        [in, optional, defaultvalue("")] BSTR PrintToFile,
                        [in, optional, defaultvalue(0)] int Copies,
                        [in, optional, defaultvalue(-99)] MsoTriState Collate);
        [id(0x000007dd), helpcontext(0x0007d00d)]
        HRESULT Player(
                        [in] VARIANT ShapeId,
                        [out, retval] Player** Player);
        [id(0x000007de), propget, helpcontext(0x0007d00e)]
        HRESULT MediaControlsVisible([out, retval] MsoTriState* MediaControlsVisible);
        [id(0x000007df), propget, helpcontext(0x0007d00f)]
        HRESULT MediaControlsLeft([out, retval] single* MediaControlsLeft);
        [id(0x000007e0), propget, helpcontext(0x0007d010)]
        HRESULT MediaControlsTop([out, retval] single* MediaControlsTop);
        [id(0x000007e1), propget, helpcontext(0x0007d011)]
        HRESULT MediaControlsWidth([out, retval] single* MediaControlsWidth);
        [id(0x000007e2), propget, helpcontext(0x0007d012)]
        HRESULT MediaControlsHeight([out, retval] single* MediaControlsHeight);
    };

    [
      odl,
      uuid(91493459-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007d3e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideShowView : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007d3e9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007d3ea)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007d3eb)]
        HRESULT Zoom([out, retval] int* Zoom);
        [id(0x000007d4), propget, helpcontext(0x0007d3ec)]
        HRESULT Slide([out, retval] Slide** Slide);
        [id(0x000007d5), propget, helpcontext(0x0007d3ed)]
        HRESULT PointerType([out, retval] PpSlideShowPointerType* PointerType);
        [id(0x000007d5), propput, helpcontext(0x0007d3ed)]
        HRESULT PointerType([in] PpSlideShowPointerType PointerType);
        [id(0x000007d6), propget, helpcontext(0x0007d3ee)]
        HRESULT State([out, retval] PpSlideShowState* State);
        [id(0x000007d6), propput, helpcontext(0x0007d3ee)]
        HRESULT State([in] PpSlideShowState State);
        [id(0x000007d7), propget, helpcontext(0x0007d3ef)]
        HRESULT AcceleratorsEnabled([out, retval] MsoTriState* AcceleratorsEnabled);
        [id(0x000007d7), propput, helpcontext(0x0007d3ef)]
        HRESULT AcceleratorsEnabled([in] MsoTriState AcceleratorsEnabled);
        [id(0x000007d8), propget, helpcontext(0x0007d3f0)]
        HRESULT PresentationElapsedTime([out, retval] single* PresentationElapsedTime);
        [id(0x000007d9), propget, helpcontext(0x0007d3f1)]
        HRESULT SlideElapsedTime([out, retval] single* SlideElapsedTime);
        [id(0x000007d9), propput, helpcontext(0x0007d3f1)]
        HRESULT SlideElapsedTime([in] single SlideElapsedTime);
        [id(0x000007da), propget, helpcontext(0x0007d3f2)]
        HRESULT LastSlideViewed([out, retval] Slide** LastSlideViewed);
        [id(0x000007db), propget, helpcontext(0x0007d3f3)]
        HRESULT AdvanceMode([out, retval] PpSlideShowAdvanceMode* AdvanceMode);
        [id(0x000007dc), propget, helpcontext(0x0007d3f4)]
        HRESULT PointerColor([out, retval] ColorFormat** PointerColor);
        [id(0x000007dd), propget, helpcontext(0x0007d3f5)]
        HRESULT IsNamedShow([out, retval] MsoTriState* IsNamedShow);
        [id(0x000007de), propget, helpcontext(0x0007d3f6)]
        HRESULT SlideShowName([out, retval] BSTR* SlideShowName);
        [id(0x000007df), helpcontext(0x0007d3f7)]
        HRESULT DrawLine(
                        [in] single BeginX,
                        [in] single BeginY,
                        [in] single EndX,
                        [in] single EndY);
        [id(0x000007e0), helpcontext(0x0007d3f8)]
        HRESULT EraseDrawing();
        [id(0x000007e1), helpcontext(0x0007d3f9)]
        HRESULT First();
        [id(0x000007e2), helpcontext(0x0007d3fa)]
        HRESULT Last();
        [id(0x000007e3), helpcontext(0x0007d3fb)]
        HRESULT Next();
        [id(0x000007e4), helpcontext(0x0007d3fc)]
        HRESULT Previous();
        [id(0x000007e5), helpcontext(0x0007d3fd)]
        HRESULT GotoSlide(
                        [in] int Index,
                        [in, optional, defaultvalue(-1)] MsoTriState ResetSlide);
        [id(0x000007e6), helpcontext(0x0007d3fe)]
        HRESULT GotoNamedShow([in] BSTR SlideShowName);
        [id(0x000007e7), helpcontext(0x0007d3ff)]
        HRESULT EndNamedShow();
        [id(0x000007e8), helpcontext(0x0007d400)]
        HRESULT ResetSlideTime();
        [id(0x000007e9), helpcontext(0x0007d401)]
        HRESULT Exit();
        [id(0x000007ea), hidden, helpcontext(0x0007d402)]
        HRESULT InstallTracker(
                        [in] MouseTracker* pTracker,
                        [in] MsoTriState Presenter);
        [id(0x000007eb), propget, helpcontext(0x0007d403)]
        HRESULT CurrentShowPosition([out, retval] int* CurrentShowPosition);
        [id(0x000007ec), helpcontext(0x0007d404)]
        HRESULT GotoClick([in] int Index);
        [id(0x000007ed), helpcontext(0x0007d405)]
        HRESULT GetClickIndex([out, retval] int* GetClickIndex);
        [id(0x000007ee), helpcontext(0x0007d406)]
        HRESULT GetClickCount([out, retval] int* GetClickCount);
        [id(0x000007ef), helpcontext(0x0007d407)]
        HRESULT FirstAnimationIsAutomatic([out, retval] VARIANT_BOOL* FirstAnimationIsAutomatic);
        [id(0x000007f0), helpcontext(0x0007d408)]
        HRESULT Player(
                        [in] VARIANT ShapeId,
                        [out, retval] Player** Player);
        [id(0x000007f1), propget, helpcontext(0x0007d409)]
        HRESULT MediaControlsVisible([out, retval] MsoTriState* MediaControlsVisible);
        [id(0x000007f2), propget, helpcontext(0x0007d40a)]
        HRESULT MediaControlsLeft([out, retval] single* MediaControlsLeft);
        [id(0x000007f3), propget, helpcontext(0x0007d40b)]
        HRESULT MediaControlsTop([out, retval] single* MediaControlsTop);
        [id(0x000007f4), propget, helpcontext(0x0007d40c)]
        HRESULT MediaControlsWidth([out, retval] single* MediaControlsWidth);
        [id(0x000007f5), propget, helpcontext(0x0007d40d)]
        HRESULT MediaControlsHeight([out, retval] single* MediaControlsHeight);
        [id(0x000007f6), propget, helpcontext(0x0007d40e)]
        HRESULT LaserPointerEnabled([out, retval] VARIANT_BOOL* LaserPointerEnabled);
        [id(0x000007f6), propput, helpcontext(0x0007d40e)]
        HRESULT LaserPointerEnabled([in] VARIANT_BOOL LaserPointerEnabled);
    };

    [
      odl,
      uuid(9149345A-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007d7d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideShowSettings : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007d7d1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007d7d2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007d7d3)]
        HRESULT PointerColor([out, retval] ColorFormat** PointerColor);
        [id(0x000007d4), propget, helpcontext(0x0007d7d4)]
        HRESULT NamedSlideShows([out, retval] NamedSlideShows** NamedSlideShows);
        [id(0x000007d5), propget, helpcontext(0x0007d7d5)]
        HRESULT StartingSlide([out, retval] int* StartingSlide);
        [id(0x000007d5), propput, helpcontext(0x0007d7d5)]
        HRESULT StartingSlide([in] int StartingSlide);
        [id(0x000007d6), propget, helpcontext(0x0007d7d6)]
        HRESULT EndingSlide([out, retval] int* EndingSlide);
        [id(0x000007d6), propput, helpcontext(0x0007d7d6)]
        HRESULT EndingSlide([in] int EndingSlide);
        [id(0x000007d7), propget, helpcontext(0x0007d7d7)]
        HRESULT AdvanceMode([out, retval] PpSlideShowAdvanceMode* AdvanceMode);
        [id(0x000007d7), propput, helpcontext(0x0007d7d7)]
        HRESULT AdvanceMode([in] PpSlideShowAdvanceMode AdvanceMode);
        [id(0x000007d8), helpcontext(0x0007d7d8)]
        HRESULT Run([out, retval] SlideShowWindow** Run);
        [id(0x000007d9), propget, helpcontext(0x0007d7d9)]
        HRESULT LoopUntilStopped([out, retval] MsoTriState* LoopUntilStopped);
        [id(0x000007d9), propput, helpcontext(0x0007d7d9)]
        HRESULT LoopUntilStopped([in] MsoTriState LoopUntilStopped);
        [id(0x000007da), propget, helpcontext(0x0007d7da)]
        HRESULT ShowType([out, retval] PpSlideShowType* ShowType);
        [id(0x000007da), propput, helpcontext(0x0007d7da)]
        HRESULT ShowType([in] PpSlideShowType ShowType);
        [id(0x000007db), propget, helpcontext(0x0007d7db)]
        HRESULT ShowWithNarration([out, retval] MsoTriState* ShowWithNarration);
        [id(0x000007db), propput, helpcontext(0x0007d7db)]
        HRESULT ShowWithNarration([in] MsoTriState ShowWithNarration);
        [id(0x000007dc), propget, helpcontext(0x0007d7dc)]
        HRESULT ShowWithAnimation([out, retval] MsoTriState* ShowWithAnimation);
        [id(0x000007dc), propput, helpcontext(0x0007d7dc)]
        HRESULT ShowWithAnimation([in] MsoTriState ShowWithAnimation);
        [id(0x000007dd), propget, helpcontext(0x0007d7dd)]
        HRESULT SlideShowName([out, retval] BSTR* SlideShowName);
        [id(0x000007dd), propput, helpcontext(0x0007d7dd)]
        HRESULT SlideShowName([in] BSTR SlideShowName);
        [id(0x000007de), propget, helpcontext(0x0007d7de)]
        HRESULT RangeType([out, retval] PpSlideShowRangeType* RangeType);
        [id(0x000007de), propput, helpcontext(0x0007d7de)]
        HRESULT RangeType([in] PpSlideShowRangeType RangeType);
        [id(0x000007df), propget, helpcontext(0x0007d7df)]
        HRESULT ShowScrollbar([out, retval] MsoTriState* ShowScrollbar);
        [id(0x000007df), propput, helpcontext(0x0007d7df)]
        HRESULT ShowScrollbar([in] MsoTriState ShowScrollbar);
        [id(0x000007e0), propget, helpcontext(0x0007d7e0)]
        HRESULT ShowPresenterView([out, retval] MsoTriState* ShowPresenterView);
        [id(0x000007e0), propput, helpcontext(0x0007d7e0)]
        HRESULT ShowPresenterView([in] MsoTriState ShowPresenterView);
        [id(0x000007e1), propget, helpcontext(0x0007d7e1)]
        HRESULT ShowMediaControls([out, retval] MsoTriState* ShowMediaControls);
        [id(0x000007e1), propput, helpcontext(0x0007d7e1)]
        HRESULT ShowMediaControls([in] MsoTriState ShowMediaControls);
    };

    [
      odl,
      uuid(9149345B-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007dbb8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface NamedSlideShows : Collection {
        [id(0x000007d1), propget, helpcontext(0x0007dbb9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007dbba)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0007dbbb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] NamedSlideShow** Item);
        [id(0x000007d3), helpcontext(0x0007dbbc)]
        HRESULT Add(
                        [in] BSTR Name,
                        [in] VARIANT safeArrayOfSlideIDs,
                        [out, retval] NamedSlideShow** Add);
    };

    [
      odl,
      uuid(9149345C-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007dfa0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface NamedSlideShow : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007dfa1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007dfa2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007dfa3)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d4), helpcontext(0x0007dfa4)]
        HRESULT Delete();
        [id(0x000007d5), propget, helpcontext(0x0007dfa5)]
        HRESULT SlideIDs([out, retval] VARIANT* SlideIDs);
        [id(0x000007d6), propget, helpcontext(0x0007dfa6)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(9149345D-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007e388),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PrintOptions : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007e389)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007e38a)]
        HRESULT PrintColorType([out, retval] PpPrintColorType* PrintColorType);
        [id(0x000007d2), propput, helpcontext(0x0007e38a)]
        HRESULT PrintColorType([in] PpPrintColorType PrintColorType);
        [id(0x000007d3), propget, helpcontext(0x0007e38b)]
        HRESULT Collate([out, retval] MsoTriState* Collate);
        [id(0x000007d3), propput, helpcontext(0x0007e38b)]
        HRESULT Collate([in] MsoTriState Collate);
        [id(0x000007d4), propget, helpcontext(0x0007e38c)]
        HRESULT FitToPage([out, retval] MsoTriState* FitToPage);
        [id(0x000007d4), propput, helpcontext(0x0007e38c)]
        HRESULT FitToPage([in] MsoTriState FitToPage);
        [id(0x000007d5), propget, helpcontext(0x0007e38d)]
        HRESULT FrameSlides([out, retval] MsoTriState* FrameSlides);
        [id(0x000007d5), propput, helpcontext(0x0007e38d)]
        HRESULT FrameSlides([in] MsoTriState FrameSlides);
        [id(0x000007d6), propget, helpcontext(0x0007e38e)]
        HRESULT NumberOfCopies([out, retval] int* NumberOfCopies);
        [id(0x000007d6), propput, helpcontext(0x0007e38e)]
        HRESULT NumberOfCopies([in] int NumberOfCopies);
        [id(0x000007d7), propget, helpcontext(0x0007e38f)]
        HRESULT OutputType([out, retval] PpPrintOutputType* OutputType);
        [id(0x000007d7), propput, helpcontext(0x0007e38f)]
        HRESULT OutputType([in] PpPrintOutputType OutputType);
        [id(0x000007d8), propget, helpcontext(0x0007e390)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d9), propget, helpcontext(0x0007e391)]
        HRESULT PrintHiddenSlides([out, retval] MsoTriState* PrintHiddenSlides);
        [id(0x000007d9), propput, helpcontext(0x0007e391)]
        HRESULT PrintHiddenSlides([in] MsoTriState PrintHiddenSlides);
        [id(0x000007da), propget, helpcontext(0x0007e392)]
        HRESULT PrintInBackground([out, retval] MsoTriState* PrintInBackground);
        [id(0x000007da), propput, helpcontext(0x0007e392)]
        HRESULT PrintInBackground([in] MsoTriState PrintInBackground);
        [id(0x000007db), propget, helpcontext(0x0007e393)]
        HRESULT RangeType([out, retval] PpPrintRangeType* RangeType);
        [id(0x000007db), propput, helpcontext(0x0007e393)]
        HRESULT RangeType([in] PpPrintRangeType RangeType);
        [id(0x000007dc), propget, helpcontext(0x0007e394)]
        HRESULT Ranges([out, retval] PrintRanges** Ranges);
        [id(0x000007dd), propget, helpcontext(0x0007e395)]
        HRESULT PrintFontsAsGraphics([out, retval] MsoTriState* PrintFontsAsGraphics);
        [id(0x000007dd), propput, helpcontext(0x0007e395)]
        HRESULT PrintFontsAsGraphics([in] MsoTriState PrintFontsAsGraphics);
        [id(0x000007de), propget, helpcontext(0x0007e396)]
        HRESULT SlideShowName([out, retval] BSTR* SlideShowName);
        [id(0x000007de), propput, helpcontext(0x0007e396)]
        HRESULT SlideShowName([in] BSTR SlideShowName);
        [id(0x000007df), propget, helpcontext(0x0007e397)]
        HRESULT ActivePrinter([out, retval] BSTR* ActivePrinter);
        [id(0x000007df), propput, helpcontext(0x0007e397)]
        HRESULT ActivePrinter([in] BSTR ActivePrinter);
        [id(0x000007e0), propget, helpcontext(0x0007e398)]
        HRESULT HandoutOrder([out, retval] PpPrintHandoutOrder* HandoutOrder);
        [id(0x000007e0), propput, helpcontext(0x0007e398)]
        HRESULT HandoutOrder([in] PpPrintHandoutOrder HandoutOrder);
        [id(0x000007e1), propget, helpcontext(0x0007e399)]
        HRESULT PrintComments([out, retval] MsoTriState* PrintComments);
        [id(0x000007e1), propput, helpcontext(0x0007e399)]
        HRESULT PrintComments([in] MsoTriState PrintComments);
        [id(0x000007e2), propget, helpcontext(0x0007e39a)]
        HRESULT sectionIndex([out, retval] int* sectionIndex);
        [id(0x000007e2), propput, helpcontext(0x0007e39a)]
        HRESULT sectionIndex([in] int sectionIndex);
        [id(0x000007e3), propget, helpcontext(0x0007e39b)]
        HRESULT HighQuality([out, retval] MsoTriState* HighQuality);
        [id(0x000007e3), propput, helpcontext(0x0007e39b)]
        HRESULT HighQuality([in] MsoTriState HighQuality);
    };

    [
      odl,
      uuid(9149345E-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007e770),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PrintRanges : Collection {
        [id(0x000007d1), helpcontext(0x0007e771)]
        HRESULT Add(
                        [in] int Start,
                        [in] int End,
                        [out, retval] PrintRange** Add);
        [id(0x000007d2), propget, helpcontext(0x0007e772)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d3), helpcontext(0x0007e773)]
        HRESULT ClearAll();
        [id(00000000), helpcontext(0x0007e774),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] PrintRange** Item);
        [id(0x000007d4), propget, helpcontext(0x0007e775)]
        HRESULT Parent([out, retval] IDispatch** Parent);
    };

    [
      odl,
      uuid(9149345F-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007eb58),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PrintRange : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007eb59)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007eb5a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007eb5b)]
        HRESULT Start([out, retval] int* Start);
        [id(0x000007d4), propget, helpcontext(0x0007eb5c)]
        HRESULT End([out, retval] int* End);
        [id(0x000007d5), helpcontext(0x0007eb5d)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(91493460-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007ef40),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AddIns : Collection {
        [id(0x000007d1), propget, helpcontext(0x0007ef41)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007ef42)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0007ef43),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index,
                        [out, retval] AddIn** Item);
        [id(0x000007d3), helpcontext(0x0007ef44)]
        HRESULT Add(
                        [in] BSTR FileName,
                        [out, retval] AddIn** Add);
        [id(0x000007d4), helpcontext(0x0007ef45)]
        HRESULT Remove([in] VARIANT* Index);
    };

    [
      odl,
      uuid(91493461-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007f328),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AddIn : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0007f329)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007f32a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0007f32b)]
        HRESULT FullName([out, retval] BSTR* FullName);
        [id(0x000007d4), propget, helpcontext(0x0007f32c)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d5), propget, helpcontext(0x0007f32d)]
        HRESULT Path([out, retval] BSTR* Path);
        [id(0x000007d6), propget, helpcontext(0x0007f32e)]
        HRESULT Registered([out, retval] MsoTriState* Registered);
        [id(0x000007d6), propput, helpcontext(0x0007f32e)]
        HRESULT Registered([in] MsoTriState Registered);
        [id(0x000007d7), propget, helpcontext(0x0007f32f)]
        HRESULT AutoLoad([out, retval] MsoTriState* AutoLoad);
        [id(0x000007d7), propput, helpcontext(0x0007f32f)]
        HRESULT AutoLoad([in] MsoTriState AutoLoad);
        [id(0x000007d8), propget, helpcontext(0x0007f330)]
        HRESULT Loaded([out, retval] MsoTriState* Loaded);
        [id(0x000007d8), propput, helpcontext(0x0007f330)]
        HRESULT Loaded([in] MsoTriState Loaded);
        [id(0x000007d9), propget, hidden, helpcontext(0x0007f331)]
        HRESULT DisplayAlerts([out, retval] MsoTriState* DisplayAlerts);
        [id(0x000007d9), propput, hidden, helpcontext(0x0007f331)]
        HRESULT DisplayAlerts([in] MsoTriState DisplayAlerts);
        [id(0x000007da), propget, hidden, helpcontext(0x0007f332)]
        HRESULT RegisteredInHKLM([out, retval] MsoTriState* RegisteredInHKLM);
    };

    [
      odl,
      uuid(91493462-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007f710),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Presentations : Collection {
        [id(0x000007d1), propget, helpcontext(0x0007f711)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0007f712)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0007f713),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Presentation** Item);
        [id(0x000007d3), helpcontext(0x0007f714)]
        HRESULT Add(
                        [in, optional, defaultvalue(-1)] MsoTriState WithWindow,
                        [out, retval] Presentation** Add);
        [id(0x000007d4), hidden, helpcontext(0x0007f715)]
        HRESULT OpenOld(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(0)] MsoTriState ReadOnly,
                        [in, optional, defaultvalue(0)] MsoTriState Untitled,
                        [in, optional, defaultvalue(-1)] MsoTriState WithWindow,
                        [out, retval] Presentation** OpenOld);
        [id(0x000007d5), helpcontext(0x0007f716)]
        HRESULT Open(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(0)] MsoTriState ReadOnly,
                        [in, optional, defaultvalue(0)] MsoTriState Untitled,
                        [in, optional, defaultvalue(-1)] MsoTriState WithWindow,
                        [out, retval] Presentation** Open);
        [id(0x000007d6), helpcontext(0x0007f717)]
        HRESULT CheckOut([in] BSTR FileName);
        [id(0x000007d7), helpcontext(0x0007f718)]
        HRESULT CanCheckOut(
                        [in] BSTR FileName,
                        [out, retval] VARIANT_BOOL* CanCheckOut);
        [id(0x000007d8), helpcontext(0x0007f719)]
        HRESULT Open2007(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(0)] MsoTriState ReadOnly,
                        [in, optional, defaultvalue(0)] MsoTriState Untitled,
                        [in, optional, defaultvalue(-1)] MsoTriState WithWindow,
                        [in, optional, defaultvalue(0)] MsoTriState OpenAndRepair,
                        [out, retval] Presentation** Open2007);
    };

    [
      odl,
      uuid(91493463-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007faf8),
      hidden
    ]
    interface PresEvents : IUnknown {
    };

    [
      uuid(91493444-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0007fee0),
      noncreatable
    ]
    coclass Presentation {
        [default] interface _Presentation;
        [default, source] interface PresEvents;
    };

    [
      odl,
      uuid(91493464-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000802c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Hyperlinks : Collection {
        [id(0x000007d1), propget, helpcontext(0x000802c9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000802ca)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000802cb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Hyperlink** Item);
    };

    [
      odl,
      uuid(91493465-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000806b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Hyperlink : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000806b1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000806b2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000806b3)]
        HRESULT Type([out, retval] MsoHyperlinkType* Type);
        [id(0x000007d4), propget, helpcontext(0x000806b4)]
        HRESULT Address([out, retval] BSTR* Address);
        [id(0x000007d4), propput, helpcontext(0x000806b4)]
        HRESULT Address([in] BSTR Address);
        [id(0x000007d5), propget, helpcontext(0x000806b5)]
        HRESULT SubAddress([out, retval] BSTR* SubAddress);
        [id(0x000007d5), propput, helpcontext(0x000806b5)]
        HRESULT SubAddress([in] BSTR SubAddress);
        [id(0x000007d6), helpcontext(0x000806b6)]
        HRESULT AddToFavorites();
        [id(0x000007d7), propget, helpcontext(0x000806b7)]
        HRESULT EmailSubject([out, retval] BSTR* EmailSubject);
        [id(0x000007d7), propput, helpcontext(0x000806b7)]
        HRESULT EmailSubject([in] BSTR EmailSubject);
        [id(0x000007d8), propget, helpcontext(0x000806b8)]
        HRESULT ScreenTip([out, retval] BSTR* ScreenTip);
        [id(0x000007d8), propput, helpcontext(0x000806b8)]
        HRESULT ScreenTip([in] BSTR ScreenTip);
        [id(0x000007d9), propget, helpcontext(0x000806b9)]
        HRESULT TextToDisplay([out, retval] BSTR* TextToDisplay);
        [id(0x000007d9), propput, helpcontext(0x000806b9)]
        HRESULT TextToDisplay([in] BSTR TextToDisplay);
        [id(0x000007da), propget, helpcontext(0x000806ba)]
        HRESULT ShowAndReturn([out, retval] MsoTriState* ShowAndReturn);
        [id(0x000007da), propput, helpcontext(0x000806ba)]
        HRESULT ShowAndReturn([in] MsoTriState ShowAndReturn);
        [id(0x000007db), helpcontext(0x000806bb)]
        HRESULT Follow();
        [id(0x000007dc), helpcontext(0x000806bc)]
        HRESULT CreateNewDocument(
                        [in] BSTR FileName,
                        [in] MsoTriState EditNow,
                        [in] MsoTriState Overwrite);
        [id(0x000007dd), helpcontext(0x000806bd)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(91493466-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00080a98),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageSetup : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00080a99)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00080a9a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00080a9b)]
        HRESULT FirstSlideNumber([out, retval] int* FirstSlideNumber);
        [id(0x000007d3), propput, helpcontext(0x00080a9b)]
        HRESULT FirstSlideNumber([in] int FirstSlideNumber);
        [id(0x000007d4), propget, helpcontext(0x00080a9c)]
        HRESULT SlideHeight([out, retval] single* SlideHeight);
        [id(0x000007d4), propput, helpcontext(0x00080a9c)]
        HRESULT SlideHeight([in] single SlideHeight);
        [id(0x000007d5), propget, helpcontext(0x00080a9d)]
        HRESULT SlideWidth([out, retval] single* SlideWidth);
        [id(0x000007d5), propput, helpcontext(0x00080a9d)]
        HRESULT SlideWidth([in] single SlideWidth);
        [id(0x000007d6), propget, helpcontext(0x00080a9e)]
        HRESULT SlideSize([out, retval] PpSlideSizeType* SlideSize);
        [id(0x000007d6), propput, helpcontext(0x00080a9e)]
        HRESULT SlideSize([in] PpSlideSizeType SlideSize);
        [id(0x000007d7), propget, helpcontext(0x00080a9f)]
        HRESULT NotesOrientation([out, retval] MsoOrientation* NotesOrientation);
        [id(0x000007d7), propput, helpcontext(0x00080a9f)]
        HRESULT NotesOrientation([in] MsoOrientation NotesOrientation);
        [id(0x000007d8), propget, helpcontext(0x00080aa0)]
        HRESULT SlideOrientation([out, retval] MsoOrientation* SlideOrientation);
        [id(0x000007d8), propput, helpcontext(0x00080aa0)]
        HRESULT SlideOrientation([in] MsoOrientation SlideOrientation);
    };

    [
      odl,
      uuid(91493467-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00080e80),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Fonts : Collection {
        [id(0x000007d1), propget, helpcontext(0x00080e81)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00080e82)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x00080e83),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Font** Item);
        [id(0x000007d3), helpcontext(0x00080e84)]
        HRESULT Replace(
                        [in] BSTR Original,
                        [in] BSTR Replacement);
    };

    [
      odl,
      uuid(91493468-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00081268),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ExtraColors : Collection {
        [id(0x000007d1), propget, helpcontext(0x00081269)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008126a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0008126b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] MsoRGBType* Item);
        [id(0x000007d3), helpcontext(0x0008126c)]
        HRESULT Add([in] MsoRGBType Type);
        [id(0x000007d4), helpcontext(0x0008126d)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(91493469-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00081650),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Slides : Collection {
        [id(0x000007d1), propget, helpcontext(0x00081651)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00081652)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x00081653),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Slide** Item);
        [id(0x000007d3), helpcontext(0x00081654)]
        HRESULT FindBySlideID(
                        [in] long SlideID,
                        [out, retval] Slide** FindBySlideID);
        [id(0x000007d4), hidden, helpcontext(0x00081655)]
        HRESULT Add(
                        [in] int Index,
                        [in] PpSlideLayout Layout,
                        [out, retval] Slide** Add);
        [id(0x000007d5), helpcontext(0x00081656)]
        HRESULT InsertFromFile(
                        [in] BSTR FileName,
                        [in] int Index,
                        [in, optional, defaultvalue(1)] int SlideStart,
                        [in, optional, defaultvalue(-1)] int SlideEnd,
                        [out, retval] int* FromFile);
        [id(0x000007d6), helpcontext(0x00081657)]
        HRESULT Range(
                        [in, optional] VARIANT Index,
                        [out, retval] SlideRange** Range);
        [id(0x000007d7), helpcontext(0x00081658)]
        HRESULT Paste(
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] SlideRange** Paste);
        [id(0x000007d8), helpcontext(0x00081659)]
        HRESULT AddSlide(
                        [in] int Index,
                        [in] CustomLayout* pCustomLayout,
                        [out, retval] Slide** Slide);
    };

    [
      odl,
      uuid(9149346A-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00081a38),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Slide : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00081a39)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00081a3a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00081a3b)]
        HRESULT Shapes([out, retval] Shapes** Shapes);
        [id(0x000007d4), propget, helpcontext(0x00081a3c)]
        HRESULT HeadersFooters([out, retval] HeadersFooters** HeadersFooters);
        [id(0x000007d5), propget, helpcontext(0x00081a3d)]
        HRESULT SlideShowTransition([out, retval] SlideShowTransition** SlideShowTransition);
        [id(0x000007d6), propget, helpcontext(0x00081a3e)]
        HRESULT ColorScheme([out, retval] ColorScheme** ColorScheme);
        [id(0x000007d6), propput, helpcontext(0x00081a3e)]
        HRESULT ColorScheme([in] ColorScheme* ColorScheme);
        [id(0x000007d7), propget, helpcontext(0x00081a3f)]
        HRESULT Background([out, retval] ShapeRange** Background);
        [id(0x000007d8), propget, helpcontext(0x00081a40)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d8), propput, helpcontext(0x00081a40)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d9), propget, helpcontext(0x00081a41)]
        HRESULT SlideID([out, retval] long* SlideID);
        [id(0x000007da), propget, helpcontext(0x00081a42)]
        HRESULT PrintSteps([out, retval] int* PrintSteps);
        [id(0x000007db), helpcontext(0x00081a43)]
        HRESULT Select();
        [id(0x000007dc), helpcontext(0x00081a44)]
        HRESULT Cut();
        [id(0x000007dd), helpcontext(0x00081a45)]
        HRESULT Copy();
        [id(0x000007de), propget, helpcontext(0x00081a46)]
        HRESULT Layout([out, retval] PpSlideLayout* Layout);
        [id(0x000007de), propput, helpcontext(0x00081a46)]
        HRESULT Layout([in] PpSlideLayout Layout);
        [id(0x000007df), helpcontext(0x00081a47)]
        HRESULT Duplicate([out, retval] SlideRange** Duplicate);
        [id(0x000007e0), helpcontext(0x00081a48)]
        HRESULT Delete();
        [id(0x000007e1), propget, helpcontext(0x00081a49)]
        HRESULT Tags([out, retval] Tags** Tags);
        [id(0x000007e2), propget, helpcontext(0x00081a4a)]
        HRESULT SlideIndex([out, retval] int* SlideIndex);
        [id(0x000007e3), propget, helpcontext(0x00081a4b)]
        HRESULT SlideNumber([out, retval] int* SlideNumber);
        [id(0x000007e4), propget, helpcontext(0x00081a4c)]
        HRESULT DisplayMasterShapes([out, retval] MsoTriState* DisplayMasterShapes);
        [id(0x000007e4), propput, helpcontext(0x00081a4c)]
        HRESULT DisplayMasterShapes([in] MsoTriState DisplayMasterShapes);
        [id(0x000007e5), propget, helpcontext(0x00081a4d)]
        HRESULT FollowMasterBackground([out, retval] MsoTriState* FollowMasterBackground);
        [id(0x000007e5), propput, helpcontext(0x00081a4d)]
        HRESULT FollowMasterBackground([in] MsoTriState FollowMasterBackground);
        [id(0x000007e6), propget, helpcontext(0x00081a4e)]
        HRESULT NotesPage([out, retval] SlideRange** NotesPage);
        [id(0x000007e7), propget, helpcontext(0x00081a4f)]
        HRESULT Master([out, retval] _Master** Master);
        [id(0x000007e8), propget, helpcontext(0x00081a50)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** Hyperlinks);
        [id(0x000007e9), helpcontext(0x00081a51)]
        HRESULT Export(
                        [in] BSTR FileName,
                        [in] BSTR FilterName,
                        [in, optional, defaultvalue(0)] int ScaleWidth,
                        [in, optional, defaultvalue(0)] int ScaleHeight);
        [id(0x000007ea), propget, hidden, helpcontext(0x00081a52)]
        HRESULT Scripts([out, retval] Scripts** Scripts);
        [id(0x000007ec), propget, helpcontext(0x00081a54)]
        HRESULT Comments([out, retval] Comments** Comments);
        [id(0x000007ed), propget, helpcontext(0x00081a55)]
        HRESULT Design([out, retval] Design** Design);
        [id(0x000007ed), propput, helpcontext(0x00081a55)]
        HRESULT Design([in] Design* Design);
        [id(0x000007ee), helpcontext(0x00081a56)]
        HRESULT MoveTo([in] int toPos);
        [id(0x000007ef), propget, helpcontext(0x00081a57)]
        HRESULT TimeLine([out, retval] TimeLine** TimeLine);
        [id(0x000007f0), helpcontext(0x00081a58)]
        HRESULT ApplyTemplate([in] BSTR FileName);
        [id(0x000007f1), propget, hidden, helpcontext(0x00081a59)]
        HRESULT SectionNumber([out, retval] int* SectionNumber);
        [id(0x000007f2), propget, helpcontext(0x00081a5a)]
        HRESULT CustomLayout([out, retval] CustomLayout** CustomLayout);
        [id(0x000007f2), propput, helpcontext(0x00081a5a)]
        HRESULT CustomLayout([in] CustomLayout* CustomLayout);
        [id(0x000007f3), helpcontext(0x00081a5b)]
        HRESULT ApplyTheme([in] BSTR themeName);
        [id(0x000007f4), propget, helpcontext(0x00081a5c)]
        HRESULT ThemeColorScheme([out, retval] ThemeColorScheme** ThemeColorScheme);
        [id(0x000007f5), helpcontext(0x00081a5d)]
        HRESULT ApplyThemeColorScheme([in] BSTR themeColorSchemeName);
        [id(0x000007f6), propget, helpcontext(0x00081a5e)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x000007f6), propput, helpcontext(0x00081a5e)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x000007f7), propget, helpcontext(0x00081a5f)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x000007f8), helpcontext(0x00081a60)]
        HRESULT PublishSlides(
                        [in] BSTR SlideLibraryUrl,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Overwrite,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseSlideOrder);
        [id(0x000007f9), helpcontext(0x00081a61)]
        HRESULT MoveToSectionStart([in] int toSection);
        [id(0x000007fa), propget, helpcontext(0x00081a62)]
        HRESULT sectionIndex([out, retval] int* sectionIndex);
        [id(0x000007fb), propget, helpcontext(0x00081a63)]
        HRESULT HasNotesPage([out, retval] MsoTriState* HasNotesPage);
        [id(0x000007fc), helpcontext(0x00081a64)]
        HRESULT ApplyTemplate2(
                        [in] BSTR FileName,
                        [in] BSTR VariantGUID);
    };

    [
      odl,
      uuid(9149346B-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00081e20),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideRange : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00081e21)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00081e22)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00081e23)]
        HRESULT Shapes([out, retval] Shapes** Shapes);
        [id(0x000007d4), propget, helpcontext(0x00081e24)]
        HRESULT HeadersFooters([out, retval] HeadersFooters** HeadersFooters);
        [id(0x000007d5), propget, helpcontext(0x00081e25)]
        HRESULT SlideShowTransition([out, retval] SlideShowTransition** SlideShowTransition);
        [id(0x000007d6), propget, helpcontext(0x00081e26)]
        HRESULT ColorScheme([out, retval] ColorScheme** ColorScheme);
        [id(0x000007d6), propput, helpcontext(0x00081e26)]
        HRESULT ColorScheme([in] ColorScheme* ColorScheme);
        [id(0x000007d7), propget, helpcontext(0x00081e27)]
        HRESULT Background([out, retval] ShapeRange** Background);
        [id(0x000007d8), propget, helpcontext(0x00081e28)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d8), propput, helpcontext(0x00081e28)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d9), propget, helpcontext(0x00081e29)]
        HRESULT SlideID([out, retval] long* SlideID);
        [id(0x000007da), propget, helpcontext(0x00081e2a)]
        HRESULT PrintSteps([out, retval] int* PrintSteps);
        [id(0x000007db), helpcontext(0x00081e2b)]
        HRESULT Select();
        [id(0x000007dc), helpcontext(0x00081e2c)]
        HRESULT Cut();
        [id(0x000007dd), helpcontext(0x00081e2d)]
        HRESULT Copy();
        [id(0x000007de), propget, helpcontext(0x00081e2e)]
        HRESULT Layout([out, retval] PpSlideLayout* Layout);
        [id(0x000007de), propput, helpcontext(0x00081e2e)]
        HRESULT Layout([in] PpSlideLayout Layout);
        [id(0x000007df), helpcontext(0x00081e2f)]
        HRESULT Duplicate([out, retval] SlideRange** Duplicate);
        [id(0x000007e0), helpcontext(0x00081e30)]
        HRESULT Delete();
        [id(0x000007e1), propget, helpcontext(0x00081e31)]
        HRESULT Tags([out, retval] Tags** Tags);
        [id(0x000007e2), propget, helpcontext(0x00081e32)]
        HRESULT SlideIndex([out, retval] int* SlideIndex);
        [id(0x000007e3), propget, helpcontext(0x00081e33)]
        HRESULT SlideNumber([out, retval] int* SlideNumber);
        [id(0x000007e4), propget, helpcontext(0x00081e34)]
        HRESULT DisplayMasterShapes([out, retval] MsoTriState* DisplayMasterShapes);
        [id(0x000007e4), propput, helpcontext(0x00081e34)]
        HRESULT DisplayMasterShapes([in] MsoTriState DisplayMasterShapes);
        [id(0x000007e5), propget, helpcontext(0x00081e35)]
        HRESULT FollowMasterBackground([out, retval] MsoTriState* FollowMasterBackground);
        [id(0x000007e5), propput, helpcontext(0x00081e35)]
        HRESULT FollowMasterBackground([in] MsoTriState FollowMasterBackground);
        [id(0x000007e6), propget, helpcontext(0x00081e36)]
        HRESULT NotesPage([out, retval] SlideRange** NotesPage);
        [id(0x000007e7), propget, helpcontext(0x00081e37)]
        HRESULT Master([out, retval] _Master** Master);
        [id(0x000007e8), propget, helpcontext(0x00081e38)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** Hyperlinks);
        [id(0x000007e9), helpcontext(0x00081e39)]
        HRESULT Export(
                        [in] BSTR FileName,
                        [in] BSTR FilterName,
                        [in, optional, defaultvalue(0)] int ScaleWidth,
                        [in, optional, defaultvalue(0)] int ScaleHeight);
        [id(00000000), helpcontext(0x00081e3a),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Slide** Item);
        [id(0xfffffffc), propget, restricted, helpcontext(0x00081e3b)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a), restricted, helpcontext(0x00081e3c)]
        HRESULT _Index(
                        [in] int Index,
                        [out, retval] VARIANT* _Index);
        [id(0x0000000b), propget, helpcontext(0x00081e3d)]
        HRESULT Count([out, retval] long* Count);
        [id(0x000007ea), propget, hidden, helpcontext(0x00081e3e)]
        HRESULT Scripts([out, retval] Scripts** Scripts);
        [id(0x000007ec), propget, helpcontext(0x00081e40)]
        HRESULT Comments([out, retval] Comments** Comments);
        [id(0x000007ed), propget, helpcontext(0x00081e41)]
        HRESULT Design([out, retval] Design** Design);
        [id(0x000007ed), propput, helpcontext(0x00081e41)]
        HRESULT Design([in] Design* Design);
        [id(0x000007ee), helpcontext(0x00081e42)]
        HRESULT MoveTo([in] int toPos);
        [id(0x000007ef), propget, helpcontext(0x00081e43)]
        HRESULT TimeLine([out, retval] TimeLine** TimeLine);
        [id(0x000007f0), helpcontext(0x00081e44)]
        HRESULT ApplyTemplate([in] BSTR FileName);
        [id(0x000007f1), propget, hidden, helpcontext(0x00081e45)]
        HRESULT SectionNumber([out, retval] int* SectionNumber);
        [id(0x000007f2), propget, helpcontext(0x00081e46)]
        HRESULT CustomLayout([out, retval] CustomLayout** CustomLayout);
        [id(0x000007f2), propput, helpcontext(0x00081e46)]
        HRESULT CustomLayout([in] CustomLayout* CustomLayout);
        [id(0x000007f3), helpcontext(0x00081e47)]
        HRESULT ApplyTheme([in] BSTR themeName);
        [id(0x000007f4), propget, helpcontext(0x00081e48)]
        HRESULT ThemeColorScheme([out, retval] ThemeColorScheme** ThemeColorScheme);
        [id(0x000007f5), helpcontext(0x00081e49)]
        HRESULT ApplyThemeColorScheme([in] BSTR themeColorSchemeName);
        [id(0x000007f6), propget, helpcontext(0x00081e4a)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x000007f6), propput, helpcontext(0x00081e4a)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x000007f7), propget, helpcontext(0x00081e4b)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x000007f8), helpcontext(0x00081e4c)]
        HRESULT PublishSlides(
                        [in] BSTR SlideLibraryUrl,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Overwrite,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseSlideOrder);
        [id(0x000007f9), helpcontext(0x00081e4d)]
        HRESULT MoveToSectionStart([in] int toSection);
        [id(0x000007fa), propget, helpcontext(0x00081e4e)]
        HRESULT sectionIndex([out, retval] int* sectionIndex);
        [id(0x000007fb), propget, helpcontext(0x00081e4f)]
        HRESULT HasNotesPage([out, retval] MsoTriState* HasNotesPage);
        [id(0x000007fc), helpcontext(0x00081e50)]
        HRESULT ApplyTemplate2(
                        [in] BSTR FileName,
                        [in] BSTR VariantGUID);
    };

    [
      odl,
      uuid(9149346C-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00082208),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Master : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00082209)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008220a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008220b)]
        HRESULT Shapes([out, retval] Shapes** Shapes);
        [id(0x000007d4), propget, helpcontext(0x0008220c)]
        HRESULT HeadersFooters([out, retval] HeadersFooters** HeadersFooters);
        [id(0x000007d5), propget, helpcontext(0x0008220d)]
        HRESULT ColorScheme([out, retval] ColorScheme** ColorScheme);
        [id(0x000007d5), propput, helpcontext(0x0008220d)]
        HRESULT ColorScheme([in] ColorScheme* ColorScheme);
        [id(0x000007d6), propget, helpcontext(0x0008220e)]
        HRESULT Background([out, retval] ShapeRange** Background);
        [id(0x000007d7), propget, helpcontext(0x0008220f)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d7), propput, helpcontext(0x0008220f)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d8), helpcontext(0x00082210)]
        HRESULT Delete();
        [id(0x000007d9), propget, helpcontext(0x00082211)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007da), propget, helpcontext(0x00082212)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007db), propget, helpcontext(0x00082213)]
        HRESULT TextStyles([out, retval] TextStyles** TextStyles);
        [id(0x000007dc), propget, helpcontext(0x00082214)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** Hyperlinks);
        [id(0x000007dd), propget, hidden, helpcontext(0x00082215)]
        HRESULT Scripts([out, retval] Scripts** Scripts);
        [id(0x000007de), propget, helpcontext(0x00082216)]
        HRESULT Design([out, retval] Design** Design);
        [id(0x000007df), propget, helpcontext(0x00082217)]
        HRESULT TimeLine([out, retval] TimeLine** TimeLine);
        [id(0x000007e0), propget, helpcontext(0x00082218)]
        HRESULT SlideShowTransition([out, retval] SlideShowTransition** SlideShowTransition);
        [id(0x000007e1), propget, helpcontext(0x00082219)]
        HRESULT CustomLayouts([out, retval] CustomLayouts** CustomLayouts);
        [id(0x000007e2), propget, helpcontext(0x0008221a)]
        HRESULT Theme([out, retval] OfficeTheme** Theme);
        [id(0x000007e3), helpcontext(0x0008221b)]
        HRESULT ApplyTheme([in] BSTR themeName);
        [id(0x000007e4), propget, helpcontext(0x0008221c)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x000007e4), propput, helpcontext(0x0008221c)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x000007e5), propget, helpcontext(0x0008221d)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x000007e6), propget, helpcontext(0x0008221e)]
        HRESULT Guides([out, retval] Guides** Guides);
    };

    [
      odl,
      uuid(9149346D-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000825f0),
      hidden
    ]
    interface SldEvents : IUnknown {
    };

    [
      uuid(91493445-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000829d8),
      noncreatable
    ]
    coclass Slide {
        [default] interface _Slide;
        [default, source] interface SldEvents;
    };

    [
      odl,
      uuid(9149346E-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00082dc0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorSchemes : Collection {
        [id(0x000007d1), propget, helpcontext(0x00082dc1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00082dc2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x00082dc3),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] ColorScheme** Item);
        [id(0x000007d3), helpcontext(0x00082dc4)]
        HRESULT Add(
                        [in, optional, defaultvalue(0)] ColorScheme* Scheme,
                        [out, retval] ColorScheme** Add);
    };

    [
      odl,
      uuid(9149346F-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000831a8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorScheme : Collection {
        [id(0x000007d1), propget, helpcontext(0x000831a9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000831aa)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000831ab),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Colors(
                        [in] PpColorSchemeIndex SchemeColor,
                        [out, retval] RGBColor** Colors);
        [id(0x000007d3), helpcontext(0x000831ac)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(91493470-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00083590),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RGBColor : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00083591)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00083592)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), propget, helpcontext(0x00083593)]
        HRESULT RGB([out, retval] MsoRGBType* RGB);
        [id(00000000), propput, helpcontext(0x00083593)]
        HRESULT RGB([in] MsoRGBType RGB);
    };

    [
      odl,
      uuid(91493471-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00083978),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideShowTransition : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00083979)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008397a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008397b)]
        HRESULT AdvanceOnClick([out, retval] MsoTriState* AdvanceOnClick);
        [id(0x000007d3), propput, helpcontext(0x0008397b)]
        HRESULT AdvanceOnClick([in] MsoTriState AdvanceOnClick);
        [id(0x000007d4), propget, helpcontext(0x0008397c)]
        HRESULT AdvanceOnTime([out, retval] MsoTriState* AdvanceOnTime);
        [id(0x000007d4), propput, helpcontext(0x0008397c)]
        HRESULT AdvanceOnTime([in] MsoTriState AdvanceOnTime);
        [id(0x000007d5), propget, helpcontext(0x0008397d)]
        HRESULT AdvanceTime([out, retval] single* AdvanceTime);
        [id(0x000007d5), propput, helpcontext(0x0008397d)]
        HRESULT AdvanceTime([in] single AdvanceTime);
        [id(0x000007d6), propget, helpcontext(0x0008397e)]
        HRESULT EntryEffect([out, retval] PpEntryEffect* EntryEffect);
        [id(0x000007d6), propput, helpcontext(0x0008397e)]
        HRESULT EntryEffect([in] PpEntryEffect EntryEffect);
        [id(0x000007d7), propget, helpcontext(0x0008397f)]
        HRESULT Hidden([out, retval] MsoTriState* Hidden);
        [id(0x000007d7), propput, helpcontext(0x0008397f)]
        HRESULT Hidden([in] MsoTriState Hidden);
        [id(0x000007d8), propget, helpcontext(0x00083980)]
        HRESULT LoopSoundUntilNext([out, retval] MsoTriState* LoopSoundUntilNext);
        [id(0x000007d8), propput, helpcontext(0x00083980)]
        HRESULT LoopSoundUntilNext([in] MsoTriState LoopSoundUntilNext);
        [id(0x000007d9), propget, helpcontext(0x00083981)]
        HRESULT SoundEffect([out, retval] SoundEffect** SoundEffect);
        [id(0x000007da), propget, helpcontext(0x00083982)]
        HRESULT Speed([out, retval] PpTransitionSpeed* Speed);
        [id(0x000007da), propput, helpcontext(0x00083982)]
        HRESULT Speed([in] PpTransitionSpeed Speed);
        [id(0x000007db), propget, helpcontext(0x00083983)]
        HRESULT Duration([out, retval] single* Duration);
        [id(0x000007db), propput, helpcontext(0x00083983)]
        HRESULT Duration([in] single Duration);
    };

    [
      odl,
      uuid(91493472-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00083d60),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SoundEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00083d61)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00083d62)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00083d63)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d3), propput, helpcontext(0x00083d63)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d4), propget, helpcontext(0x00083d64)]
        HRESULT Type([out, retval] PpSoundEffectType* Type);
        [id(0x000007d4), propput, helpcontext(0x00083d64)]
        HRESULT Type([in] PpSoundEffectType Type);
        [id(0x000007d5), helpcontext(0x00083d65)]
        HRESULT ImportFromFile([in] BSTR FileName);
        [id(0x000007d6), helpcontext(0x00083d66)]
        HRESULT Play();
    };

    [
      odl,
      uuid(91493473-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00084148),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SoundFormat : IDispatch {
        [id(0x000007d0), helpcontext(0x00084149)]
        HRESULT Play();
        [id(0x000007d1), helpcontext(0x0008414a)]
        HRESULT Import([in] BSTR FileName);
        [id(0x000007d2), helpcontext(0x0008414b)]
        HRESULT Export(
                        [in] BSTR FileName,
                        [out, retval] PpSoundFormatType* Export);
        [id(0x000007d3), propget, helpcontext(0x0008414c)]
        HRESULT Type([out, retval] PpSoundFormatType* Type);
        [id(0x000007d4), propget, helpcontext(0x0008414d)]
        HRESULT SourceFullName([out, retval] BSTR* SourceFullName);
    };

    [
      odl,
      uuid(91493474-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00084530),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadersFooters : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00084531)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00084532)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00084533)]
        HRESULT DateAndTime([out, retval] HeaderFooter** DateAndTime);
        [id(0x000007d4), propget, helpcontext(0x00084534)]
        HRESULT SlideNumber([out, retval] HeaderFooter** SlideNumber);
        [id(0x000007d5), propget, helpcontext(0x00084535)]
        HRESULT Header([out, retval] HeaderFooter** Header);
        [id(0x000007d6), propget, helpcontext(0x00084536)]
        HRESULT Footer([out, retval] HeaderFooter** Footer);
        [id(0x000007d7), propget, helpcontext(0x00084537)]
        HRESULT DisplayOnTitleSlide([out, retval] MsoTriState* DisplayOnTitleSlide);
        [id(0x000007d7), propput, helpcontext(0x00084537)]
        HRESULT DisplayOnTitleSlide([in] MsoTriState DisplayOnTitleSlide);
        [id(0x000007d8), helpcontext(0x00084538)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(91493475-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00084918),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shapes : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00084919)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget, helpcontext(0x0008491a)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), helpcontext(0x0008491b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget, helpcontext(0x0008491c)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a), helpcontext(0x0008491d)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Callout);
        [id(0x0000000b), helpcontext(0x0008491e)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type,
                        [in] single BeginX,
                        [in] single BeginY,
                        [in] single EndX,
                        [in] single EndY,
                        [out, retval] Shape** Connector);
        [id(0x0000000c), helpcontext(0x0008491f)]
        HRESULT AddCurve(
                        [in] VARIANT SafeArrayOfPoints,
                        [out, retval] Shape** Curve);
        [id(0x0000000d), helpcontext(0x00084920)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Label);
        [id(0x0000000e), helpcontext(0x00084921)]
        HRESULT AddLine(
                        [in] single BeginX,
                        [in] single BeginY,
                        [in] single EndX,
                        [in] single EndY,
                        [out, retval] Shape** Line);
        [id(0x0000000f), helpcontext(0x00084922)]
        HRESULT AddPicture(
                        [in] BSTR FileName,
                        [in] MsoTriState LinkToFile,
                        [in] MsoTriState SaveWithDocument,
                        [in] single Left,
                        [in] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** Picture);
        [id(0x00000010), helpcontext(0x00084923)]
        HRESULT AddPolyline(
                        [in] VARIANT SafeArrayOfPoints,
                        [out, retval] Shape** Polyline);
        [id(0x00000011), helpcontext(0x00084924)]
        HRESULT AddShape(
                        [in] MsoAutoShapeType Type,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Shape);
        [id(0x00000012), helpcontext(0x00084925)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect,
                        [in] BSTR Text,
                        [in] BSTR FontName,
                        [in] single FontSize,
                        [in] MsoTriState FontBold,
                        [in] MsoTriState FontItalic,
                        [in] single Left,
                        [in] single Top,
                        [out, retval] Shape** TextEffect);
        [id(0x00000013), helpcontext(0x00084926)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Textbox);
        [id(0x00000014), helpcontext(0x00084927)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType,
                        [in] single X1,
                        [in] single Y1,
                        [out, retval] FreeformBuilder** FreeformBuilder);
        [id(0x00000016), helpcontext(0x00084928)]
        HRESULT SelectAll();
        [id(0x000007d3), helpcontext(0x00084929)]
        HRESULT Range(
                        [in, optional] VARIANT Index,
                        [out, retval] ShapeRange** Range);
        [id(0x000007d4), propget, helpcontext(0x0008492a)]
        HRESULT HasTitle([out, retval] MsoTriState* HasTitle);
        [id(0x000007d5), helpcontext(0x0008492b)]
        HRESULT AddTitle([out, retval] Shape** Title);
        [id(0x000007d6), propget, helpcontext(0x0008492c)]
        HRESULT Title([out, retval] Shape** Title);
        [id(0x000007d7), propget, helpcontext(0x0008492d)]
        HRESULT Placeholders([out, retval] Placeholders** Placeholders);
        [id(0x000007d8), helpcontext(0x0008492e)]
        HRESULT AddOLEObject(
                        [in, optional, defaultvalue(0)] single Left,
                        [in, optional, defaultvalue(0)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [in, optional, defaultvalue("")] BSTR ClassName,
                        [in, optional, defaultvalue("")] BSTR FileName,
                        [in, optional, defaultvalue(0)] MsoTriState DisplayAsIcon,
                        [in, optional, defaultvalue("")] BSTR IconFileName,
                        [in, optional, defaultvalue(0)] int IconIndex,
                        [in, optional, defaultvalue("")] BSTR IconLabel,
                        [in, optional, defaultvalue(0)] MsoTriState Link,
                        [out, retval] Shape** OLEObject);
        [id(0x000007d9), hidden, helpcontext(0x0008492f)]
        HRESULT AddComment(
                        [in, optional, defaultvalue(1.25)] single Left,
                        [in, optional, defaultvalue(1.25)] single Top,
                        [in, optional, defaultvalue(145.25)] single Width,
                        [in, optional, defaultvalue(145.25)] single Height,
                        [out, retval] Shape** Comment);
        [id(0x000007da), helpcontext(0x00084930)]
        HRESULT AddPlaceholder(
                        [in] PpPlaceholderType Type,
                        [in, optional, defaultvalue(-1)] single Left,
                        [in, optional, defaultvalue(-1)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** Placeholder);
        [id(0x000007db), hidden, helpcontext(0x00084931)]
        HRESULT AddMediaObject(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(0)] single Left,
                        [in, optional, defaultvalue(0)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** MediaObject);
        [id(0x000007dc), helpcontext(0x00084932)]
        HRESULT Paste([out, retval] ShapeRange** Paste);
        [id(0x000007dd), helpcontext(0x00084933)]
        HRESULT AddTable(
                        [in] int NumRows,
                        [in] int NumColumns,
                        [in, optional, defaultvalue(-1)] single Left,
                        [in, optional, defaultvalue(-1)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** Table);
        [id(0x000007de), helpcontext(0x00084934)]
        HRESULT PasteSpecial(
                        [in, optional, defaultvalue(0)] PpPasteDataType DataType,
                        [in, optional, defaultvalue(0)] MsoTriState DisplayAsIcon,
                        [in, optional, defaultvalue("")] BSTR IconFileName,
                        [in, optional, defaultvalue(0)] int IconIndex,
                        [in, optional, defaultvalue("")] BSTR IconLabel,
                        [in, optional, defaultvalue(0)] MsoTriState Link,
                        [out, retval] ShapeRange** PasteSpecial);
        [id(0x00000017), hidden, helpcontext(0x00084935)]
        HRESULT AddDiagram(
                        [in] MsoDiagramType Type,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Diagram);
        [id(0x00000019), hidden, helpcontext(0x00084936)]
        HRESULT AddCanvas(
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Shape);
        [id(0x0000001a), hidden, helpcontext(0x00084937)]
        HRESULT AddChart(
                        [in, optional, defaultvalue(-1)] XlChartType Type,
                        [in, optional, defaultvalue(-1)] single Left,
                        [in, optional, defaultvalue(-1)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** Chart);
        [id(0x000007df), helpcontext(0x00084938)]
        HRESULT AddMediaObject2(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(0)] MsoTriState LinkToFile,
                        [in, optional, defaultvalue(-1)] MsoTriState SaveWithDocument,
                        [in, optional, defaultvalue(0)] single Left,
                        [in, optional, defaultvalue(0)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** MediaObject2);
        [id(0x000007e0), helpcontext(0x00084939)]
        HRESULT AddMediaObjectFromEmbedTag(
                        [in] BSTR EmbedTag,
                        [in, optional, defaultvalue(0)] single Left,
                        [in, optional, defaultvalue(0)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** MediaObjectFromEmbedTag);
        [id(0x0000001c), helpcontext(0x0008493a)]
        HRESULT AddSmartArt(
                        [in] SmartArtLayout* Layout,
                        [in, optional, defaultvalue(-1)] single Left,
                        [in, optional, defaultvalue(-1)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** SmartArt);
        [id(0x0000001d), helpcontext(0x0008493c)]
        HRESULT AddChart2(
                        [in, optional, defaultvalue(-1)] int Style,
                        [in, optional, defaultvalue(-1)] XlChartType Type,
                        [in, optional, defaultvalue(-1)] single Left,
                        [in, optional, defaultvalue(-1)] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL NewLayout,
                        [out, retval] Shape** Chart);
        [id(0x0000001e), helpcontext(0x0008493c)]
        HRESULT AddPicture2(
                        [in] BSTR FileName,
                        [in] MsoTriState LinkToFile,
                        [in] MsoTriState SaveWithDocument,
                        [in] single Left,
                        [in] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [in, optional, defaultvalue(-1)] MsoPictureCompress compress,
                        [out, retval] Shape** Picture);
        [id(0x0000001f)]
        HRESULT AddInkShapeFromXML(
                        [in] BSTR InkXML,
                        [in] single Left,
                        [in] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** Shape);
    };

    [
      odl,
      uuid(91493476-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00084d00),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Placeholders : Collection {
        [id(0x000007d1), propget, helpcontext(0x00084d01)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00084d02)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x00084d03),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Shape** Item);
        [id(0x000007d3), helpcontext(0x00084d04)]
        HRESULT FindByName(
                        [in] VARIANT Index,
                        [out, retval] Shape** FindByName);
    };

    [
      odl,
      uuid(91493477-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000850e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PlaceholderFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000850e9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000850ea)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000850eb)]
        HRESULT Type([out, retval] PpPlaceholderType* Type);
        [id(0x000007d4), propget, helpcontext(0x000850ec)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d4), propput, helpcontext(0x000850ec)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d5), propget, helpcontext(0x000850ed)]
        HRESULT ContainedType([out, retval] MsoShapeType* ContainedType);
    };

    [
      odl,
      uuid(91493478-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000854d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FreeformBuilder : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x000854d1)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x000854d2)]
        HRESULT AddNodes(
                        [in] MsoSegmentType SegmentType,
                        [in] MsoEditingType EditingType,
                        [in] single X1,
                        [in] single Y1,
                        [in, optional, defaultvalue(0)] single X2,
                        [in, optional, defaultvalue(0)] single Y2,
                        [in, optional, defaultvalue(0)] single X3,
                        [in, optional, defaultvalue(0)] single Y3);
        [id(0x0000000b), helpcontext(0x000854d3)]
        HRESULT ConvertToShape([out, retval] Shape** Freeform);
    };

    [
      odl,
      uuid(91493479-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000858b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shape : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x000858b9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x000858ba)]
        HRESULT Apply();
        [id(0x0000000b), helpcontext(0x000858bb)]
        HRESULT Delete();
        [id(0x0000000d), helpcontext(0x000858bc)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x0000000e), helpcontext(0x000858bd)]
        HRESULT IncrementLeft([in] single Increment);
        [id(0x0000000f), helpcontext(0x000858be)]
        HRESULT IncrementRotation([in] single Increment);
        [id(0x00000010), helpcontext(0x000858bf)]
        HRESULT IncrementTop([in] single Increment);
        [id(0x00000011), helpcontext(0x000858c0)]
        HRESULT PickUp();
        [id(0x00000012), helpcontext(0x000858c1)]
        HRESULT RerouteConnections();
        [id(0x00000013), helpcontext(0x000858c2)]
        HRESULT ScaleHeight(
                        [in] single Factor,
                        [in] MsoTriState RelativeToOriginalSize,
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000014), helpcontext(0x000858c3)]
        HRESULT ScaleWidth(
                        [in] single Factor,
                        [in] MsoTriState RelativeToOriginalSize,
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000016), helpcontext(0x000858c4)]
        HRESULT SetShapesDefaultProperties();
        [id(0x00000017), helpcontext(0x000858c5)]
        HRESULT Ungroup([out, retval] ShapeRange** Ungroup);
        [id(0x00000018), helpcontext(0x000858c6)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x00000064), propget, helpcontext(0x000858c7)]
        HRESULT Adjustments([out, retval] Adjustments** Adjustments);
        [id(0x00000065), propget, helpcontext(0x000858c8)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* AutoShapeType);
        [id(0x00000065), propput, helpcontext(0x000858c8)]
        HRESULT AutoShapeType([in] MsoAutoShapeType AutoShapeType);
        [id(0x00000066), propget, helpcontext(0x000858c9)]
        HRESULT BlackWhiteMode([out, retval] MsoBlackWhiteMode* BlackWhiteMode);
        [id(0x00000066), propput, helpcontext(0x000858c9)]
        HRESULT BlackWhiteMode([in] MsoBlackWhiteMode BlackWhiteMode);
        [id(0x00000067), propget, helpcontext(0x000858ca)]
        HRESULT Callout([out, retval] CalloutFormat** Callout);
        [id(0x00000068), propget, helpcontext(0x000858cb)]
        HRESULT ConnectionSiteCount([out, retval] int* ConnectionSiteCount);
        [id(0x00000069), propget, helpcontext(0x000858cc)]
        HRESULT Connector([out, retval] MsoTriState* Connector);
        [id(0x0000006a), propget, helpcontext(0x000858cd)]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** ConnectorFormat);
        [id(0x0000006b), propget, helpcontext(0x000858ce)]
        HRESULT Fill([out, retval] FillFormat** Fill);
        [id(0x0000006c), propget, helpcontext(0x000858cf)]
        HRESULT GroupItems([out, retval] GroupShapes** GroupItems);
        [id(0x0000006d), propget, helpcontext(0x000858d0)]
        HRESULT Height([out, retval] single* Height);
        [id(0x0000006d), propput, helpcontext(0x000858d0)]
        HRESULT Height([in] single Height);
        [id(0x0000006e), propget, helpcontext(0x000858d1)]
        HRESULT HorizontalFlip([out, retval] MsoTriState* HorizontalFlip);
        [id(0x0000006f), propget, helpcontext(0x000858d2)]
        HRESULT Left([out, retval] single* Left);
        [id(0x0000006f), propput, helpcontext(0x000858d2)]
        HRESULT Left([in] single Left);
        [id(0x00000070), propget, helpcontext(0x000858d3)]
        HRESULT Line([out, retval] LineFormat** Line);
        [id(0x00000071), propget, helpcontext(0x000858d4)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* LockAspectRatio);
        [id(0x00000071), propput, helpcontext(0x000858d4)]
        HRESULT LockAspectRatio([in] MsoTriState LockAspectRatio);
        [id(0x00000073), propget, helpcontext(0x000858d5)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000073), propput, helpcontext(0x000858d5)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000074), propget, helpcontext(0x000858d6)]
        HRESULT Nodes([out, retval] ShapeNodes** Nodes);
        [id(0x00000075), propget, helpcontext(0x000858d7)]
        HRESULT Rotation([out, retval] single* Rotation);
        [id(0x00000075), propput, helpcontext(0x000858d7)]
        HRESULT Rotation([in] single Rotation);
        [id(0x00000076), propget, helpcontext(0x000858d8)]
        HRESULT PictureFormat([out, retval] PictureFormat** Picture);
        [id(0x00000077), propget, helpcontext(0x000858d9)]
        HRESULT Shadow([out, retval] ShadowFormat** Shadow);
        [id(0x00000078), propget, helpcontext(0x000858da)]
        HRESULT TextEffect([out, retval] TextEffectFormat** TextEffect);
        [id(0x00000079), propget, helpcontext(0x000858db)]
        HRESULT TextFrame([out, retval] TextFrame** TextFrame);
        [id(0x0000007a), propget, helpcontext(0x000858dc)]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x0000007b), propget, helpcontext(0x000858dd)]
        HRESULT Top([out, retval] single* Top);
        [id(0x0000007b), propput, helpcontext(0x000858dd)]
        HRESULT Top([in] single Top);
        [id(0x0000007c), propget, helpcontext(0x000858de)]
        HRESULT Type([out, retval] MsoShapeType* Type);
        [id(0x0000007d), propget, helpcontext(0x000858df)]
        HRESULT VerticalFlip([out, retval] MsoTriState* VerticalFlip);
        [id(0x0000007e), propget, helpcontext(0x000858e0)]
        HRESULT Vertices([out, retval] VARIANT* Vertices);
        [id(0x0000007f), propget, helpcontext(0x000858e1)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000007f), propput, helpcontext(0x000858e1)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000080), propget, helpcontext(0x000858e2)]
        HRESULT Width([out, retval] single* Width);
        [id(0x00000080), propput, helpcontext(0x000858e2)]
        HRESULT Width([in] single Width);
        [id(0x00000081), propget, helpcontext(0x000858e3)]
        HRESULT ZOrderPosition([out, retval] int* ZOrderPosition);
        [id(0x000007d3), propget, helpcontext(0x000858e4)]
        HRESULT OLEFormat([out, retval] OLEFormat** OLEFormat);
        [id(0x000007d4), propget, helpcontext(0x000858e5)]
        HRESULT LinkFormat([out, retval] LinkFormat** LinkFormat);
        [id(0x000007d5), propget, helpcontext(0x000858e6)]
        HRESULT PlaceholderFormat([out, retval] PlaceholderFormat** PlaceholderFormat);
        [id(0x000007d6), propget, helpcontext(0x000858e7)]
        HRESULT AnimationSettings([out, retval] AnimationSettings** AnimationSettings);
        [id(0x000007d7), propget, helpcontext(0x000858e8)]
        HRESULT ActionSettings([out, retval] ActionSettings** ActionSettings);
        [id(0x000007d8), propget, helpcontext(0x000858e9)]
        HRESULT Tags([out, retval] Tags** Tags);
        [id(0x000007d9), helpcontext(0x000858ea)]
        HRESULT Cut();
        [id(0x000007da), helpcontext(0x000858eb)]
        HRESULT Copy();
        [id(0x000007db), helpcontext(0x000858ec)]
        HRESULT Select([in, optional, defaultvalue(-1)] MsoTriState Replace);
        [id(0x000007dc), helpcontext(0x000858ed)]
        HRESULT Duplicate([out, retval] ShapeRange** Duplicate);
        [id(0x000007dd), propget, helpcontext(0x000858ee)]
        HRESULT MediaType([out, retval] PpMediaType* MediaType);
        [id(0x000007de), propget, helpcontext(0x000858ef)]
        HRESULT HasTextFrame([out, retval] MsoTriState* HasTextFrame);
        [id(0x000007df), propget, hidden, helpcontext(0x000858f0)]
        HRESULT SoundFormat([out, retval] SoundFormat** SoundFormat);
        [id(0x00000082), propget, hidden, helpcontext(0x000858f1)]
        HRESULT Script([out, retval] Script** Script);
        [id(0x00000083), propget, helpcontext(0x000858f2)]
        HRESULT AlternativeText([out, retval] BSTR* AlternativeText);
        [id(0x00000083), propput, helpcontext(0x000858f2)]
        HRESULT AlternativeText([in] BSTR AlternativeText);
        [id(0x000007e0), propget, helpcontext(0x000858f3)]
        HRESULT HasTable([out, retval] MsoTriState* HasTable);
        [id(0x000007e1), propget, helpcontext(0x000858f4)]
        HRESULT Table([out, retval] Table** Table);
        [id(0x000007e2), hidden, helpcontext(0x000858f5)]
        HRESULT Export(
                        [in] BSTR PathName,
                        [in] PpShapeFormat Filter,
                        [in, optional, defaultvalue(0)] int ScaleWidth,
                        [in, optional, defaultvalue(0)] int ScaleHeight,
                        [in, optional, defaultvalue(1)] PpExportMode ExportMode);
        [id(0x00000084), propget, hidden, helpcontext(0x000858f6)]
        HRESULT HasDiagram([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000085), propget, hidden, helpcontext(0x000858f7)]
        HRESULT Diagram([out, retval] Diagram** Diagram);
        [id(0x00000086), propget, hidden, helpcontext(0x000858f8)]
        HRESULT HasDiagramNode([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000087), propget, hidden, helpcontext(0x000858f9)]
        HRESULT DiagramNode([out, retval] DiagramNode** DiagramNode);
        [id(0x00000088), propget, helpcontext(0x000858fa)]
        HRESULT Child([out, retval] MsoTriState* Child);
        [id(0x00000089), propget, helpcontext(0x000858fb)]
        HRESULT ParentGroup([out, retval] Shape** Parent);
        [id(0x0000008a), propget, hidden, helpcontext(0x000858fc)]
        HRESULT CanvasItems([out, retval] CanvasShapes** CanvasShapes);
        [id(0x0000008b), propget, helpcontext(0x000858fd)]
        HRESULT Id([out, retval] int* pid);
        [id(0x0000008c), hidden, helpcontext(0x000858fe)]
        HRESULT CanvasCropLeft([in] single Increment);
        [id(0x0000008d), hidden, helpcontext(0x000858ff)]
        HRESULT CanvasCropTop([in] single Increment);
        [id(0x0000008e), hidden, helpcontext(0x00085900)]
        HRESULT CanvasCropRight([in] single Increment);
        [id(0x0000008f), hidden, helpcontext(0x00085901)]
        HRESULT CanvasCropBottom([in] single Increment);
        [id(0x00000090), propput, hidden, helpcontext(0x00085902)]
        HRESULT RTF([in] BSTR rhs);
        [id(0x000007e4), propget, helpcontext(0x00085904)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x00000091), propget, helpcontext(0x00085905)]
        HRESULT TextFrame2([out, retval] TextFrame2** Frame);
        [id(0x00000094), propget, helpcontext(0x00085906)]
        HRESULT HasChart([out, retval] MsoTriState* pHasChart);
        [id(0x00000096), propget, helpcontext(0x00085907)]
        HRESULT ShapeStyle([out, retval] MsoShapeStyleIndex* ShapeStyle);
        [id(0x00000096), propput, helpcontext(0x00085907)]
        HRESULT ShapeStyle([in] MsoShapeStyleIndex ShapeStyle);
        [id(0x00000097), propget, helpcontext(0x00085908)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x00000097), propput, helpcontext(0x00085908)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x00000098), propget, helpcontext(0x00085909)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** SoftEdge);
        [id(0x00000099), propget, helpcontext(0x0008590a)]
        HRESULT Glow([out, retval] GlowFormat** Glow);
        [id(0x0000009a), propget, helpcontext(0x0008590b)]
        HRESULT Reflection([out, retval] ReflectionFormat** Reflection);
        [id(0x000007e5), propget, helpcontext(0x0008590c)]
        HRESULT Chart([out, retval] Chart** Chart);
        [id(0x0000009b), propget, helpcontext(0x0008590d)]
        HRESULT HasSmartArt([out, retval] MsoTriState* HasSmartArt);
        [id(0x0000009c), propget, helpcontext(0x0008590e)]
        HRESULT SmartArt([out, retval] SmartArt** SmartArt);
        [id(0x0000009d), helpcontext(0x0008590f)]
        HRESULT ConvertTextToSmartArt([in] SmartArtLayout* Layout);
        [id(0x0000009e), propget, helpcontext(0x00085910)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x0000009e), propput, helpcontext(0x00085910)]
        HRESULT Title([in] BSTR Title);
        [id(0x000007e6), propget, helpcontext(0x00085911)]
        HRESULT MediaFormat([out, retval] MediaFormat** MediaFormat);
        [id(0x000007e7), helpcontext(0x00085912)]
        HRESULT PickupAnimation();
        [id(0x000007e8), helpcontext(0x00085913)]
        HRESULT ApplyAnimation();
        [id(0x000007e9), helpcontext(0x00085914)]
        HRESULT UpgradeMedia();
        [id(0x000007ef), propget]
        HRESULT IsNarration([out, retval] MsoTriState* IsNarration);
        [id(0x000007ef), propput]
        HRESULT IsNarration([in] MsoTriState IsNarration);
        [id(0x000000a0), propget]
        HRESULT InkXML([out, retval] BSTR* InkXML);
        [id(0x000000a1), propget]
        HRESULT HasInkXML([out, retval] MsoTriState* HasInkXML);
    };

    [
      odl,
      uuid(9149347A-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00085ca0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeRange : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00085ca1)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x00085ca2)]
        HRESULT Apply();
        [id(0x0000000b), helpcontext(0x00085ca3)]
        HRESULT Delete();
        [id(0x0000000d), helpcontext(0x00085ca4)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x0000000e), helpcontext(0x00085ca5)]
        HRESULT IncrementLeft([in] single Increment);
        [id(0x0000000f), helpcontext(0x00085ca6)]
        HRESULT IncrementRotation([in] single Increment);
        [id(0x00000010), helpcontext(0x00085ca7)]
        HRESULT IncrementTop([in] single Increment);
        [id(0x00000011), helpcontext(0x00085ca8)]
        HRESULT PickUp();
        [id(0x00000012), helpcontext(0x00085ca9)]
        HRESULT RerouteConnections();
        [id(0x00000013), helpcontext(0x00085caa)]
        HRESULT ScaleHeight(
                        [in] single Factor,
                        [in] MsoTriState RelativeToOriginalSize,
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000014), helpcontext(0x00085cab)]
        HRESULT ScaleWidth(
                        [in] single Factor,
                        [in] MsoTriState RelativeToOriginalSize,
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000016), helpcontext(0x00085cac)]
        HRESULT SetShapesDefaultProperties();
        [id(0x00000017), helpcontext(0x00085cad)]
        HRESULT Ungroup([out, retval] ShapeRange** Ungroup);
        [id(0x00000018), helpcontext(0x00085cae)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x00000064), propget, helpcontext(0x00085caf)]
        HRESULT Adjustments([out, retval] Adjustments** Adjustments);
        [id(0x00000065), propget, helpcontext(0x00085cb0)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* AutoShapeType);
        [id(0x00000065), propput, helpcontext(0x00085cb0)]
        HRESULT AutoShapeType([in] MsoAutoShapeType AutoShapeType);
        [id(0x00000066), propget, helpcontext(0x00085cb1)]
        HRESULT BlackWhiteMode([out, retval] MsoBlackWhiteMode* BlackWhiteMode);
        [id(0x00000066), propput, helpcontext(0x00085cb1)]
        HRESULT BlackWhiteMode([in] MsoBlackWhiteMode BlackWhiteMode);
        [id(0x00000067), propget, helpcontext(0x00085cb2)]
        HRESULT Callout([out, retval] CalloutFormat** Callout);
        [id(0x00000068), propget, helpcontext(0x00085cb3)]
        HRESULT ConnectionSiteCount([out, retval] int* ConnectionSiteCount);
        [id(0x00000069), propget, helpcontext(0x00085cb4)]
        HRESULT Connector([out, retval] MsoTriState* Connector);
        [id(0x0000006a), propget, helpcontext(0x00085cb5)]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** ConnectorFormat);
        [id(0x0000006b), propget, helpcontext(0x00085cb6)]
        HRESULT Fill([out, retval] FillFormat** Fill);
        [id(0x0000006c), propget, helpcontext(0x00085cb7)]
        HRESULT GroupItems([out, retval] GroupShapes** GroupItems);
        [id(0x0000006d), propget, helpcontext(0x00085cb8)]
        HRESULT Height([out, retval] single* Height);
        [id(0x0000006d), propput, helpcontext(0x00085cb8)]
        HRESULT Height([in] single Height);
        [id(0x0000006e), propget, helpcontext(0x00085cb9)]
        HRESULT HorizontalFlip([out, retval] MsoTriState* HorizontalFlip);
        [id(0x0000006f), propget, helpcontext(0x00085cba)]
        HRESULT Left([out, retval] single* Left);
        [id(0x0000006f), propput, helpcontext(0x00085cba)]
        HRESULT Left([in] single Left);
        [id(0x00000070), propget, helpcontext(0x00085cbb)]
        HRESULT Line([out, retval] LineFormat** Line);
        [id(0x00000071), propget, helpcontext(0x00085cbc)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* LockAspectRatio);
        [id(0x00000071), propput, helpcontext(0x00085cbc)]
        HRESULT LockAspectRatio([in] MsoTriState LockAspectRatio);
        [id(0x00000073), propget, helpcontext(0x00085cbd)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000073), propput, helpcontext(0x00085cbd)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000074), propget, helpcontext(0x00085cbe)]
        HRESULT Nodes([out, retval] ShapeNodes** Nodes);
        [id(0x00000075), propget, helpcontext(0x00085cbf)]
        HRESULT Rotation([out, retval] single* Rotation);
        [id(0x00000075), propput, helpcontext(0x00085cbf)]
        HRESULT Rotation([in] single Rotation);
        [id(0x00000076), propget, helpcontext(0x00085cc0)]
        HRESULT PictureFormat([out, retval] PictureFormat** Picture);
        [id(0x00000077), propget, helpcontext(0x00085cc1)]
        HRESULT Shadow([out, retval] ShadowFormat** Shadow);
        [id(0x00000078), propget, helpcontext(0x00085cc2)]
        HRESULT TextEffect([out, retval] TextEffectFormat** TextEffect);
        [id(0x00000079), propget, helpcontext(0x00085cc3)]
        HRESULT TextFrame([out, retval] TextFrame** TextFrame);
        [id(0x0000007a), propget, helpcontext(0x00085cc4)]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x0000007b), propget, helpcontext(0x00085cc5)]
        HRESULT Top([out, retval] single* Top);
        [id(0x0000007b), propput, helpcontext(0x00085cc5)]
        HRESULT Top([in] single Top);
        [id(0x0000007c), propget, helpcontext(0x00085cc6)]
        HRESULT Type([out, retval] MsoShapeType* Type);
        [id(0x0000007d), propget, helpcontext(0x00085cc7)]
        HRESULT VerticalFlip([out, retval] MsoTriState* VerticalFlip);
        [id(0x0000007e), propget, helpcontext(0x00085cc8)]
        HRESULT Vertices([out, retval] VARIANT* Vertices);
        [id(0x0000007f), propget, helpcontext(0x00085cc9)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000007f), propput, helpcontext(0x00085cc9)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000080), propget, helpcontext(0x00085cca)]
        HRESULT Width([out, retval] single* Width);
        [id(0x00000080), propput, helpcontext(0x00085cca)]
        HRESULT Width([in] single Width);
        [id(0x00000081), propget, helpcontext(0x00085ccb)]
        HRESULT ZOrderPosition([out, retval] int* ZOrderPosition);
        [id(0x000007d3), propget, helpcontext(0x00085ccc)]
        HRESULT OLEFormat([out, retval] OLEFormat** OLEFormat);
        [id(0x000007d4), propget, helpcontext(0x00085ccd)]
        HRESULT LinkFormat([out, retval] LinkFormat** LinkFormat);
        [id(0x000007d5), propget, helpcontext(0x00085cce)]
        HRESULT PlaceholderFormat([out, retval] PlaceholderFormat** PlaceholderFormat);
        [id(0x000007d6), propget, helpcontext(0x00085ccf)]
        HRESULT AnimationSettings([out, retval] AnimationSettings** AnimationSettings);
        [id(0x000007d7), propget, helpcontext(0x00085cd0)]
        HRESULT ActionSettings([out, retval] ActionSettings** ActionSettings);
        [id(0x000007d8), propget, helpcontext(0x00085cd1)]
        HRESULT Tags([out, retval] Tags** Tags);
        [id(0x000007d9), helpcontext(0x00085cd2)]
        HRESULT Cut();
        [id(0x000007da), helpcontext(0x00085cd3)]
        HRESULT Copy();
        [id(0x000007db), helpcontext(0x00085cd4)]
        HRESULT Select([in, optional, defaultvalue(-1)] MsoTriState Replace);
        [id(0x000007dc), helpcontext(0x00085cd5)]
        HRESULT Duplicate([out, retval] ShapeRange** Duplicate);
        [id(0x000007dd), propget, helpcontext(0x00085cd6)]
        HRESULT MediaType([out, retval] PpMediaType* MediaType);
        [id(0x000007de), propget, helpcontext(0x00085cd7)]
        HRESULT HasTextFrame([out, retval] MsoTriState* HasTextFrame);
        [id(0x000007df), propget, hidden, helpcontext(0x00085cd8)]
        HRESULT SoundFormat([out, retval] SoundFormat** SoundFormat);
        [id(00000000), helpcontext(0x00085cd9),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget, restricted, helpcontext(0x00085cda)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x00000008), restricted, helpcontext(0x00085cdb)]
        HRESULT _Index(
                        [in] int Index,
                        [out, retval] VARIANT* _Index);
        [id(0x00000009), propget, helpcontext(0x00085cdc)]
        HRESULT Count([out, retval] long* Count);
        [id(0x000007e0), helpcontext(0x00085cdd)]
        HRESULT Group([out, retval] Shape** Group);
        [id(0x000007e1), helpcontext(0x00085cde)]
        HRESULT Regroup([out, retval] Shape** Regroup);
        [id(0x000007e2), helpcontext(0x00085cdf)]
        HRESULT Align(
                        [in] MsoAlignCmd AlignCmd,
                        [in] MsoTriState RelativeTo);
        [id(0x000007e3), helpcontext(0x00085ce0)]
        HRESULT Distribute(
                        [in] MsoDistributeCmd DistributeCmd,
                        [in] MsoTriState RelativeTo);
        [id(0x000007e4), restricted, helpcontext(0x00085ce1)]
        HRESULT GetPolygonalRepresentation(
                        [in] unsigned long maxPointsInBuffer,
                        [in] single* pPoints,
                        [out] unsigned long* numPointsInPolygon,
                        [out] MsoTriState* IsOpen);
        [id(0x00000082), propget, hidden, helpcontext(0x00085ce2)]
        HRESULT Script([out, retval] Script** Script);
        [id(0x00000083), propget, helpcontext(0x00085ce3)]
        HRESULT AlternativeText([out, retval] BSTR* AlternativeText);
        [id(0x00000083), propput, helpcontext(0x00085ce3)]
        HRESULT AlternativeText([in] BSTR AlternativeText);
        [id(0x000007e5), propget, helpcontext(0x00085ce4)]
        HRESULT HasTable([out, retval] MsoTriState* HasTable);
        [id(0x000007e6), propget, helpcontext(0x00085ce5)]
        HRESULT Table([out, retval] Table** Table);
        [id(0x000007e7), hidden, helpcontext(0x00085ce6)]
        HRESULT Export(
                        [in] BSTR PathName,
                        [in] PpShapeFormat Filter,
                        [in, optional, defaultvalue(0)] int ScaleWidth,
                        [in, optional, defaultvalue(0)] int ScaleHeight,
                        [in, optional, defaultvalue(1)] PpExportMode ExportMode);
        [id(0x00000084), propget, hidden, helpcontext(0x00085ce7)]
        HRESULT HasDiagram([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000085), propget, hidden, helpcontext(0x00085ce8)]
        HRESULT Diagram([out, retval] Diagram** Diagram);
        [id(0x00000086), propget, hidden, helpcontext(0x00085ce9)]
        HRESULT HasDiagramNode([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000087), propget, hidden, helpcontext(0x00085cea)]
        HRESULT DiagramNode([out, retval] DiagramNode** DiagramNode);
        [id(0x00000088), propget, helpcontext(0x00085ceb)]
        HRESULT Child([out, retval] MsoTriState* Child);
        [id(0x00000089), propget, helpcontext(0x00085cec)]
        HRESULT ParentGroup([out, retval] Shape** Parent);
        [id(0x0000008a), propget, hidden, helpcontext(0x00085ced)]
        HRESULT CanvasItems([out, retval] CanvasShapes** CanvasShapes);
        [id(0x0000008b), propget, helpcontext(0x00085cee)]
        HRESULT Id([out, retval] int* pid);
        [id(0x0000008c), hidden, helpcontext(0x00085cef)]
        HRESULT CanvasCropLeft([in] single Increment);
        [id(0x0000008d), hidden, helpcontext(0x00085cf0)]
        HRESULT CanvasCropTop([in] single Increment);
        [id(0x0000008e), hidden, helpcontext(0x00085cf1)]
        HRESULT CanvasCropRight([in] single Increment);
        [id(0x0000008f), hidden, helpcontext(0x00085cf2)]
        HRESULT CanvasCropBottom([in] single Increment);
        [id(0x00000090), propput, hidden, helpcontext(0x00085cf3)]
        HRESULT RTF([in] BSTR rhs);
        [id(0x000007e9), propget, helpcontext(0x00085cf5)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x00000091), propget, helpcontext(0x00085cf6)]
        HRESULT TextFrame2([out, retval] TextFrame2** Frame);
        [id(0x00000094), propget, helpcontext(0x00085cf7)]
        HRESULT HasChart([out, retval] MsoTriState* pHasChart);
        [id(0x00000096), propget, helpcontext(0x00085cf8)]
        HRESULT ShapeStyle([out, retval] MsoShapeStyleIndex* ShapeStyle);
        [id(0x00000096), propput, helpcontext(0x00085cf8)]
        HRESULT ShapeStyle([in] MsoShapeStyleIndex ShapeStyle);
        [id(0x00000097), propget, helpcontext(0x00085cf9)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x00000097), propput, helpcontext(0x00085cf9)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x00000098), propget, helpcontext(0x00085cfa)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** SoftEdge);
        [id(0x00000099), propget, helpcontext(0x00085cfb)]
        HRESULT Glow([out, retval] GlowFormat** Glow);
        [id(0x0000009a), propget, helpcontext(0x00085cfc)]
        HRESULT Reflection([out, retval] ReflectionFormat** Reflection);
        [id(0x000007ea), propget, helpcontext(0x00085cfd)]
        HRESULT Chart([out, retval] Chart** Chart);
        [id(0x0000009b), propget, helpcontext(0x00085cfe)]
        HRESULT HasSmartArt([out, retval] MsoTriState* HasSmartArt);
        [id(0x0000009c), propget, helpcontext(0x00085cff)]
        HRESULT SmartArt([out, retval] SmartArt** SmartArt);
        [id(0x0000009d), helpcontext(0x00085d00)]
        HRESULT ConvertTextToSmartArt([in] SmartArtLayout* Layout);
        [id(0x0000009e), propget, helpcontext(0x00085d01)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x0000009e), propput, helpcontext(0x00085d01)]
        HRESULT Title([in] BSTR Title);
        [id(0x000007eb), propget, helpcontext(0x00085d03)]
        HRESULT MediaFormat([out, retval] MediaFormat** MediaFormat);
        [id(0x000007ec), helpcontext(0x00085d04)]
        HRESULT PickupAnimation();
        [id(0x000007ed), helpcontext(0x00085d05)]
        HRESULT ApplyAnimation();
        [id(0x000007ee), helpcontext(0x00085d06)]
        HRESULT UpgradeMedia();
        [id(0x0000009f), helpcontext(0x00085915)]
        HRESULT MergeShapes(
                        [in] MsoMergeCmd MergeCmd,
                        [in, optional, defaultvalue(0)] Shape* PrimaryShape);
        [id(0x000007ef), propget]
        HRESULT IsNarration([out, retval] MsoTriState* IsNarration);
        [id(0x000007ef), propput]
        HRESULT IsNarration([in] MsoTriState IsNarration);
        [id(0x000000a0), propget]
        HRESULT InkXML([out, retval] BSTR* InkXML);
        [id(0x000000a1), propget]
        HRESULT HasInkXML([out, retval] MsoTriState* HasInkXML);
    };

    [
      odl,
      uuid(9149347B-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00086088),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GroupShapes : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00086089)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000002), propget, helpcontext(0x0008608a)]
        HRESULT Count([out, retval] int* pnShapes);
        [id(00000000), helpcontext(0x0008608b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget, helpcontext(0x0008608c)]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x0000000a), helpcontext(0x0008608d)]
        HRESULT Range(
                        [in] VARIANT Index,
                        [out, retval] ShapeRange** Range);
    };

    [
      odl,
      uuid(9149347C-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00086470),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Adjustments : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00086471)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget, helpcontext(0x00086472)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), propget, helpcontext(0x00086473)]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] single* Val);
        [id(00000000), propput, helpcontext(0x00086473)]
        HRESULT Item(
                        [in] int Index,
                        [in] single Val);
    };

    [
      odl,
      uuid(9149347D-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00086858),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00086859)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x0008685a)]
        HRESULT IncrementBrightness([in] single Increment);
        [id(0x0000000b), helpcontext(0x0008685b)]
        HRESULT IncrementContrast([in] single Increment);
        [id(0x00000064), propget, helpcontext(0x0008685c)]
        HRESULT Brightness([out, retval] single* Brightness);
        [id(0x00000064), propput, helpcontext(0x0008685c)]
        HRESULT Brightness([in] single Brightness);
        [id(0x00000065), propget, helpcontext(0x0008685d)]
        HRESULT ColorType([out, retval] MsoPictureColorType* ColorType);
        [id(0x00000065), propput, helpcontext(0x0008685d)]
        HRESULT ColorType([in] MsoPictureColorType ColorType);
        [id(0x00000066), propget, helpcontext(0x0008685e)]
        HRESULT Contrast([out, retval] single* Contrast);
        [id(0x00000066), propput, helpcontext(0x0008685e)]
        HRESULT Contrast([in] single Contrast);
        [id(0x00000067), propget, helpcontext(0x0008685f)]
        HRESULT CropBottom([out, retval] single* CropBottom);
        [id(0x00000067), propput, helpcontext(0x0008685f)]
        HRESULT CropBottom([in] single CropBottom);
        [id(0x00000068), propget, helpcontext(0x00086860)]
        HRESULT CropLeft([out, retval] single* CropLeft);
        [id(0x00000068), propput, helpcontext(0x00086860)]
        HRESULT CropLeft([in] single CropLeft);
        [id(0x00000069), propget, helpcontext(0x00086861)]
        HRESULT CropRight([out, retval] single* CropRight);
        [id(0x00000069), propput, helpcontext(0x00086861)]
        HRESULT CropRight([in] single CropRight);
        [id(0x0000006a), propget, helpcontext(0x00086862)]
        HRESULT CropTop([out, retval] single* CropTop);
        [id(0x0000006a), propput, helpcontext(0x00086862)]
        HRESULT CropTop([in] single CropTop);
        [id(0x0000006b), propget, helpcontext(0x00086863)]
        HRESULT TransparencyColor([out, retval] MsoRGBType* TransparencyColor);
        [id(0x0000006b), propput, helpcontext(0x00086863)]
        HRESULT TransparencyColor([in] MsoRGBType TransparencyColor);
        [id(0x0000006c), propget, helpcontext(0x00086864)]
        HRESULT TransparentBackground([out, retval] MsoTriState* TransparentBackground);
        [id(0x0000006c), propput, helpcontext(0x00086864)]
        HRESULT TransparentBackground([in] MsoTriState TransparentBackground);
        [id(0x0000006d), propget, helpcontext(0x00086865)]
        HRESULT Crop([out, retval] Crop** Crop);
    };

    [
      odl,
      uuid(9149347E-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00086c40),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FillFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00086c41)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x00086c42)]
        HRESULT Background();
        [id(0x0000000b), helpcontext(0x00086c43)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style,
                        [in] int Variant,
                        [in] single Degree);
        [id(0x0000000c), helpcontext(0x00086c44)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x0000000d), helpcontext(0x00086c45)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style,
                        [in] int Variant,
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x0000000e), helpcontext(0x00086c46)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x0000000f), helpcontext(0x00086c47)]
        HRESULT Solid();
        [id(0x00000010), helpcontext(0x00086c48)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style,
                        [in] int Variant);
        [id(0x00000011), helpcontext(0x00086c49)]
        HRESULT UserPicture([in] BSTR PictureFile);
        [id(0x00000012), helpcontext(0x00086c4a)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x00000064), propget, helpcontext(0x00086c4b)]
        HRESULT BackColor([out, retval] ColorFormat** BackColor);
        [id(0x00000064), propput, helpcontext(0x00086c4b)]
        HRESULT BackColor([in] ColorFormat* BackColor);
        [id(0x00000065), propget, helpcontext(0x00086c4c)]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x00000065), propput, helpcontext(0x00086c4c)]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x00000066), propget, helpcontext(0x00086c4d)]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* GradientColorType);
        [id(0x00000067), propget, helpcontext(0x00086c4e)]
        HRESULT GradientDegree([out, retval] single* GradientDegree);
        [id(0x00000068), propget, helpcontext(0x00086c4f)]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* GradientStyle);
        [id(0x00000069), propget, helpcontext(0x00086c50)]
        HRESULT GradientVariant([out, retval] int* GradientVariant);
        [id(0x0000006a), propget, helpcontext(0x00086c51)]
        HRESULT Pattern([out, retval] MsoPatternType* Pattern);
        [id(0x0000006b), propget, helpcontext(0x00086c52)]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* PresetGradientType);
        [id(0x0000006c), propget, helpcontext(0x00086c53)]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* PresetTexture);
        [id(0x0000006d), propget, helpcontext(0x00086c54)]
        HRESULT TextureName([out, retval] BSTR* TextureName);
        [id(0x0000006e), propget, helpcontext(0x00086c55)]
        HRESULT TextureType([out, retval] MsoTextureType* TextureType);
        [id(0x0000006f), propget, helpcontext(0x00086c56)]
        HRESULT Transparency([out, retval] single* Transparency);
        [id(0x0000006f), propput, helpcontext(0x00086c56)]
        HRESULT Transparency([in] single Transparency);
        [id(0x00000070), propget, helpcontext(0x00086c57)]
        HRESULT Type([out, retval] MsoFillType* Type);
        [id(0x00000071), propget, helpcontext(0x00086c58)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x00000071), propput, helpcontext(0x00086c58)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000072), propget, helpcontext(0x00086c59)]
        HRESULT GradientStops([out, retval] GradientStops** GradientStops);
        [id(0x00000073), propget, helpcontext(0x00086c5a)]
        HRESULT TextureOffsetX([out, retval] single* TextureOffsetX);
        [id(0x00000073), propput, helpcontext(0x00086c5a)]
        HRESULT TextureOffsetX([in] single TextureOffsetX);
        [id(0x00000074), propget, helpcontext(0x00086c5b)]
        HRESULT TextureOffsetY([out, retval] single* TextureOffsetY);
        [id(0x00000074), propput, helpcontext(0x00086c5b)]
        HRESULT TextureOffsetY([in] single TextureOffsetY);
        [id(0x00000075), propget, helpcontext(0x00086c5c)]
        HRESULT TextureAlignment([out, retval] MsoTextureAlignment* TextureAlignment);
        [id(0x00000075), propput, helpcontext(0x00086c5c)]
        HRESULT TextureAlignment([in] MsoTextureAlignment TextureAlignment);
        [id(0x00000076), propget, helpcontext(0x00086c5d)]
        HRESULT TextureHorizontalScale([out, retval] single* HorizontalScale);
        [id(0x00000076), propput, helpcontext(0x00086c5d)]
        HRESULT TextureHorizontalScale([in] single HorizontalScale);
        [id(0x00000077), propget, helpcontext(0x00086c5e)]
        HRESULT TextureVerticalScale([out, retval] single* VerticalScale);
        [id(0x00000077), propput, helpcontext(0x00086c5e)]
        HRESULT TextureVerticalScale([in] single VerticalScale);
        [id(0x00000078), propget, helpcontext(0x00086c5f)]
        HRESULT TextureTile([out, retval] MsoTriState* TextureTile);
        [id(0x00000078), propput, helpcontext(0x00086c5f)]
        HRESULT TextureTile([in] MsoTriState TextureTile);
        [id(0x00000079), propget, helpcontext(0x00086c60)]
        HRESULT RotateWithObject([out, retval] MsoTriState* RotateWithObject);
        [id(0x00000079), propput, helpcontext(0x00086c60)]
        HRESULT RotateWithObject([in] MsoTriState RotateWithObject);
        [id(0x0000007a), propget, helpcontext(0x00086c61)]
        HRESULT PictureEffects([out, retval] PictureEffects** PictureEffects);
        [id(0x0000007b), propget, helpcontext(0x00086c62)]
        HRESULT GradientAngle([out, retval] single* GradientAngle);
        [id(0x0000007b), propput, helpcontext(0x00086c62)]
        HRESULT GradientAngle([in] single GradientAngle);
    };

    [
      odl,
      uuid(9149347F-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00087028),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00087029)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget, helpcontext(0x0008702a)]
        HRESULT BackColor([out, retval] ColorFormat** BackColor);
        [id(0x00000064), propput, helpcontext(0x0008702a)]
        HRESULT BackColor([in] ColorFormat* BackColor);
        [id(0x00000065), propget, helpcontext(0x0008702b)]
        HRESULT BeginArrowheadLength([out, retval] MsoArrowheadLength* BeginArrowheadLength);
        [id(0x00000065), propput, helpcontext(0x0008702b)]
        HRESULT BeginArrowheadLength([in] MsoArrowheadLength BeginArrowheadLength);
        [id(0x00000066), propget, helpcontext(0x0008702c)]
        HRESULT BeginArrowheadStyle([out, retval] MsoArrowheadStyle* BeginArrowheadStyle);
        [id(0x00000066), propput, helpcontext(0x0008702c)]
        HRESULT BeginArrowheadStyle([in] MsoArrowheadStyle BeginArrowheadStyle);
        [id(0x00000067), propget, helpcontext(0x0008702d)]
        HRESULT BeginArrowheadWidth([out, retval] MsoArrowheadWidth* BeginArrowheadWidth);
        [id(0x00000067), propput, helpcontext(0x0008702d)]
        HRESULT BeginArrowheadWidth([in] MsoArrowheadWidth BeginArrowheadWidth);
        [id(0x00000068), propget, helpcontext(0x0008702e)]
        HRESULT DashStyle([out, retval] MsoLineDashStyle* DashStyle);
        [id(0x00000068), propput, helpcontext(0x0008702e)]
        HRESULT DashStyle([in] MsoLineDashStyle DashStyle);
        [id(0x00000069), propget, helpcontext(0x0008702f)]
        HRESULT EndArrowheadLength([out, retval] MsoArrowheadLength* EndArrowheadLength);
        [id(0x00000069), propput, helpcontext(0x0008702f)]
        HRESULT EndArrowheadLength([in] MsoArrowheadLength EndArrowheadLength);
        [id(0x0000006a), propget, helpcontext(0x00087030)]
        HRESULT EndArrowheadStyle([out, retval] MsoArrowheadStyle* EndArrowheadStyle);
        [id(0x0000006a), propput, helpcontext(0x00087030)]
        HRESULT EndArrowheadStyle([in] MsoArrowheadStyle EndArrowheadStyle);
        [id(0x0000006b), propget, helpcontext(0x00087031)]
        HRESULT EndArrowheadWidth([out, retval] MsoArrowheadWidth* EndArrowheadWidth);
        [id(0x0000006b), propput, helpcontext(0x00087031)]
        HRESULT EndArrowheadWidth([in] MsoArrowheadWidth EndArrowheadWidth);
        [id(0x0000006c), propget, helpcontext(0x00087032)]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x0000006c), propput, helpcontext(0x00087032)]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x0000006d), propget, helpcontext(0x00087033)]
        HRESULT Pattern([out, retval] MsoPatternType* Pattern);
        [id(0x0000006d), propput, helpcontext(0x00087033)]
        HRESULT Pattern([in] MsoPatternType Pattern);
        [id(0x0000006e), propget, helpcontext(0x00087034)]
        HRESULT Style([out, retval] MsoLineStyle* Style);
        [id(0x0000006e), propput, helpcontext(0x00087034)]
        HRESULT Style([in] MsoLineStyle Style);
        [id(0x0000006f), propget, helpcontext(0x00087035)]
        HRESULT Transparency([out, retval] single* Transparency);
        [id(0x0000006f), propput, helpcontext(0x00087035)]
        HRESULT Transparency([in] single Transparency);
        [id(0x00000070), propget, helpcontext(0x00087036)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x00000070), propput, helpcontext(0x00087036)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000071), propget, helpcontext(0x00087037)]
        HRESULT Weight([out, retval] single* Weight);
        [id(0x00000071), propput, helpcontext(0x00087037)]
        HRESULT Weight([in] single Weight);
        [id(0x00000072), propget, helpcontext(0x00087038)]
        HRESULT InsetPen([out, retval] MsoTriState* InsetPen);
        [id(0x00000072), propput, helpcontext(0x00087038)]
        HRESULT InsetPen([in] MsoTriState InsetPen);
    };

    [
      odl,
      uuid(91493480-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00087410),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShadowFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00087411)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x00087412)]
        HRESULT IncrementOffsetX([in] single Increment);
        [id(0x0000000b), helpcontext(0x00087413)]
        HRESULT IncrementOffsetY([in] single Increment);
        [id(0x00000064), propget, helpcontext(0x00087414)]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x00000064), propput, helpcontext(0x00087414)]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x00000065), propget, helpcontext(0x00087415)]
        HRESULT Obscured([out, retval] MsoTriState* Obscured);
        [id(0x00000065), propput, helpcontext(0x00087415)]
        HRESULT Obscured([in] MsoTriState Obscured);
        [id(0x00000066), propget, helpcontext(0x00087416)]
        HRESULT OffsetX([out, retval] single* OffsetX);
        [id(0x00000066), propput, helpcontext(0x00087416)]
        HRESULT OffsetX([in] single OffsetX);
        [id(0x00000067), propget, helpcontext(0x00087417)]
        HRESULT OffsetY([out, retval] single* OffsetY);
        [id(0x00000067), propput, helpcontext(0x00087417)]
        HRESULT OffsetY([in] single OffsetY);
        [id(0x00000068), propget, helpcontext(0x00087418)]
        HRESULT Transparency([out, retval] single* Transparency);
        [id(0x00000068), propput, helpcontext(0x00087418)]
        HRESULT Transparency([in] single Transparency);
        [id(0x00000069), propget, helpcontext(0x00087419)]
        HRESULT Type([out, retval] MsoShadowType* Type);
        [id(0x00000069), propput, helpcontext(0x00087419)]
        HRESULT Type([in] MsoShadowType Type);
        [id(0x0000006a), propget, helpcontext(0x0008741a)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000006a), propput, helpcontext(0x0008741a)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x0000006b), propget, helpcontext(0x0008741b)]
        HRESULT Style([out, retval] MsoShadowStyle* ShadowStyle);
        [id(0x0000006b), propput, helpcontext(0x0008741b)]
        HRESULT Style([in] MsoShadowStyle ShadowStyle);
        [id(0x0000006c), propget, helpcontext(0x0008741c)]
        HRESULT Blur([out, retval] single* Blur);
        [id(0x0000006c), propput, helpcontext(0x0008741c)]
        HRESULT Blur([in] single Blur);
        [id(0x0000006d), propget, helpcontext(0x0008741d)]
        HRESULT Size([out, retval] single* Size);
        [id(0x0000006d), propput, helpcontext(0x0008741d)]
        HRESULT Size([in] single Size);
        [id(0x0000006e), propget, helpcontext(0x0008741e)]
        HRESULT RotateWithShape([out, retval] MsoTriState* RotateWithShape);
        [id(0x0000006e), propput, helpcontext(0x0008741e)]
        HRESULT RotateWithShape([in] MsoTriState RotateWithShape);
    };

    [
      odl,
      uuid(91493481-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000877f8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ConnectorFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x000877f9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x000877fa)]
        HRESULT BeginConnect(
                        [in] Shape* ConnectedShape,
                        [in] int ConnectionSite);
        [id(0x0000000b), helpcontext(0x000877fb)]
        HRESULT BeginDisconnect();
        [id(0x0000000c), helpcontext(0x000877fc)]
        HRESULT EndConnect(
                        [in] Shape* ConnectedShape,
                        [in] int ConnectionSite);
        [id(0x0000000d), helpcontext(0x000877fd)]
        HRESULT EndDisconnect();
        [id(0x00000064), propget, helpcontext(0x000877fe)]
        HRESULT BeginConnected([out, retval] MsoTriState* BeginConnected);
        [id(0x00000065), propget, helpcontext(0x000877ff)]
        HRESULT BeginConnectedShape([out, retval] Shape** BeginConnectedShape);
        [id(0x00000066), propget, helpcontext(0x00087800)]
        HRESULT BeginConnectionSite([out, retval] int* BeginConnectionSite);
        [id(0x00000067), propget, helpcontext(0x00087801)]
        HRESULT EndConnected([out, retval] MsoTriState* EndConnected);
        [id(0x00000068), propget, helpcontext(0x00087802)]
        HRESULT EndConnectedShape([out, retval] Shape** EndConnectedShape);
        [id(0x00000069), propget, helpcontext(0x00087803)]
        HRESULT EndConnectionSite([out, retval] int* EndConnectionSite);
        [id(0x0000006a), propget, helpcontext(0x00087804)]
        HRESULT Type([out, retval] MsoConnectorType* Type);
        [id(0x0000006a), propput, helpcontext(0x00087804)]
        HRESULT Type([in] MsoConnectorType Type);
    };

    [
      odl,
      uuid(91493482-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00087be0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextEffectFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00087be1)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x00087be2)]
        HRESULT ToggleVerticalText();
        [id(0x00000064), propget, helpcontext(0x00087be3)]
        HRESULT Alignment([out, retval] MsoTextEffectAlignment* Alignment);
        [id(0x00000064), propput, helpcontext(0x00087be3)]
        HRESULT Alignment([in] MsoTextEffectAlignment Alignment);
        [id(0x00000065), propget, helpcontext(0x00087be4)]
        HRESULT FontBold([out, retval] MsoTriState* FontBold);
        [id(0x00000065), propput, helpcontext(0x00087be4)]
        HRESULT FontBold([in] MsoTriState FontBold);
        [id(0x00000066), propget, helpcontext(0x00087be5)]
        HRESULT FontItalic([out, retval] MsoTriState* FontItalic);
        [id(0x00000066), propput, helpcontext(0x00087be5)]
        HRESULT FontItalic([in] MsoTriState FontItalic);
        [id(0x00000067), propget, helpcontext(0x00087be6)]
        HRESULT FontName([out, retval] BSTR* FontName);
        [id(0x00000067), propput, helpcontext(0x00087be6)]
        HRESULT FontName([in] BSTR FontName);
        [id(0x00000068), propget, helpcontext(0x00087be7)]
        HRESULT FontSize([out, retval] single* FontSize);
        [id(0x00000068), propput, helpcontext(0x00087be7)]
        HRESULT FontSize([in] single FontSize);
        [id(0x00000069), propget, helpcontext(0x00087be8)]
        HRESULT KernedPairs([out, retval] MsoTriState* KernedPairs);
        [id(0x00000069), propput, helpcontext(0x00087be8)]
        HRESULT KernedPairs([in] MsoTriState KernedPairs);
        [id(0x0000006a), propget, helpcontext(0x00087be9)]
        HRESULT NormalizedHeight([out, retval] MsoTriState* NormalizedHeight);
        [id(0x0000006a), propput, helpcontext(0x00087be9)]
        HRESULT NormalizedHeight([in] MsoTriState NormalizedHeight);
        [id(0x0000006b), propget, helpcontext(0x00087bea)]
        HRESULT PresetShape([out, retval] MsoPresetTextEffectShape* PresetShape);
        [id(0x0000006b), propput, helpcontext(0x00087bea)]
        HRESULT PresetShape([in] MsoPresetTextEffectShape PresetShape);
        [id(0x0000006c), propget, helpcontext(0x00087beb)]
        HRESULT PresetTextEffect([out, retval] MsoPresetTextEffect* Preset);
        [id(0x0000006c), propput, helpcontext(0x00087beb)]
        HRESULT PresetTextEffect([in] MsoPresetTextEffect Preset);
        [id(0x0000006d), propget, helpcontext(0x00087bec)]
        HRESULT RotatedChars([out, retval] MsoTriState* RotatedChars);
        [id(0x0000006d), propput, helpcontext(0x00087bec)]
        HRESULT RotatedChars([in] MsoTriState RotatedChars);
        [id(0x0000006e), propget, helpcontext(0x00087bed)]
        HRESULT Text([out, retval] BSTR* Text);
        [id(0x0000006e), propput, helpcontext(0x00087bed)]
        HRESULT Text([in] BSTR Text);
        [id(0x0000006f), propget, helpcontext(0x00087bee)]
        HRESULT Tracking([out, retval] single* Tracking);
        [id(0x0000006f), propput, helpcontext(0x00087bee)]
        HRESULT Tracking([in] single Tracking);
    };

    [
      odl,
      uuid(91493483-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00087fc8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThreeDFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00087fc9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x00087fca)]
        HRESULT IncrementRotationX([in] single Increment);
        [id(0x0000000b), helpcontext(0x00087fcb)]
        HRESULT IncrementRotationY([in] single Increment);
        [id(0x0000000c), helpcontext(0x00087fcc)]
        HRESULT ResetRotation();
        [id(0x0000000d), helpcontext(0x00087fcd)]
        HRESULT SetThreeDFormat([in] MsoPresetThreeDFormat PresetThreeDFormat);
        [id(0x0000000e), helpcontext(0x00087fce)]
        HRESULT SetExtrusionDirection([in] MsoPresetExtrusionDirection PresetExtrusionDirection);
        [id(0x00000064), propget, helpcontext(0x00087fcf)]
        HRESULT Depth([out, retval] single* Depth);
        [id(0x00000064), propput, helpcontext(0x00087fcf)]
        HRESULT Depth([in] single Depth);
        [id(0x00000065), propget, helpcontext(0x00087fd0)]
        HRESULT ExtrusionColor([out, retval] ColorFormat** ExtrusionColor);
        [id(0x00000066), propget, helpcontext(0x00087fd1)]
        HRESULT ExtrusionColorType([out, retval] MsoExtrusionColorType* ExtrusionColorType);
        [id(0x00000066), propput, helpcontext(0x00087fd1)]
        HRESULT ExtrusionColorType([in] MsoExtrusionColorType ExtrusionColorType);
        [id(0x00000067), propget, helpcontext(0x00087fd2)]
        HRESULT Perspective([out, retval] MsoTriState* Perspective);
        [id(0x00000067), propput, helpcontext(0x00087fd2)]
        HRESULT Perspective([in] MsoTriState Perspective);
        [id(0x00000068), propget, helpcontext(0x00087fd3)]
        HRESULT PresetExtrusionDirection([out, retval] MsoPresetExtrusionDirection* PresetExtrusionDirection);
        [id(0x00000069), propget, helpcontext(0x00087fd4)]
        HRESULT PresetLightingDirection([out, retval] MsoPresetLightingDirection* PresetLightingDirection);
        [id(0x00000069), propput, helpcontext(0x00087fd4)]
        HRESULT PresetLightingDirection([in] MsoPresetLightingDirection PresetLightingDirection);
        [id(0x0000006a), propget, helpcontext(0x00087fd5)]
        HRESULT PresetLightingSoftness([out, retval] MsoPresetLightingSoftness* PresetLightingSoftness);
        [id(0x0000006a), propput, helpcontext(0x00087fd5)]
        HRESULT PresetLightingSoftness([in] MsoPresetLightingSoftness PresetLightingSoftness);
        [id(0x0000006b), propget, helpcontext(0x00087fd6)]
        HRESULT PresetMaterial([out, retval] MsoPresetMaterial* PresetMaterial);
        [id(0x0000006b), propput, helpcontext(0x00087fd6)]
        HRESULT PresetMaterial([in] MsoPresetMaterial PresetMaterial);
        [id(0x0000006c), propget, helpcontext(0x00087fd7)]
        HRESULT PresetThreeDFormat([out, retval] MsoPresetThreeDFormat* PresetThreeDFormat);
        [id(0x0000006d), propget, helpcontext(0x00087fd8)]
        HRESULT RotationX([out, retval] single* RotationX);
        [id(0x0000006d), propput, helpcontext(0x00087fd8)]
        HRESULT RotationX([in] single RotationX);
        [id(0x0000006e), propget, helpcontext(0x00087fd9)]
        HRESULT RotationY([out, retval] single* RotationY);
        [id(0x0000006e), propput, helpcontext(0x00087fd9)]
        HRESULT RotationY([in] single RotationY);
        [id(0x0000006f), propget, helpcontext(0x00087fda)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000006f), propput, helpcontext(0x00087fda)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x0000000f), helpcontext(0x00087fdb)]
        HRESULT SetPresetCamera([in] MsoPresetCamera PresetCamera);
        [id(0x00000010), helpcontext(0x00087fdc)]
        HRESULT IncrementRotationZ([in] single Increment);
        [id(0x00000011), helpcontext(0x00087fdd)]
        HRESULT IncrementRotationHorizontal([in] single Increment);
        [id(0x00000012), helpcontext(0x00087fde)]
        HRESULT IncrementRotationVertical([in] single Increment);
        [id(0x00000070), propget, helpcontext(0x00087fdf)]
        HRESULT PresetLighting([out, retval] MsoLightRigType* PresetLightRigType);
        [id(0x00000070), propput, helpcontext(0x00087fdf)]
        HRESULT PresetLighting([in] MsoLightRigType PresetLightRigType);
        [id(0x00000071), propget, helpcontext(0x00087fe0)]
        HRESULT Z([out, retval] single* Z);
        [id(0x00000071), propput, helpcontext(0x00087fe0)]
        HRESULT Z([in] single Z);
        [id(0x00000072), propget, helpcontext(0x00087fe1)]
        HRESULT BevelTopType([out, retval] MsoBevelType* BevelTopType);
        [id(0x00000072), propput, helpcontext(0x00087fe1)]
        HRESULT BevelTopType([in] MsoBevelType BevelTopType);
        [id(0x00000073), propget, helpcontext(0x00087fe2)]
        HRESULT BevelTopInset([out, retval] single* BevelTopInset);
        [id(0x00000073), propput, helpcontext(0x00087fe2)]
        HRESULT BevelTopInset([in] single BevelTopInset);
        [id(0x00000074), propget, helpcontext(0x00087fe3)]
        HRESULT BevelTopDepth([out, retval] single* BevelTopDepth);
        [id(0x00000074), propput, helpcontext(0x00087fe3)]
        HRESULT BevelTopDepth([in] single BevelTopDepth);
        [id(0x00000075), propget, helpcontext(0x00087fe4)]
        HRESULT BevelBottomType([out, retval] MsoBevelType* BevelBottomType);
        [id(0x00000075), propput, helpcontext(0x00087fe4)]
        HRESULT BevelBottomType([in] MsoBevelType BevelBottomType);
        [id(0x00000076), propget, helpcontext(0x00087fe5)]
        HRESULT BevelBottomInset([out, retval] single* BevelBottomInset);
        [id(0x00000076), propput, helpcontext(0x00087fe5)]
        HRESULT BevelBottomInset([in] single BevelBottomInset);
        [id(0x00000077), propget, helpcontext(0x00087fe6)]
        HRESULT BevelBottomDepth([out, retval] single* BevelBottomDepth);
        [id(0x00000077), propput, helpcontext(0x00087fe6)]
        HRESULT BevelBottomDepth([in] single BevelBottomDepth);
        [id(0x00000078), propget, helpcontext(0x00087fe7)]
        HRESULT PresetCamera([out, retval] MsoPresetCamera* PresetCamera);
        [id(0x00000079), propget, helpcontext(0x00087fe8)]
        HRESULT RotationZ([out, retval] single* RotationZ);
        [id(0x00000079), propput, helpcontext(0x00087fe8)]
        HRESULT RotationZ([in] single RotationZ);
        [id(0x0000007a), propget, helpcontext(0x00087fe9)]
        HRESULT ContourWidth([out, retval] single* Width);
        [id(0x0000007a), propput, helpcontext(0x00087fe9)]
        HRESULT ContourWidth([in] single Width);
        [id(0x0000007b), propget, helpcontext(0x00087fea)]
        HRESULT ContourColor([out, retval] ColorFormat** ContourColor);
        [id(0x0000007c), propget, helpcontext(0x00087feb)]
        HRESULT FieldOfView([out, retval] single* FOV);
        [id(0x0000007c), propput, helpcontext(0x00087feb)]
        HRESULT FieldOfView([in] single FOV);
        [id(0x0000007d), propget, helpcontext(0x00087fec)]
        HRESULT ProjectText([out, retval] MsoTriState* ProjectText);
        [id(0x0000007d), propput, helpcontext(0x00087fec)]
        HRESULT ProjectText([in] MsoTriState ProjectText);
        [id(0x0000007e), propget, helpcontext(0x00087fed)]
        HRESULT LightAngle([out, retval] single* LightAngle);
        [id(0x0000007e), propput, helpcontext(0x00087fed)]
        HRESULT LightAngle([in] single LightAngle);
    };

    [
      odl,
      uuid(91493484-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000883b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x000883b1)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget, helpcontext(0x000883b2)]
        HRESULT MarginBottom([out, retval] single* MarginBottom);
        [id(0x00000064), propput, helpcontext(0x000883b2)]
        HRESULT MarginBottom([in] single MarginBottom);
        [id(0x00000065), propget, helpcontext(0x000883b3)]
        HRESULT MarginLeft([out, retval] single* MarginLeft);
        [id(0x00000065), propput, helpcontext(0x000883b3)]
        HRESULT MarginLeft([in] single MarginLeft);
        [id(0x00000066), propget, helpcontext(0x000883b4)]
        HRESULT MarginRight([out, retval] single* MarginRight);
        [id(0x00000066), propput, helpcontext(0x000883b4)]
        HRESULT MarginRight([in] single MarginRight);
        [id(0x00000067), propget, helpcontext(0x000883b5)]
        HRESULT MarginTop([out, retval] single* MarginTop);
        [id(0x00000067), propput, helpcontext(0x000883b5)]
        HRESULT MarginTop([in] single MarginTop);
        [id(0x00000068), propget, helpcontext(0x000883b6)]
        HRESULT Orientation([out, retval] MsoTextOrientation* Orientation);
        [id(0x00000068), propput, helpcontext(0x000883b6)]
        HRESULT Orientation([in] MsoTextOrientation Orientation);
        [id(0x000007d3), propget, helpcontext(0x000883b7)]
        HRESULT HasText([out, retval] MsoTriState* HasText);
        [id(0x000007d4), propget, helpcontext(0x000883b8)]
        HRESULT TextRange([out, retval] TextRange** TextRange);
        [id(0x000007d5), propget, helpcontext(0x000883b9)]
        HRESULT Ruler([out, retval] Ruler** Ruler);
        [id(0x000007d6), propget, helpcontext(0x000883ba)]
        HRESULT HorizontalAnchor([out, retval] MsoHorizontalAnchor* HorizontalAnchor);
        [id(0x000007d6), propput, helpcontext(0x000883ba)]
        HRESULT HorizontalAnchor([in] MsoHorizontalAnchor HorizontalAnchor);
        [id(0x000007d7), propget, helpcontext(0x000883bb)]
        HRESULT VerticalAnchor([out, retval] MsoVerticalAnchor* VerticalAnchor);
        [id(0x000007d7), propput, helpcontext(0x000883bb)]
        HRESULT VerticalAnchor([in] MsoVerticalAnchor VerticalAnchor);
        [id(0x000007d8), propget, helpcontext(0x000883bc)]
        HRESULT AutoSize([out, retval] PpAutoSize* AutoSize);
        [id(0x000007d8), propput, helpcontext(0x000883bc)]
        HRESULT AutoSize([in] PpAutoSize AutoSize);
        [id(0x000007d9), propget, helpcontext(0x000883bd)]
        HRESULT WordWrap([out, retval] MsoTriState* WordWrap);
        [id(0x000007d9), propput, helpcontext(0x000883bd)]
        HRESULT WordWrap([in] MsoTriState WordWrap);
        [id(0x000007da), helpcontext(0x000883be)]
        HRESULT DeleteText();
    };

    [
      odl,
      uuid(91493485-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00088798),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CalloutFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00088799)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x0008879a)]
        HRESULT AutomaticLength();
        [id(0x0000000b), helpcontext(0x0008879b)]
        HRESULT CustomDrop([in] single Drop);
        [id(0x0000000c), helpcontext(0x0008879c)]
        HRESULT CustomLength([in] single Length);
        [id(0x0000000d), helpcontext(0x0008879d)]
        HRESULT PresetDrop([in] MsoCalloutDropType DropType);
        [id(0x00000064), propget, helpcontext(0x0008879e)]
        HRESULT Accent([out, retval] MsoTriState* Accent);
        [id(0x00000064), propput, helpcontext(0x0008879e)]
        HRESULT Accent([in] MsoTriState Accent);
        [id(0x00000065), propget, helpcontext(0x0008879f)]
        HRESULT Angle([out, retval] MsoCalloutAngleType* Angle);
        [id(0x00000065), propput, helpcontext(0x0008879f)]
        HRESULT Angle([in] MsoCalloutAngleType Angle);
        [id(0x00000066), propget, helpcontext(0x000887a0)]
        HRESULT AutoAttach([out, retval] MsoTriState* AutoAttach);
        [id(0x00000066), propput, helpcontext(0x000887a0)]
        HRESULT AutoAttach([in] MsoTriState AutoAttach);
        [id(0x00000067), propget, helpcontext(0x000887a1)]
        HRESULT AutoLength([out, retval] MsoTriState* AutoLength);
        [id(0x00000068), propget, helpcontext(0x000887a2)]
        HRESULT Border([out, retval] MsoTriState* Border);
        [id(0x00000068), propput, helpcontext(0x000887a2)]
        HRESULT Border([in] MsoTriState Border);
        [id(0x00000069), propget, helpcontext(0x000887a3)]
        HRESULT Drop([out, retval] single* Drop);
        [id(0x0000006a), propget, helpcontext(0x000887a4)]
        HRESULT DropType([out, retval] MsoCalloutDropType* DropType);
        [id(0x0000006b), propget, helpcontext(0x000887a5)]
        HRESULT Gap([out, retval] single* Gap);
        [id(0x0000006b), propput, helpcontext(0x000887a5)]
        HRESULT Gap([in] single Gap);
        [id(0x0000006c), propget, helpcontext(0x000887a6)]
        HRESULT Length([out, retval] single* Length);
        [id(0x0000006d), propget, helpcontext(0x000887a7)]
        HRESULT Type([out, retval] MsoCalloutType* Type);
        [id(0x0000006d), propput, helpcontext(0x000887a7)]
        HRESULT Type([in] MsoCalloutType Type);
    };

    [
      odl,
      uuid(91493486-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00088b80),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNodes : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00088b81)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget, helpcontext(0x00088b82)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), helpcontext(0x00088b83),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] ShapeNode** Item);
        [id(0xfffffffc), propget, helpcontext(0x00088b84)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000b), helpcontext(0x00088b85)]
        HRESULT Delete([in] int Index);
        [id(0x0000000c), helpcontext(0x00088b86)]
        HRESULT Insert(
                        [in] int Index,
                        [in] MsoSegmentType SegmentType,
                        [in] MsoEditingType EditingType,
                        [in] single X1,
                        [in] single Y1,
                        [in, optional, defaultvalue(0)] single X2,
                        [in, optional, defaultvalue(0)] single Y2,
                        [in, optional, defaultvalue(0)] single X3,
                        [in, optional, defaultvalue(0)] single Y3);
        [id(0x0000000d), helpcontext(0x00088b87)]
        HRESULT SetEditingType(
                        [in] int Index,
                        [in] MsoEditingType EditingType);
        [id(0x0000000e), helpcontext(0x00088b88)]
        HRESULT SetPosition(
                        [in] int Index,
                        [in] single X1,
                        [in] single Y1);
        [id(0x0000000f), helpcontext(0x00088b89)]
        HRESULT SetSegmentType(
                        [in] int Index,
                        [in] MsoSegmentType SegmentType);
    };

    [
      odl,
      uuid(91493487-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00088f68),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNode : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x00088f69)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget, helpcontext(0x00088f6a)]
        HRESULT EditingType([out, retval] MsoEditingType* EditingType);
        [id(0x00000065), propget, helpcontext(0x00088f6b)]
        HRESULT Points([out, retval] VARIANT* Points);
        [id(0x00000066), propget, helpcontext(0x00088f6c)]
        HRESULT SegmentType([out, retval] MsoSegmentType* SegmentType);
    };

    [
      odl,
      uuid(91493488-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00089350),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OLEFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00089351)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00089352)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00089353)]
        HRESULT ObjectVerbs([out, retval] ObjectVerbs** ObjectVerbs);
        [id(0x000007d4), propget, helpcontext(0x00089354)]
        HRESULT Object([out, retval] IDispatch** Object);
        [id(0x000007d5), propget, helpcontext(0x00089355)]
        HRESULT ProgID([out, retval] BSTR* ProgID);
        [id(0x000007d6), propget, helpcontext(0x00089356)]
        HRESULT FollowColors([out, retval] PpFollowColors* FollowColors);
        [id(0x000007d6), propput, helpcontext(0x00089356)]
        HRESULT FollowColors([in] PpFollowColors FollowColors);
        [id(0x000007d7), helpcontext(0x00089357)]
        HRESULT DoVerb([in, optional, defaultvalue(0)] int Index);
        [id(0x000007d8), helpcontext(0x00089358)]
        HRESULT Activate();
    };

    [
      odl,
      uuid(91493489-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00089738),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LinkFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00089739)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008973a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008973b)]
        HRESULT SourceFullName([out, retval] BSTR* SourceFullName);
        [id(0x000007d3), propput, helpcontext(0x0008973b)]
        HRESULT SourceFullName([in] BSTR SourceFullName);
        [id(0x000007d4), propget, helpcontext(0x0008973c)]
        HRESULT AutoUpdate([out, retval] PpUpdateOption* AutoUpdate);
        [id(0x000007d4), propput, helpcontext(0x0008973c)]
        HRESULT AutoUpdate([in] PpUpdateOption AutoUpdate);
        [id(0x000007d5), helpcontext(0x0008973d)]
        HRESULT Update();
        [id(0x000007d6), helpcontext(0x0008973e)]
        HRESULT BreakLink();
    };

    [
      odl,
      uuid(9149348A-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00089b20),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ObjectVerbs : Collection {
        [id(0x000007d1), propget, helpcontext(0x00089b21)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00089b22)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x00089b23),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] BSTR* Item);
    };

    [
      odl,
      uuid(9149348B-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00089f08),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnimationSettings : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00089f09)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00089f0a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00089f0b)]
        HRESULT DimColor([out, retval] ColorFormat** DimColor);
        [id(0x000007d4), propget, helpcontext(0x00089f0c)]
        HRESULT SoundEffect([out, retval] SoundEffect** SoundEffect);
        [id(0x000007d5), propget, helpcontext(0x00089f0d)]
        HRESULT EntryEffect([out, retval] PpEntryEffect* EntryEffect);
        [id(0x000007d5), propput, helpcontext(0x00089f0d)]
        HRESULT EntryEffect([in] PpEntryEffect EntryEffect);
        [id(0x000007d6), propget, helpcontext(0x00089f0e)]
        HRESULT AfterEffect([out, retval] PpAfterEffect* AfterEffect);
        [id(0x000007d6), propput, helpcontext(0x00089f0e)]
        HRESULT AfterEffect([in] PpAfterEffect AfterEffect);
        [id(0x000007d7), propget, helpcontext(0x00089f0f)]
        HRESULT AnimationOrder([out, retval] int* AnimationOrder);
        [id(0x000007d7), propput, helpcontext(0x00089f0f)]
        HRESULT AnimationOrder([in] int AnimationOrder);
        [id(0x000007d8), propget, helpcontext(0x00089f10)]
        HRESULT AdvanceMode([out, retval] PpAdvanceMode* AdvanceMode);
        [id(0x000007d8), propput, helpcontext(0x00089f10)]
        HRESULT AdvanceMode([in] PpAdvanceMode AdvanceMode);
        [id(0x000007d9), propget, helpcontext(0x00089f11)]
        HRESULT AdvanceTime([out, retval] single* AdvanceTime);
        [id(0x000007d9), propput, helpcontext(0x00089f11)]
        HRESULT AdvanceTime([in] single AdvanceTime);
        [id(0x000007da), propget, helpcontext(0x00089f12)]
        HRESULT PlaySettings([out, retval] PlaySettings** PlaySettings);
        [id(0x000007db), propget, helpcontext(0x00089f13)]
        HRESULT TextLevelEffect([out, retval] PpTextLevelEffect* TextLevelEffect);
        [id(0x000007db), propput, helpcontext(0x00089f13)]
        HRESULT TextLevelEffect([in] PpTextLevelEffect TextLevelEffect);
        [id(0x000007dc), propget, helpcontext(0x00089f14)]
        HRESULT TextUnitEffect([out, retval] PpTextUnitEffect* TextUnitEffect);
        [id(0x000007dc), propput, helpcontext(0x00089f14)]
        HRESULT TextUnitEffect([in] PpTextUnitEffect TextUnitEffect);
        [id(0x000007dd), propget, helpcontext(0x00089f15)]
        HRESULT Animate([out, retval] MsoTriState* Animate);
        [id(0x000007dd), propput, helpcontext(0x00089f15)]
        HRESULT Animate([in] MsoTriState Animate);
        [id(0x000007de), propget, helpcontext(0x00089f16)]
        HRESULT AnimateBackground([out, retval] MsoTriState* AnimateBackground);
        [id(0x000007de), propput, helpcontext(0x00089f16)]
        HRESULT AnimateBackground([in] MsoTriState AnimateBackground);
        [id(0x000007df), propget, helpcontext(0x00089f17)]
        HRESULT AnimateTextInReverse([out, retval] MsoTriState* AnimateTextInReverse);
        [id(0x000007df), propput, helpcontext(0x00089f17)]
        HRESULT AnimateTextInReverse([in] MsoTriState AnimateTextInReverse);
        [id(0x000007e0), propget, helpcontext(0x00089f18)]
        HRESULT ChartUnitEffect([out, retval] PpChartUnitEffect* ChartUnitEffect);
        [id(0x000007e0), propput, helpcontext(0x00089f18)]
        HRESULT ChartUnitEffect([in] PpChartUnitEffect ChartUnitEffect);
    };

    [
      odl,
      uuid(9149348C-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008a2f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ActionSettings : Collection {
        [id(0x000007d1), propget, helpcontext(0x0008a2f1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008a2f2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0008a2f3),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] PpMouseActivation Index,
                        [out, retval] ActionSetting** Item);
    };

    [
      odl,
      uuid(9149348D-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008a6d8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ActionSetting : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008a6d9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008a6da)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008a6db)]
        HRESULT Action([out, retval] PpActionType* Action);
        [id(0x000007d3), propput, helpcontext(0x0008a6db)]
        HRESULT Action([in] PpActionType Action);
        [id(0x000007d4), propget, helpcontext(0x0008a6dc)]
        HRESULT ActionVerb([out, retval] BSTR* ActionVerb);
        [id(0x000007d4), propput, helpcontext(0x0008a6dc)]
        HRESULT ActionVerb([in] BSTR ActionVerb);
        [id(0x000007d5), propget, helpcontext(0x0008a6dd)]
        HRESULT AnimateAction([out, retval] MsoTriState* AnimateAction);
        [id(0x000007d5), propput, helpcontext(0x0008a6dd)]
        HRESULT AnimateAction([in] MsoTriState AnimateAction);
        [id(0x000007d6), propget, helpcontext(0x0008a6de)]
        HRESULT Run([out, retval] BSTR* Run);
        [id(0x000007d6), propput, helpcontext(0x0008a6de)]
        HRESULT Run([in] BSTR Run);
        [id(0x000007d7), propget, helpcontext(0x0008a6df)]
        HRESULT SlideShowName([out, retval] BSTR* SlideShowName);
        [id(0x000007d7), propput, helpcontext(0x0008a6df)]
        HRESULT SlideShowName([in] BSTR SlideShowName);
        [id(0x000007d8), propget, helpcontext(0x0008a6e0)]
        HRESULT Hyperlink([out, retval] Hyperlink** Hyperlink);
        [id(0x000007d9), propget, helpcontext(0x0008a6e1)]
        HRESULT SoundEffect([out, retval] SoundEffect** SoundEffect);
        [id(0x000007da), propget, helpcontext(0x0008a6e2)]
        HRESULT ShowAndReturn([out, retval] MsoTriState* ShowAndReturn);
        [id(0x000007da), propput, helpcontext(0x0008a6e2)]
        HRESULT ShowAndReturn([in] MsoTriState ShowAndReturn);
    };

    [
      odl,
      uuid(9149348E-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008aac0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PlaySettings : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008aac1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008aac2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008aac3)]
        HRESULT ActionVerb([out, retval] BSTR* ActionVerb);
        [id(0x000007d3), propput, helpcontext(0x0008aac3)]
        HRESULT ActionVerb([in] BSTR ActionVerb);
        [id(0x000007d4), propget, helpcontext(0x0008aac4)]
        HRESULT HideWhileNotPlaying([out, retval] MsoTriState* HideWhileNotPlaying);
        [id(0x000007d4), propput, helpcontext(0x0008aac4)]
        HRESULT HideWhileNotPlaying([in] MsoTriState HideWhileNotPlaying);
        [id(0x000007d5), propget, helpcontext(0x0008aac5)]
        HRESULT LoopUntilStopped([out, retval] MsoTriState* LoopUntilStopped);
        [id(0x000007d5), propput, helpcontext(0x0008aac5)]
        HRESULT LoopUntilStopped([in] MsoTriState LoopUntilStopped);
        [id(0x000007d6), propget, helpcontext(0x0008aac6)]
        HRESULT PlayOnEntry([out, retval] MsoTriState* PlayOnEntry);
        [id(0x000007d6), propput, helpcontext(0x0008aac6)]
        HRESULT PlayOnEntry([in] MsoTriState PlayOnEntry);
        [id(0x000007d7), propget, helpcontext(0x0008aac7)]
        HRESULT RewindMovie([out, retval] MsoTriState* RewindMovie);
        [id(0x000007d7), propput, helpcontext(0x0008aac7)]
        HRESULT RewindMovie([in] MsoTriState RewindMovie);
        [id(0x000007d8), propget, helpcontext(0x0008aac8)]
        HRESULT PauseAnimation([out, retval] MsoTriState* PauseAnimation);
        [id(0x000007d8), propput, helpcontext(0x0008aac8)]
        HRESULT PauseAnimation([in] MsoTriState PauseAnimation);
        [id(0x000007d9), propget, helpcontext(0x0008aac9)]
        HRESULT StopAfterSlides([out, retval] int* StopAfterSlides);
        [id(0x000007d9), propput, helpcontext(0x0008aac9)]
        HRESULT StopAfterSlides([in] int StopAfterSlides);
    };

    [
      odl,
      uuid(9149348F-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008aea8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextRange : Collection {
        [id(0x000007d1), propget, helpcontext(0x0008aea9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008aeaa)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008aeab)]
        HRESULT ActionSettings([out, retval] ActionSettings** ActionSettings);
        [id(0x000007d4), propget, helpcontext(0x0008aeac)]
        HRESULT Start([out, retval] long* Start);
        [id(0x000007d5), propget, helpcontext(0x0008aead)]
        HRESULT Length([out, retval] long* Length);
        [id(0x000007d6), propget, helpcontext(0x0008aeae)]
        HRESULT BoundLeft([out, retval] single* BoundLeft);
        [id(0x000007d7), propget, helpcontext(0x0008aeaf)]
        HRESULT BoundTop([out, retval] single* BoundTop);
        [id(0x000007d8), propget, helpcontext(0x0008aeb0)]
        HRESULT BoundWidth([out, retval] single* BoundWidth);
        [id(0x000007d9), propget, helpcontext(0x0008aeb1)]
        HRESULT BoundHeight([out, retval] single* BoundHeight);
        [id(0x000007da), helpcontext(0x0008aeb2)]
        HRESULT Paragraphs(
                        [in, optional, defaultvalue(-1)] int Start,
                        [in, optional, defaultvalue(-1)] int Length,
                        [out, retval] TextRange** Paragraphs);
        [id(0x000007db), helpcontext(0x0008aeb3)]
        HRESULT Sentences(
                        [in, optional, defaultvalue(-1)] int Start,
                        [in, optional, defaultvalue(-1)] int Length,
                        [out, retval] TextRange** Sentences);
        [id(0x000007dc), helpcontext(0x0008aeb4)]
        HRESULT Words(
                        [in, optional, defaultvalue(-1)] int Start,
                        [in, optional, defaultvalue(-1)] int Length,
                        [out, retval] TextRange** Words);
        [id(0x000007dd), helpcontext(0x0008aeb5)]
        HRESULT Characters(
                        [in, optional, defaultvalue(-1)] int Start,
                        [in, optional, defaultvalue(-1)] int Length,
                        [out, retval] TextRange** Characters);
        [id(0x000007de), helpcontext(0x0008aeb6)]
        HRESULT Lines(
                        [in, optional, defaultvalue(-1)] int Start,
                        [in, optional, defaultvalue(-1)] int Length,
                        [out, retval] TextRange** Lines);
        [id(0x000007df), helpcontext(0x0008aeb7)]
        HRESULT Runs(
                        [in, optional, defaultvalue(-1)] int Start,
                        [in, optional, defaultvalue(-1)] int Length,
                        [out, retval] TextRange** Runs);
        [id(0x000007e0), helpcontext(0x0008aeb8)]
        HRESULT TrimText([out, retval] TextRange** TrimText);
        [id(00000000), propget, helpcontext(0x0008aeb9)]
        HRESULT Text([out, retval] BSTR* Text);
        [id(00000000), propput, helpcontext(0x0008aeb9)]
        HRESULT Text([in] BSTR Text);
        [id(0x000007e1), helpcontext(0x0008aeba)]
        HRESULT InsertAfter(
                        [in, optional, defaultvalue("")] BSTR NewText,
                        [out, retval] TextRange** After);
        [id(0x000007e2), helpcontext(0x0008aebb)]
        HRESULT InsertBefore(
                        [in, optional, defaultvalue("")] BSTR NewText,
                        [out, retval] TextRange** Before);
        [id(0x000007e3), helpcontext(0x0008aebc)]
        HRESULT InsertDateTime(
                        [in] PpDateTimeFormat DateTimeFormat,
                        [in, optional, defaultvalue(0)] MsoTriState InsertAsField,
                        [out, retval] TextRange** DateTime);
        [id(0x000007e4), helpcontext(0x0008aebd)]
        HRESULT InsertSlideNumber([out, retval] TextRange** SlideNumber);
        [id(0x000007e5), helpcontext(0x0008aebe)]
        HRESULT InsertSymbol(
                        [in] BSTR FontName,
                        [in] int CharNumber,
                        [in, optional, defaultvalue(0)] MsoTriState Unicode,
                        [out, retval] TextRange** Symbol);
        [id(0x000007e6), propget, helpcontext(0x0008aebf)]
        HRESULT Font([out, retval] Font** Font);
        [id(0x000007e7), propget, helpcontext(0x0008aec0)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** ParagraphFormat);
        [id(0x000007e8), propget, helpcontext(0x0008aec1)]
        HRESULT IndentLevel([out, retval] int* IndentLevel);
        [id(0x000007e8), propput, helpcontext(0x0008aec1)]
        HRESULT IndentLevel([in] int IndentLevel);
        [id(0x000007e9), helpcontext(0x0008aec2)]
        HRESULT Select();
        [id(0x000007ea), helpcontext(0x0008aec3)]
        HRESULT Cut();
        [id(0x000007eb), helpcontext(0x0008aec4)]
        HRESULT Copy();
        [id(0x000007ec), helpcontext(0x0008aec5)]
        HRESULT Delete();
        [id(0x000007ed), helpcontext(0x0008aec6)]
        HRESULT Paste([out, retval] TextRange** Paste);
        [id(0x000007ee), helpcontext(0x0008aec7)]
        HRESULT ChangeCase([in] PpChangeCase Type);
        [id(0x000007ef), helpcontext(0x0008aec8)]
        HRESULT AddPeriods();
        [id(0x000007f0), helpcontext(0x0008aec9)]
        HRESULT RemovePeriods();
        [id(0x000007f1), helpcontext(0x0008aeca)]
        HRESULT Find(
                        [in] BSTR FindWhat,
                        [in, optional, defaultvalue(0)] int After,
                        [in, optional, defaultvalue(0)] MsoTriState MatchCase,
                        [in, optional, defaultvalue(0)] MsoTriState WholeWords,
                        [out, retval] TextRange** Find);
        [id(0x000007f2), helpcontext(0x0008aecb)]
        HRESULT Replace(
                        [in] BSTR FindWhat,
                        [in] BSTR ReplaceWhat,
                        [in, optional, defaultvalue(0)] int After,
                        [in, optional, defaultvalue(0)] MsoTriState MatchCase,
                        [in, optional, defaultvalue(0)] MsoTriState WholeWords,
                        [out, retval] TextRange** Replace);
        [id(0x000007f3), helpcontext(0x0008aecc)]
        HRESULT RotatedBounds(
                        [out] single* X1,
                        [out] single* Y1,
                        [out] single* X2,
                        [out] single* Y2,
                        [out] single* X3,
                        [out] single* Y3,
                        [out] single* x4,
                        [out] single* y4);
        [id(0x000007f4), propget, helpcontext(0x0008aecd)]
        HRESULT LanguageID([out, retval] MsoLanguageID* LanguageID);
        [id(0x000007f4), propput, helpcontext(0x0008aecd)]
        HRESULT LanguageID([in] MsoLanguageID LanguageID);
        [id(0x000007f5), helpcontext(0x0008aece)]
        HRESULT RtlRun();
        [id(0x000007f6), helpcontext(0x0008aecf)]
        HRESULT LtrRun();
        [id(0x000007f7), helpcontext(0x0008aed0)]
        HRESULT PasteSpecial(
                        [in, optional, defaultvalue(0)] PpPasteDataType DataType,
                        [in, optional, defaultvalue(0)] MsoTriState DisplayAsIcon,
                        [in, optional, defaultvalue("")] BSTR IconFileName,
                        [in, optional, defaultvalue(0)] int IconIndex,
                        [in, optional, defaultvalue("")] BSTR IconLabel,
                        [in, optional, defaultvalue(0)] MsoTriState Link,
                        [out, retval] TextRange** PasteSpecial);
    };

    [
      odl,
      uuid(91493490-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008b290),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Ruler : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008b291)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008b292)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008b293)]
        HRESULT TabStops([out, retval] TabStops** TabStops);
        [id(0x000007d4), propget, helpcontext(0x0008b294)]
        HRESULT Levels([out, retval] RulerLevels** Levels);
    };

    [
      odl,
      uuid(91493491-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008b678),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RulerLevels : Collection {
        [id(0x000007d1), propget, helpcontext(0x0008b679)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008b67a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0008b67b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] RulerLevel** Item);
    };

    [
      odl,
      uuid(91493492-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008ba60),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RulerLevel : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008ba61)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008ba62)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008ba63)]
        HRESULT FirstMargin([out, retval] single* FirstMargin);
        [id(0x000007d3), propput, helpcontext(0x0008ba63)]
        HRESULT FirstMargin([in] single FirstMargin);
        [id(0x000007d4), propget, helpcontext(0x0008ba64)]
        HRESULT LeftMargin([out, retval] single* LeftMargin);
        [id(0x000007d4), propput, helpcontext(0x0008ba64)]
        HRESULT LeftMargin([in] single LeftMargin);
    };

    [
      odl,
      uuid(91493493-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008be48),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStops : Collection {
        [id(0x000007d1), propget, helpcontext(0x0008be49)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008be4a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0008be4b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] TabStop** Item);
        [id(0x000007d3), propget, helpcontext(0x0008be4c)]
        HRESULT DefaultSpacing([out, retval] single* DefaultSpacing);
        [id(0x000007d3), propput, helpcontext(0x0008be4c)]
        HRESULT DefaultSpacing([in] single DefaultSpacing);
        [id(0x000007d4), helpcontext(0x0008be4d)]
        HRESULT Add(
                        [in] PpTabStopType Type,
                        [in] single Position,
                        [out, retval] TabStop** Add);
    };

    [
      odl,
      uuid(91493494-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008c230),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStop : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008c231)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008c232)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008c233)]
        HRESULT Type([out, retval] PpTabStopType* Type);
        [id(0x000007d3), propput, helpcontext(0x0008c233)]
        HRESULT Type([in] PpTabStopType Type);
        [id(0x000007d4), propget, helpcontext(0x0008c234)]
        HRESULT Position([out, retval] single* Position);
        [id(0x000007d4), propput, helpcontext(0x0008c234)]
        HRESULT Position([in] single Position);
        [id(0x000007d5), helpcontext(0x0008c235)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(91493495-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008c618),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Font : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008c619)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008c61a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008c61b)]
        HRESULT Color([out, retval] ColorFormat** Color);
        [id(0x000007d4), propget, helpcontext(0x0008c61c)]
        HRESULT Bold([out, retval] MsoTriState* Bold);
        [id(0x000007d4), propput, helpcontext(0x0008c61c)]
        HRESULT Bold([in] MsoTriState Bold);
        [id(0x000007d5), propget, helpcontext(0x0008c61d)]
        HRESULT Italic([out, retval] MsoTriState* Italic);
        [id(0x000007d5), propput, helpcontext(0x0008c61d)]
        HRESULT Italic([in] MsoTriState Italic);
        [id(0x000007d6), propget, helpcontext(0x0008c61e)]
        HRESULT Shadow([out, retval] MsoTriState* Shadow);
        [id(0x000007d6), propput, helpcontext(0x0008c61e)]
        HRESULT Shadow([in] MsoTriState Shadow);
        [id(0x000007d7), propget, helpcontext(0x0008c61f)]
        HRESULT Emboss([out, retval] MsoTriState* Emboss);
        [id(0x000007d7), propput, helpcontext(0x0008c61f)]
        HRESULT Emboss([in] MsoTriState Emboss);
        [id(0x000007d8), propget, helpcontext(0x0008c620)]
        HRESULT Underline([out, retval] MsoTriState* Underline);
        [id(0x000007d8), propput, helpcontext(0x0008c620)]
        HRESULT Underline([in] MsoTriState Underline);
        [id(0x000007d9), propget, helpcontext(0x0008c621)]
        HRESULT Subscript([out, retval] MsoTriState* Subscript);
        [id(0x000007d9), propput, helpcontext(0x0008c621)]
        HRESULT Subscript([in] MsoTriState Subscript);
        [id(0x000007da), propget, helpcontext(0x0008c622)]
        HRESULT Superscript([out, retval] MsoTriState* Superscript);
        [id(0x000007da), propput, helpcontext(0x0008c622)]
        HRESULT Superscript([in] MsoTriState Superscript);
        [id(0x000007db), propget, helpcontext(0x0008c623)]
        HRESULT BaselineOffset([out, retval] single* BaselineOffset);
        [id(0x000007db), propput, helpcontext(0x0008c623)]
        HRESULT BaselineOffset([in] single BaselineOffset);
        [id(0x000007dc), propget, helpcontext(0x0008c624)]
        HRESULT Embedded([out, retval] MsoTriState* Embedded);
        [id(0x000007dd), propget, helpcontext(0x0008c625)]
        HRESULT Embeddable([out, retval] MsoTriState* Embeddable);
        [id(0x000007de), propget, helpcontext(0x0008c626)]
        HRESULT Size([out, retval] single* Size);
        [id(0x000007de), propput, helpcontext(0x0008c626)]
        HRESULT Size([in] single Size);
        [id(0x000007df), propget, helpcontext(0x0008c627)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007df), propput, helpcontext(0x0008c627)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007e0), propget, helpcontext(0x0008c628)]
        HRESULT NameFarEast([out, retval] BSTR* NameFarEast);
        [id(0x000007e0), propput, helpcontext(0x0008c628)]
        HRESULT NameFarEast([in] BSTR NameFarEast);
        [id(0x000007e1), propget, helpcontext(0x0008c629)]
        HRESULT NameAscii([out, retval] BSTR* NameAscii);
        [id(0x000007e1), propput, helpcontext(0x0008c629)]
        HRESULT NameAscii([in] BSTR NameAscii);
        [id(0x000007e2), propget, helpcontext(0x0008c62a)]
        HRESULT AutoRotateNumbers([out, retval] MsoTriState* AutoRotateNumbers);
        [id(0x000007e2), propput, helpcontext(0x0008c62a)]
        HRESULT AutoRotateNumbers([in] MsoTriState AutoRotateNumbers);
        [id(0x000007e3), propget, helpcontext(0x0008c62b)]
        HRESULT NameOther([out, retval] BSTR* NameOther);
        [id(0x000007e3), propput, helpcontext(0x0008c62b)]
        HRESULT NameOther([in] BSTR NameOther);
        [id(0x000007e4), propget, helpcontext(0x0008c62c)]
        HRESULT NameComplexScript([out, retval] BSTR* NameComplexScript);
        [id(0x000007e4), propput, helpcontext(0x0008c62c)]
        HRESULT NameComplexScript([in] BSTR NameComplexScript);
    };

    [
      odl,
      uuid(91493496-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008ca00),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ParagraphFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008ca01)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008ca02)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008ca03)]
        HRESULT Alignment([out, retval] PpParagraphAlignment* Alignment);
        [id(0x000007d3), propput, helpcontext(0x0008ca03)]
        HRESULT Alignment([in] PpParagraphAlignment Alignment);
        [id(0x000007d4), propget, helpcontext(0x0008ca04)]
        HRESULT Bullet([out, retval] BulletFormat** Bullet);
        [id(0x000007d5), propget, helpcontext(0x0008ca05)]
        HRESULT LineRuleBefore([out, retval] MsoTriState* LineRuleBefore);
        [id(0x000007d5), propput, helpcontext(0x0008ca05)]
        HRESULT LineRuleBefore([in] MsoTriState LineRuleBefore);
        [id(0x000007d6), propget, helpcontext(0x0008ca06)]
        HRESULT LineRuleAfter([out, retval] MsoTriState* LineRuleAfter);
        [id(0x000007d6), propput, helpcontext(0x0008ca06)]
        HRESULT LineRuleAfter([in] MsoTriState LineRuleAfter);
        [id(0x000007d7), propget, helpcontext(0x0008ca07)]
        HRESULT LineRuleWithin([out, retval] MsoTriState* LineRuleWithin);
        [id(0x000007d7), propput, helpcontext(0x0008ca07)]
        HRESULT LineRuleWithin([in] MsoTriState LineRuleWithin);
        [id(0x000007d8), propget, helpcontext(0x0008ca08)]
        HRESULT SpaceBefore([out, retval] single* SpaceBefore);
        [id(0x000007d8), propput, helpcontext(0x0008ca08)]
        HRESULT SpaceBefore([in] single SpaceBefore);
        [id(0x000007d9), propget, helpcontext(0x0008ca09)]
        HRESULT SpaceAfter([out, retval] single* SpaceAfter);
        [id(0x000007d9), propput, helpcontext(0x0008ca09)]
        HRESULT SpaceAfter([in] single SpaceAfter);
        [id(0x000007da), propget, helpcontext(0x0008ca0a)]
        HRESULT SpaceWithin([out, retval] single* SpaceWithin);
        [id(0x000007da), propput, helpcontext(0x0008ca0a)]
        HRESULT SpaceWithin([in] single SpaceWithin);
        [id(0x000007db), propget, helpcontext(0x0008ca0b)]
        HRESULT BaseLineAlignment([out, retval] PpBaselineAlignment* BaseLineAlignment);
        [id(0x000007db), propput, helpcontext(0x0008ca0b)]
        HRESULT BaseLineAlignment([in] PpBaselineAlignment BaseLineAlignment);
        [id(0x000007dc), propget, helpcontext(0x0008ca0c)]
        HRESULT FarEastLineBreakControl([out, retval] MsoTriState* FarEastLineBreakControl);
        [id(0x000007dc), propput, helpcontext(0x0008ca0c)]
        HRESULT FarEastLineBreakControl([in] MsoTriState FarEastLineBreakControl);
        [id(0x000007dd), propget, helpcontext(0x0008ca0d)]
        HRESULT WordWrap([out, retval] MsoTriState* WordWrap);
        [id(0x000007dd), propput, helpcontext(0x0008ca0d)]
        HRESULT WordWrap([in] MsoTriState WordWrap);
        [id(0x000007de), propget, helpcontext(0x0008ca0e)]
        HRESULT HangingPunctuation([out, retval] MsoTriState* HangingPunctuation);
        [id(0x000007de), propput, helpcontext(0x0008ca0e)]
        HRESULT HangingPunctuation([in] MsoTriState HangingPunctuation);
        [id(0x000007df), propget, helpcontext(0x0008ca0f)]
        HRESULT TextDirection([out, retval] PpDirection* TextDirection);
        [id(0x000007df), propput, helpcontext(0x0008ca0f)]
        HRESULT TextDirection([in] PpDirection TextDirection);
    };

    [
      odl,
      uuid(91493497-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008cde8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BulletFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008cde9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008cdea)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), propget, hidden, helpcontext(0x0008cdeb)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(00000000), propput, hidden, helpcontext(0x0008cdeb)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x000007d3), propget, helpcontext(0x0008cdec)]
        HRESULT Character([out, retval] int* Character);
        [id(0x000007d3), propput, helpcontext(0x0008cdec)]
        HRESULT Character([in] int Character);
        [id(0x000007d4), propget, helpcontext(0x0008cded)]
        HRESULT RelativeSize([out, retval] single* RelativeSize);
        [id(0x000007d4), propput, helpcontext(0x0008cded)]
        HRESULT RelativeSize([in] single RelativeSize);
        [id(0x000007d5), propget, helpcontext(0x0008cdee)]
        HRESULT UseTextColor([out, retval] MsoTriState* UseTextColor);
        [id(0x000007d5), propput, helpcontext(0x0008cdee)]
        HRESULT UseTextColor([in] MsoTriState UseTextColor);
        [id(0x000007d6), propget, helpcontext(0x0008cdef)]
        HRESULT UseTextFont([out, retval] MsoTriState* UseTextFont);
        [id(0x000007d6), propput, helpcontext(0x0008cdef)]
        HRESULT UseTextFont([in] MsoTriState UseTextFont);
        [id(0x000007d7), propget, helpcontext(0x0008cdf0)]
        HRESULT Font([out, retval] Font** Font);
        [id(0x000007d8), propget, helpcontext(0x0008cdf1)]
        HRESULT Type([out, retval] PpBulletType* Type);
        [id(0x000007d8), propput, helpcontext(0x0008cdf1)]
        HRESULT Type([in] PpBulletType Type);
        [id(0x000007d9), propget, helpcontext(0x0008cdf2)]
        HRESULT Style([out, retval] PpNumberedBulletStyle* Style);
        [id(0x000007d9), propput, helpcontext(0x0008cdf2)]
        HRESULT Style([in] PpNumberedBulletStyle Style);
        [id(0x000007da), propget, helpcontext(0x0008cdf3)]
        HRESULT StartValue([out, retval] int* StartValue);
        [id(0x000007da), propput, helpcontext(0x0008cdf3)]
        HRESULT StartValue([in] int StartValue);
        [id(0x000007db), helpcontext(0x0008cdf4)]
        HRESULT Picture([in] BSTR Picture);
        [id(0x000007dc), propget, helpcontext(0x0008cdf5)]
        HRESULT Number([out, retval] int* Number);
    };

    [
      odl,
      uuid(91493498-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008d1d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextStyles : Collection {
        [id(0x000007d1), propget, helpcontext(0x0008d1d1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008d1d2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0008d1d3),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] PpTextStyleType Type,
                        [out, retval] TextStyle** Item);
    };

    [
      odl,
      uuid(91493499-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008d5b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextStyle : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008d5b9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008d5ba)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008d5bb)]
        HRESULT Ruler([out, retval] Ruler** Ruler);
        [id(0x000007d4), propget, helpcontext(0x0008d5bc)]
        HRESULT TextFrame([out, retval] TextFrame** TextFrame);
        [id(0x000007d5), propget, helpcontext(0x0008d5bd)]
        HRESULT Levels([out, retval] TextStyleLevels** Levels);
    };

    [
      odl,
      uuid(9149349A-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008d9a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextStyleLevels : Collection {
        [id(0x000007d1), propget, helpcontext(0x0008d9a1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008d9a2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0008d9a3),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Level,
                        [out, retval] TextStyleLevel** Item);
    };

    [
      odl,
      uuid(9149349B-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008dd88),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextStyleLevel : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008dd89)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008dd8a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008dd8b)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** ParagraphFormat);
        [id(0x000007d4), propget, helpcontext(0x0008dd8c)]
        HRESULT Font([out, retval] Font** Font);
    };

    [
      odl,
      uuid(9149349C-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008e170),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeaderFooter : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008e171)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008e172)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008e173)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x000007d3), propput, helpcontext(0x0008e173)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x000007d4), propget, helpcontext(0x0008e174)]
        HRESULT Text([out, retval] BSTR* Text);
        [id(0x000007d4), propput, helpcontext(0x0008e174)]
        HRESULT Text([in] BSTR Text);
        [id(0x000007d5), propget, helpcontext(0x0008e175)]
        HRESULT UseFormat([out, retval] MsoTriState* UseFormat);
        [id(0x000007d5), propput, helpcontext(0x0008e175)]
        HRESULT UseFormat([in] MsoTriState UseFormat);
        [id(0x000007d6), propget, helpcontext(0x0008e176)]
        HRESULT Format([out, retval] PpDateTimeFormat* Format);
        [id(0x000007d6), propput, helpcontext(0x0008e176)]
        HRESULT Format([in] PpDateTimeFormat Format);
    };

    [
      odl,
      uuid(9149349D-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0008e558),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Presentation : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0008e559)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0008e55a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0008e55b)]
        HRESULT SlideMaster([out, retval] _Master** SlideMaster);
        [id(0x000007d4), propget, helpcontext(0x0008e55c)]
        HRESULT TitleMaster([out, retval] _Master** TitleMaster);
        [id(0x000007d5), propget, helpcontext(0x0008e55d)]
        HRESULT HasTitleMaster([out, retval] MsoTriState* HasTitleMaster);
        [id(0x000007d6), helpcontext(0x0008e55e)]
        HRESULT AddTitleMaster([out, retval] _Master** TitleMaster);
        [id(0x000007d7), helpcontext(0x0008e55f)]
        HRESULT ApplyTemplate([in] BSTR FileName);
        [id(0x000007d8), propget, helpcontext(0x0008e560)]
        HRESULT TemplateName([out, retval] BSTR* TemplateName);
        [id(0x000007d9), propget, helpcontext(0x0008e561)]
        HRESULT NotesMaster([out, retval] _Master** NotesMaster);
        [id(0x000007da), propget, helpcontext(0x0008e562)]
        HRESULT HandoutMaster([out, retval] _Master** HandoutMaster);
        [id(0x000007db), propget, helpcontext(0x0008e563)]
        HRESULT Slides([out, retval] Slides** Slides);
        [id(0x000007dc), propget, helpcontext(0x0008e564)]
        HRESULT PageSetup([out, retval] PageSetup** PageSetup);
        [id(0x000007dd), propget, helpcontext(0x0008e565)]
        HRESULT ColorSchemes([out, retval] ColorSchemes** ColorSchemes);
        [id(0x000007de), propget, helpcontext(0x0008e566)]
        HRESULT ExtraColors([out, retval] ExtraColors** ExtraColors);
        [id(0x000007df), propget, helpcontext(0x0008e567)]
        HRESULT SlideShowSettings([out, retval] SlideShowSettings** SlideShowSettings);
        [id(0x000007e0), propget, helpcontext(0x0008e568)]
        HRESULT Fonts([out, retval] Fonts** Fonts);
        [id(0x000007e1), propget, helpcontext(0x0008e569)]
        HRESULT Windows([out, retval] DocumentWindows** Windows);
        [id(0x000007e2), propget, helpcontext(0x0008e56a)]
        HRESULT Tags([out, retval] Tags** Tags);
        [id(0x000007e3), propget, helpcontext(0x0008e56b)]
        HRESULT DefaultShape([out, retval] Shape** DefaultShape);
        [id(0x000007e4), propget, helpcontext(0x0008e56c)]
        HRESULT BuiltInDocumentProperties([out, retval] IDispatch** BuiltInDocumentProperties);
        [id(0x000007e5), propget, helpcontext(0x0008e56d)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** CustomDocumentProperties);
        [id(0x000007e6), propget, helpcontext(0x0008e56e)]
        HRESULT VBProject([out, retval] VBProject** VBProject);
        [id(0x000007e7), propget, helpcontext(0x0008e56f)]
        HRESULT ReadOnly([out, retval] MsoTriState* ReadOnly);
        [id(0x000007e8), propget, helpcontext(0x0008e570)]
        HRESULT FullName([out, retval] BSTR* FullName);
        [id(0x000007e9), propget, helpcontext(0x0008e571)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007ea), propget, helpcontext(0x0008e572)]
        HRESULT Path([out, retval] BSTR* Path);
        [id(0x000007eb), propget, helpcontext(0x0008e573)]
        HRESULT Saved([out, retval] MsoTriState* Saved);
        [id(0x000007eb), propput, helpcontext(0x0008e573)]
        HRESULT Saved([in] MsoTriState Saved);
        [id(0x000007ec), propget, helpcontext(0x0008e574)]
        HRESULT LayoutDirection([out, retval] PpDirection* LayoutDirection);
        [id(0x000007ec), propput, helpcontext(0x0008e574)]
        HRESULT LayoutDirection([in] PpDirection LayoutDirection);
        [id(0x000007ed), helpcontext(0x0008e575)]
        HRESULT NewWindow([out, retval] DocumentWindow** NewWindow);
        [id(0x000007ee), helpcontext(0x0008e576)]
        HRESULT FollowHyperlink(
                        [in] BSTR Address,
                        [in, optional, defaultvalue("")] BSTR SubAddress,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL NewWindow,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL AddHistory,
                        [in, optional, defaultvalue("")] BSTR ExtraInfo,
                        [in, optional, defaultvalue(0)] MsoExtraInfoMethod Method,
                        [in, optional, defaultvalue("")] BSTR HeaderInfo);
        [id(0x000007ef), helpcontext(0x0008e577)]
        HRESULT AddToFavorites();
        [id(0x000007f0), restricted, helpcontext(0x0008e578)]
        HRESULT Unused();
        [id(0x000007f1), propget, helpcontext(0x0008e579)]
        HRESULT PrintOptions([out, retval] PrintOptions** PrintOptions);
        [id(0x000007f2), helpcontext(0x0008e57a)]
        HRESULT PrintOut(
                        [in, optional, defaultvalue(-1)] int From,
                        [in, optional, defaultvalue(-1)] int To,
                        [in, optional, defaultvalue("")] BSTR PrintToFile,
                        [in, optional, defaultvalue(0)] int Copies,
                        [in, optional, defaultvalue(-99)] MsoTriState Collate);
        [id(0x000007f3), helpcontext(0x0008e57b)]
        HRESULT Save();
        [id(0x000007f4), helpcontext(0x0008e57c)]
        HRESULT SaveAs(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(11)] PpSaveAsFileType FileFormat,
                        [in, optional, defaultvalue(-2)] MsoTriState EmbedTrueTypeFonts);
        [id(0x000007f5), helpcontext(0x0008e57d)]
        HRESULT SaveCopyAs(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(11)] PpSaveAsFileType FileFormat,
                        [in, optional, defaultvalue(-2)] MsoTriState EmbedTrueTypeFonts);
        [id(0x000007f6), helpcontext(0x0008e57e)]
        HRESULT Export(
                        [in] BSTR Path,
                        [in] BSTR FilterName,
                        [in, optional, defaultvalue(0)] int ScaleWidth,
                        [in, optional, defaultvalue(0)] int ScaleHeight);
        [id(0x000007f7), helpcontext(0x0008e57f)]
        HRESULT Close();
        [id(0x000007f8), hidden, helpcontext(0x0008e580)]
        HRESULT SetUndoText([in] BSTR Text);
        [id(0x000007f9), propget, helpcontext(0x0008e581)]
        HRESULT Container([out, retval] IDispatch** Container);
        [id(0x000007fa), propget, helpcontext(0x0008e582)]
        HRESULT DisplayComments([out, retval] MsoTriState* DisplayComments);
        [id(0x000007fa), propput, helpcontext(0x0008e582)]
        HRESULT DisplayComments([in] MsoTriState DisplayComments);
        [id(0x000007fb), propget, helpcontext(0x0008e583)]
        HRESULT FarEastLineBreakLevel([out, retval] PpFarEastLineBreakLevel* FarEastLineBreakLevel);
        [id(0x000007fb), propput, helpcontext(0x0008e583)]
        HRESULT FarEastLineBreakLevel([in] PpFarEastLineBreakLevel FarEastLineBreakLevel);
        [id(0x000007fc), propget, helpcontext(0x0008e584)]
        HRESULT NoLineBreakBefore([out, retval] BSTR* NoLineBreakBefore);
        [id(0x000007fc), propput, helpcontext(0x0008e584)]
        HRESULT NoLineBreakBefore([in] BSTR NoLineBreakBefore);
        [id(0x000007fd), propget, helpcontext(0x0008e585)]
        HRESULT NoLineBreakAfter([out, retval] BSTR* NoLineBreakAfter);
        [id(0x000007fd), propput, helpcontext(0x0008e585)]
        HRESULT NoLineBreakAfter([in] BSTR NoLineBreakAfter);
        [id(0x000007fe), helpcontext(0x0008e586)]
        HRESULT UpdateLinks();
        [id(0x000007ff), propget, helpcontext(0x0008e587)]
        HRESULT SlideShowWindow([out, retval] SlideShowWindow** SlideShowWindow);
        [id(0x00000800), propget, helpcontext(0x0008e588)]
        HRESULT FarEastLineBreakLanguage([out, retval] MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage);
        [id(0x00000800), propput, helpcontext(0x0008e588)]
        HRESULT FarEastLineBreakLanguage([in] MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage);
        [id(0x00000801), hidden, helpcontext(0x0008e589)]
        HRESULT WebPagePreview();
        [id(0x00000802), propget, helpcontext(0x0008e58a)]
        HRESULT DefaultLanguageID([out, retval] MsoLanguageID* DefaultLanguageID);
        [id(0x00000802), propput, helpcontext(0x0008e58a)]
        HRESULT DefaultLanguageID([in] MsoLanguageID DefaultLanguageID);
        [id(0x00000803), propget, helpcontext(0x0008e58b)]
        HRESULT CommandBars([out, retval] CommandBars** CommandBars);
        [id(0x00000804), propget, hidden, helpcontext(0x0008e58c)]
        HRESULT PublishObjects([out, retval] PublishObjects** PublishObjects);
        [id(0x00000805), propget, hidden, helpcontext(0x0008e58d)]
        HRESULT WebOptions([out, retval] WebOptions** WebOptions);
        [id(0x00000806), propget, hidden, helpcontext(0x0008e58e)]
        HRESULT HTMLProject([out, retval] HTMLProject** HTMLProject);
        [id(0x00000807), hidden, helpcontext(0x0008e58f)]
        HRESULT ReloadAs([in] MsoEncoding cp);
        [id(0x00000808), hidden, helpcontext(0x0008e590)]
        HRESULT MakeIntoTemplate([in] MsoTriState IsDesignTemplate);
        [id(0x00000809), propget, helpcontext(0x0008e591)]
        HRESULT EnvelopeVisible([out, retval] MsoTriState* EnvelopeVisible);
        [id(0x00000809), propput, helpcontext(0x0008e591)]
        HRESULT EnvelopeVisible([in] MsoTriState EnvelopeVisible);
        [id(0x0000080a), hidden, helpcontext(0x0008e592)]
        HRESULT sblt([in] BSTR s);
        [id(0x0000080b), propget, helpcontext(0x0008e593)]
        HRESULT VBASigned([out, retval] MsoTriState* VBASigned);
        [id(0x0000080d), propget, helpcontext(0x0008e595)]
        HRESULT SnapToGrid([out, retval] MsoTriState* SnapToGrid);
        [id(0x0000080d), propput, helpcontext(0x0008e595)]
        HRESULT SnapToGrid([in] MsoTriState SnapToGrid);
        [id(0x0000080e), propget, helpcontext(0x0008e596)]
        HRESULT GridDistance([out, retval] single* GridDistance);
        [id(0x0000080e), propput, helpcontext(0x0008e596)]
        HRESULT GridDistance([in] single GridDistance);
        [id(0x0000080f), propget, helpcontext(0x0008e597)]
        HRESULT Designs([out, retval] Designs** Designs);
        [id(0x00000810), helpcontext(0x0008e598)]
        HRESULT Merge([in] BSTR Path);
        [id(0x00000811), helpcontext(0x0008e599)]
        HRESULT CheckIn(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SaveChanges,
                        [in, optional] VARIANT Comments,
                        [in, optional] VARIANT MakePublic);
        [id(0x00000812), helpcontext(0x0008e59a)]
        HRESULT CanCheckIn([out, retval] VARIANT_BOOL* CanCheckIn);
        [id(0x00000813), propget, helpcontext(0x0008e59b)]
        HRESULT Signatures([out, retval] SignatureSet** Signatures);
        [id(0x00000814), propget, helpcontext(0x0008e59c)]
        HRESULT RemovePersonalInformation([out, retval] MsoTriState* RemovePersonalInformation);
        [id(0x00000814), propput, helpcontext(0x0008e59c)]
        HRESULT RemovePersonalInformation([in] MsoTriState RemovePersonalInformation);
        [id(0x00000815), hidden, helpcontext(0x0008e59d)]
        HRESULT SendForReview(
                        [in, optional, defaultvalue("")] BSTR Recipients,
                        [in, optional, defaultvalue("")] BSTR Subject,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ShowMessage,
                        [in, optional] VARIANT IncludeAttachment);
        [id(0x00000816), hidden, helpcontext(0x0008e59e)]
        HRESULT ReplyWithChanges([in, optional, defaultvalue(-1)] VARIANT_BOOL ShowMessage);
        [id(0x00000817), helpcontext(0x0008e59f)]
        HRESULT EndReview();
        [id(0x00000818), propget, hidden, helpcontext(0x0008e5a0)]
        HRESULT HasRevisionInfo([out, retval] PpRevisionInfo* HasRevisionInfo);
        [id(0x00000819), hidden, helpcontext(0x0008e5a1)]
        HRESULT AddBaseline([in, optional, defaultvalue("")] BSTR FileName);
        [id(0x0000081a), hidden, helpcontext(0x0008e5a2)]
        HRESULT RemoveBaseline();
        [id(0x0000081b), propget, helpcontext(0x0008e5a3)]
        HRESULT PasswordEncryptionProvider([out, retval] BSTR* PasswordEncryptionProvider);
        [id(0x0000081c), propget, helpcontext(0x0008e5a4)]
        HRESULT PasswordEncryptionAlgorithm([out, retval] BSTR* PasswordEncryptionAlgorithm);
        [id(0x0000081d), propget, helpcontext(0x0008e5a5)]
        HRESULT PasswordEncryptionKeyLength([out, retval] int* PasswordEncryptionKeyLength);
        [id(0x0000081e), propget, helpcontext(0x0008e5a6)]
        HRESULT PasswordEncryptionFileProperties([out, retval] VARIANT_BOOL* PasswordEncryptionFileProperties);
        [id(0x0000081f), helpcontext(0x0008e5a7)]
        HRESULT SetPasswordEncryptionOptions(
                        [in] BSTR PasswordEncryptionProvider,
                        [in] BSTR PasswordEncryptionAlgorithm,
                        [in] int PasswordEncryptionKeyLength,
                        [in] VARIANT_BOOL PasswordEncryptionFileProperties);
        [id(0x00000820), propget, helpcontext(0x0008e5a8)]
        HRESULT Password([out, retval] BSTR* Password);
        [id(0x00000820), propput, helpcontext(0x0008e5a8)]
        HRESULT Password([in] BSTR Password);
        [id(0x00000821), propget, helpcontext(0x0008e5a9)]
        HRESULT WritePassword([out, retval] BSTR* WritePassword);
        [id(0x00000821), propput, helpcontext(0x0008e5a9)]
        HRESULT WritePassword([in] BSTR WritePassword);
        [id(0x00000822), propget, helpcontext(0x0008e5aa)]
        HRESULT Permission([out, retval] Permission** Permission);
        [id(0x00000823), propget, helpcontext(0x0008e5ab)]
        HRESULT SharedWorkspace([out, retval] SharedWorkspace** SharedWorkspace);
        [id(0x00000824), propget, helpcontext(0x0008e5ac)]
        HRESULT Sync([out, retval] Sync** Sync);
        [id(0x00000825), helpcontext(0x0008e5ad)]
        HRESULT SendFaxOverInternet(
                        [in, optional, defaultvalue("")] BSTR Recipients,
                        [in, optional, defaultvalue("")] BSTR Subject,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ShowMessage);
        [id(0x00000826), propget, helpcontext(0x0008e5ae)]
        HRESULT DocumentLibraryVersions([out, retval] DocumentLibraryVersions** DocumentLibraryVersions);
        [id(0x00000827), propget, helpcontext(0x0008e5af)]
        HRESULT ContentTypeProperties([out, retval] MetaProperties** ContentTypeProperties);
        [id(0x00000828), propget, hidden, helpcontext(0x0008e5b0)]
        HRESULT SectionCount([out, retval] int* SectionCount);
        [id(0x00000829), propget, hidden, helpcontext(0x0008e5b1)]
        HRESULT HasSections([out, retval] VARIANT_BOOL* HasSections);
        [id(0x0000082a), hidden, helpcontext(0x0008e5b2)]
        HRESULT NewSectionAfter(
                        [in] int Index,
                        [in] VARIANT_BOOL AfterSlide,
                        [in] BSTR sectionTitle,
                        [out] int* newSectionIndex);
        [id(0x0000082b), hidden, helpcontext(0x0008e5b3)]
        HRESULT DeleteSection([in] int Index);
        [id(0x0000082c), hidden, helpcontext(0x0008e5b4)]
        HRESULT DisableSections();
        [id(0x0000082d), hidden, helpcontext(0x0008e5b5)]
        HRESULT sectionTitle(
                        [in] int Index,
                        [out, retval] BSTR* sectionTitle);
        [id(0x0000082e), helpcontext(0x0008e5b6)]
        HRESULT RemoveDocumentInformation([in] PpRemoveDocInfoType Type);
        [id(0x0000082f), helpcontext(0x0008e5b7)]
        HRESULT CheckInWithVersion(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SaveChanges,
                        [in, optional] VARIANT Comments,
                        [in, optional] VARIANT MakePublic,
                        [in, optional] VARIANT VersionType);
        [id(0x00000830), helpcontext(0x0008e5b8)]
        HRESULT ExportAsFixedFormat(
                        [in] BSTR Path,
                        [in] PpFixedFormatType FixedFormatType,
                        [in, optional, defaultvalue(1)] PpFixedFormatIntent Intent,
                        [in, optional, defaultvalue(0)] MsoTriState FrameSlides,
                        [in, optional, defaultvalue(1)] PpPrintHandoutOrder HandoutOrder,
                        [in, optional, defaultvalue(1)] PpPrintOutputType OutputType,
                        [in, optional, defaultvalue(0)] MsoTriState PrintHiddenSlides,
                        [in, optional, defaultvalue(0)] PrintRange* PrintRange,
                        [in, optional, defaultvalue(1)] PpPrintRangeType RangeType,
                        [in, optional, defaultvalue("")] BSTR SlideShowName,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IncludeDocProperties,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL KeepIRMSettings,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DocStructureTags,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL BitmapMissingFonts,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseISO19005_1,
                        [in, optional] VARIANT ExternalExporter);
        [id(0x00000831), propget, helpcontext(0x0008e5b9)]
        HRESULT ServerPolicy([out, retval] ServerPolicy** ServerPolicy);
        [id(0x00000832), helpcontext(0x0008e5ba)]
        HRESULT GetWorkflowTasks([out, retval] WorkflowTasks** GetWorkflowTasks);
        [id(0x00000833), helpcontext(0x0008e5bb)]
        HRESULT GetWorkflowTemplates([out, retval] WorkflowTemplates** GetWorkflowTemplates);
        [id(0x00000834), helpcontext(0x0008e5bc)]
        HRESULT LockServerFile();
        [id(0x00000835), propget, helpcontext(0x0008e5bd)]
        HRESULT DocumentInspectors([out, retval] DocumentInspectors** DocumentInspectors);
        [id(0x00000836), propget, helpcontext(0x0008e5be)]
        HRESULT HasVBProject([out, retval] VARIANT_BOOL* HasVBProject);
        [id(0x00000837), propget, helpcontext(0x0008e5bf)]
        HRESULT CustomXMLParts([out, retval] CustomXMLParts** CustomXMLParts);
        [id(0x00000838), propget, helpcontext(0x0008e5c0)]
        HRESULT Final([out, retval] VARIANT_BOOL* Final);
        [id(0x00000838), propput, helpcontext(0x0008e5c0)]
        HRESULT Final([in] VARIANT_BOOL Final);
        [id(0x00000839), helpcontext(0x0008e5c1)]
        HRESULT ApplyTheme([in] BSTR themeName);
        [id(0x0000083a), propget, helpcontext(0x0008e5c2)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x0000083b), propget, helpcontext(0x0008e5c3)]
        HRESULT Research([out, retval] Research** Research);
        [id(0x0000083c), helpcontext(0x0008e5c4)]
        HRESULT PublishSlides(
                        [in] BSTR SlideLibraryUrl,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Overwrite,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseSlideOrder);
        [id(0x0000083d), propget, helpcontext(0x0008e5c5)]
        HRESULT EncryptionProvider([out, retval] BSTR* EncryptionProvider);
        [id(0x0000083d), propput, helpcontext(0x0008e5c5)]
        HRESULT EncryptionProvider([in] BSTR EncryptionProvider);
        [id(0x0000083e), hidden, helpcontext(0x0008e5c6)]
        HRESULT Convert();
        [id(0x0000083f), propget, helpcontext(0x0008e5c7)]
        HRESULT SectionProperties([out, retval] SectionProperties** SectionProperties);
        [id(0x00000840), propget, helpcontext(0x0008e5c8)]
        HRESULT Coauthoring([out, retval] Coauthoring** Coauthoring);
        [id(0x00000841), helpcontext(0x0008e5c9)]
        HRESULT MergeWithBaseline(
                        [in] BSTR withPresentation,
                        [in] BSTR baselinePresentation);
        [id(0x00000842), propget, helpcontext(0x0008e5ca)]
        HRESULT InMergeMode([out, retval] VARIANT_BOOL* InMergeMode);
        [id(0x00000843), helpcontext(0x0008e5cb)]
        HRESULT AcceptAll();
        [id(0x00000844), helpcontext(0x0008e5cc)]
        HRESULT RejectAll();
        [id(0x00000845), helpcontext(0x0008e5cd)]
        HRESULT EnsureAllMediaUpgraded();
        [id(0x00000846), propget, helpcontext(0x0008e5ce)]
        HRESULT Broadcast([out, retval] Broadcast** Broadcast);
        [id(0x00000847), propget, helpcontext(0x0008e5cf)]
        HRESULT HasNotesMaster([out, retval] VARIANT_BOOL* HasNotesMaster);
        [id(0x00000848), propget, helpcontext(0x0008e5d0)]
        HRESULT HasHandoutMaster([out, retval] VARIANT_BOOL* HasHandoutMaster);
        [id(0x00000849), helpcontext(0x0008e5d1)]
        HRESULT Convert2([in] BSTR FileName);
        [id(0x0000084a), propget, helpcontext(0x0008e5d2)]
        HRESULT CreateVideoStatus([out, retval] PpMediaTaskStatus* CreateVideoStatus);
        [id(0x0000084b), helpcontext(0x0008e5d3)]
        HRESULT CreateVideo(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL UseTimingsAndNarrations,
                        [in, optional, defaultvalue(5)] int DefaultSlideDuration,
                        [in, optional, defaultvalue(720)] int VertResolution,
                        [in, optional, defaultvalue(30)] int FramesPerSecond,
                        [in, optional, defaultvalue(85)] int Quality);
        [id(0x0000084c), helpcontext(0x0008e5d4)]
        HRESULT ApplyTemplate2(
                        [in] BSTR FileName,
                        [in] BSTR VariantGUID);
        [id(0x0000084d), propget, helpcontext(0x0008e5d5)]
        HRESULT ChartDataPointTrack([out, retval] VARIANT_BOOL* pfChartDataPointTrack);
        [id(0x0000084d), propput, helpcontext(0x0008e5d5)]
        HRESULT ChartDataPointTrack([in] VARIANT_BOOL pfChartDataPointTrack);
        [id(0x0000084e), helpcontext(0x0008e5d6)]
        HRESULT ExportAsFixedFormat2(
                        [in] BSTR Path,
                        [in] PpFixedFormatType FixedFormatType,
                        [in, optional, defaultvalue(1)] PpFixedFormatIntent Intent,
                        [in, optional, defaultvalue(0)] MsoTriState FrameSlides,
                        [in, optional, defaultvalue(1)] PpPrintHandoutOrder HandoutOrder,
                        [in, optional, defaultvalue(1)] PpPrintOutputType OutputType,
                        [in, optional, defaultvalue(0)] MsoTriState PrintHiddenSlides,
                        [in, optional, defaultvalue(0)] PrintRange* PrintRange,
                        [in, optional, defaultvalue(1)] PpPrintRangeType RangeType,
                        [in, optional, defaultvalue("")] BSTR SlideShowName,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IncludeDocProperties,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL KeepIRMSettings,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DocStructureTags,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL BitmapMissingFonts,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseISO19005_1,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IncludeMarkup,
                        [in, optional] VARIANT ExternalExporter);
        [id(0x0000084f), propget, helpcontext(0x0008e5d7)]
        HRESULT Guides([out, retval] Guides** Guides);
    };

    [
      odl,
      uuid(914934B9-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000952b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Tags : Collection {
        [id(0x000007d1), propget, helpcontext(0x000952b9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000952ba)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000952bb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] BSTR Name,
                        [out, retval] BSTR* Item);
        [id(0x000007d3), helpcontext(0x000952bc)]
        HRESULT Add(
                        [in] BSTR Name,
                        [in] BSTR Value);
        [id(0x000007d4), helpcontext(0x000952bd)]
        HRESULT Delete([in] BSTR Name);
        [id(0x000007d5), hidden, helpcontext(0x000952be)]
        HRESULT AddBinary(
                        [in] BSTR Name,
                        [in] BSTR FilePath);
        [id(0x000007d6), hidden, helpcontext(0x000952bf)]
        HRESULT BinaryValue(
                        [in] BSTR Name,
                        [out, retval] long* BinaryValue);
        [id(0x000007d7), helpcontext(0x000952c0)]
        HRESULT Name(
                        [in] int Index,
                        [out, retval] BSTR* Name);
        [id(0x000007d8), helpcontext(0x000952c1)]
        HRESULT Value(
                        [in] int Index,
                        [out, retval] BSTR* Value);
    };

    [
      odl,
      uuid(914934BE-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00096640),
      hidden
    ]
    interface MouseTracker : IUnknown {
        [helpcontext(0x00096641)]
        HRESULT _stdcall OnTrack(
                        [in] single X,
                        [in] single Y);
        [helpcontext(0x00096642)]
        HRESULT _stdcall EndTrack(
                        [in] single X,
                        [in] single Y);
    };

    [
      odl,
      uuid(914934BF-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00096a28),
      hidden
    ]
    interface MouseDownHandler : IUnknown {
        [helpcontext(0x00096a29)]
        HRESULT _stdcall OnMouseDown([in] IUnknown* activeWin);
    };

    [
      odl,
      uuid(914934C0-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00096e10),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface OCXExtender : IDispatch {
        [id(0x80010007), propget, helpcontext(0x00096e11)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x80010007), propput, helpcontext(0x00096e11)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x80010003), propget, helpcontext(0x00096e12)]
        HRESULT Left([out, retval] single* Left);
        [id(0x80010003), propput, helpcontext(0x00096e12)]
        HRESULT Left([in] single Left);
        [id(0x80010004), propget, helpcontext(0x00096e12)]
        HRESULT Top([out, retval] single* Top);
        [id(0x80010004), propput, helpcontext(0x00096e12)]
        HRESULT Top([in] single Top);
        [id(0x80010005), propget, helpcontext(0x00096e12)]
        HRESULT Height([out, retval] single* Height);
        [id(0x80010005), propput, helpcontext(0x00096e12)]
        HRESULT Height([in] single Height);
        [id(0x80010006), propget, helpcontext(0x00096e12)]
        HRESULT Width([out, retval] single* Width);
        [id(0x80010006), propput, helpcontext(0x00096e12)]
        HRESULT Width([in] single Width);
        [id(0x800100e6), propget, helpcontext(0x00096e12)]
        HRESULT ZOrderPosition([out, retval] int* ZOrderPosition);
        [id(0x80010000), propget, helpcontext(0x00096e13)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x80010000), propput, helpcontext(0x00096e13)]
        HRESULT Name([in] BSTR Name);
        [id(0x800100e7), propget, hidden, helpcontext(0x00096e12)]
        HRESULT AltHTML([out, retval] BSTR* AltHTML);
        [id(0x800100e7), propput, hidden, helpcontext(0x00096e12)]
        HRESULT AltHTML([in] BSTR AltHTML);
    };

    [
      odl,
      uuid(914934C1-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000971f8),
      hidden
    ]
    interface OCXExtenderEvents : IDispatch {
                    custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "-2147417888")HRESULT _stdcall GotFocus();
                    custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "-2147417887")HRESULT _stdcall LostFocus();
    };

    [
      uuid(91493446-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000975e0),
      hidden
    ]
    coclass OLEControl {
        [default] interface OCXExtender;
        [default, source] interface OCXExtenderEvents;
    };

    typedef [uuid(16C96DBE-E683-4BAB-9358-58C539857DE2)]
    enum {
        ppBorderTop = 1,
        ppBorderLeft = 2,
        ppBorderBottom = 3,
        ppBorderRight = 4,
        ppBorderDiagonalDown = 5,
        ppBorderDiagonalUp = 6
    } PpBorderType;

    typedef [uuid(24814860-3221-485E-805A-9DB3E4B55775)]
    enum {
        ppHTMLv3 = 1,
        ppHTMLv4 = 2,
        ppHTMLDual = 3,
        ppHTMLAutodetect = 4
    } PpHTMLVersion;

    typedef [uuid(DA5CB2A4-456B-4906-B3FA-5191F98F7068)]
    enum {
        ppPublishAll = 1,
        ppPublishSlideRange = 2,
        ppPublishNamedSlideShow = 3
    } PpPublishSourceType;

    typedef [uuid(66B3A5BE-C68B-42E2-8EF9-A5BD49AF516B)]
    enum {
        ppBulletMixed = -2,
        ppBulletNone = 0,
        ppBulletUnnumbered = 1,
        ppBulletNumbered = 2,
        ppBulletPicture = 3
    } PpBulletType;

    typedef [uuid(63740092-EF1C-4097-8147-D3E7C7A0BE98)]
    enum {
        ppBulletStyleMixed = -2,
        ppBulletAlphaLCPeriod = 0,
        ppBulletAlphaUCPeriod = 1,
        ppBulletArabicParenRight = 2,
        ppBulletArabicPeriod = 3,
        ppBulletRomanLCParenBoth = 4,
        ppBulletRomanLCParenRight = 5,
        ppBulletRomanLCPeriod = 6,
        ppBulletRomanUCPeriod = 7,
        ppBulletAlphaLCParenBoth = 8,
        ppBulletAlphaLCParenRight = 9,
        ppBulletAlphaUCParenBoth = 10,
        ppBulletAlphaUCParenRight = 11,
        ppBulletArabicParenBoth = 12,
        ppBulletArabicPlain = 13,
        ppBulletRomanUCParenBoth = 14,
        ppBulletRomanUCParenRight = 15,
        ppBulletSimpChinPlain = 16,
        ppBulletSimpChinPeriod = 17,
        ppBulletCircleNumDBPlain = 18,
        ppBulletCircleNumWDWhitePlain = 19,
        ppBulletCircleNumWDBlackPlain = 20,
        ppBulletTradChinPlain = 21,
        ppBulletTradChinPeriod = 22,
        ppBulletArabicAlphaDash = 23,
        ppBulletArabicAbjadDash = 24,
        ppBulletHebrewAlphaDash = 25,
        ppBulletKanjiKoreanPlain = 26,
        ppBulletKanjiKoreanPeriod = 27,
        ppBulletArabicDBPlain = 28,
        ppBulletArabicDBPeriod = 29,
        ppBulletThaiAlphaPeriod = 30,
        ppBulletThaiAlphaParenRight = 31,
        ppBulletThaiAlphaParenBoth = 32,
        ppBulletThaiNumPeriod = 33,
        ppBulletThaiNumParenRight = 34,
        ppBulletThaiNumParenBoth = 35,
        ppBulletHindiAlphaPeriod = 36,
        ppBulletHindiNumPeriod = 37,
        ppBulletKanjiSimpChinDBPeriod = 38,
        ppBulletHindiNumParenRight = 39,
        ppBulletHindiAlpha1Period = 40
    } PpNumberedBulletStyle;

    typedef [uuid(8E3D8175-9840-4F3D-9558-ADBCF2339E94)]
    enum {
        ppShapeFormatGIF = 0,
        ppShapeFormatJPG = 1,
        ppShapeFormatPNG = 2,
        ppShapeFormatBMP = 3,
        ppShapeFormatWMF = 4,
        ppShapeFormatEMF = 5
    } PpShapeFormat;

    typedef [uuid(9C5B7379-CE75-4980-8E9B-D0E957AF4A41)]
    enum {
        ppRelativeToSlide = 1,
        ppClipRelativeToSlide = 2,
        ppScaleToFit = 3,
        ppScaleXY = 4
    } PpExportMode;

    [
      odl,
      uuid(914934C2-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000979c8)
    ]
    interface EApplication : IDispatch {
        [helpcontext(0x000979c9)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2001")]
        HRESULT _stdcall WindowSelectionChange([in] Selection* Sel);
        [helpcontext(0x000979ca)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2002")]
        HRESULT _stdcall WindowBeforeRightClick(
                        [in] Selection* Sel,
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000979cb)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2003")]
        HRESULT _stdcall WindowBeforeDoubleClick(
                        [in] Selection* Sel,
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000979cc)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2004")]
        HRESULT _stdcall PresentationClose([in] Presentation* Pres);
        [helpcontext(0x000979cd)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2005")]
        HRESULT _stdcall PresentationSave([in] Presentation* Pres);
        [helpcontext(0x000979ce)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2006")]
        HRESULT _stdcall PresentationOpen([in] Presentation* Pres);
        [helpcontext(0x000979cf)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2007")]
        HRESULT _stdcall NewPresentation([in] Presentation* Pres);
        [helpcontext(0x000979d0)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2008")]
        HRESULT _stdcall PresentationNewSlide([in] Slide* Sld);
        [helpcontext(0x000979d1)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2009")]
        HRESULT _stdcall WindowActivate(
                        [in] Presentation* Pres,
                        [in] DocumentWindow* Wn);
        [helpcontext(0x000979d2)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2010")]
        HRESULT _stdcall WindowDeactivate(
                        [in] Presentation* Pres,
                        [in] DocumentWindow* Wn);
        [helpcontext(0x000979d3)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2011")]
        HRESULT _stdcall SlideShowBegin([in] SlideShowWindow* Wn);
        [helpcontext(0x000979d4)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2012")]
        HRESULT _stdcall SlideShowNextBuild([in] SlideShowWindow* Wn);
        [helpcontext(0x000979d5)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2013")]
        HRESULT _stdcall SlideShowNextSlide([in] SlideShowWindow* Wn);
        [helpcontext(0x000979d6)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2014")]
        HRESULT _stdcall SlideShowEnd([in] Presentation* Pres);
        [helpcontext(0x000979d7)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2015")]
        HRESULT _stdcall PresentationPrint([in] Presentation* Pres);
        [helpcontext(0x000979d8)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2016")]
        HRESULT _stdcall SlideSelectionChanged([in] SlideRange* SldRange);
        [helpcontext(0x000979d9)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2017")]
        HRESULT _stdcall ColorSchemeChanged([in] SlideRange* SldRange);
        [helpcontext(0x000979da)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2018")]
        HRESULT _stdcall PresentationBeforeSave(
                        [in] Presentation* Pres,
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000979db)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2019")]
        HRESULT _stdcall SlideShowNextClick(
                        [in] SlideShowWindow* Wn,
                        [in] Effect* nEffect);
        [helpcontext(0x000979dc)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2020")]
        HRESULT _stdcall AfterNewPresentation([in] Presentation* Pres);
        [helpcontext(0x000979dd)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2021")]
        HRESULT _stdcall AfterPresentationOpen([in] Presentation* Pres);
        [helpcontext(0x000979de)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2022")]
        HRESULT _stdcall PresentationSync(
                        [in] Presentation* Pres,
                        [in] MsoSyncEventType SyncEventType);
        [helpcontext(0x000979df)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2023")]
        HRESULT _stdcall SlideShowOnNext([in] SlideShowWindow* Wn);
        [helpcontext(0x000979e0)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2024")]
        HRESULT _stdcall SlideShowOnPrevious([in] SlideShowWindow* Wn);
        [helpcontext(0x000979e1)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2025")]
        HRESULT _stdcall PresentationBeforeClose(
                        [in] Presentation* Pres,
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000979e2)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2026")]
        HRESULT _stdcall ProtectedViewWindowOpen([in] ProtectedViewWindow* ProtViewWindow);
        [helpcontext(0x000979e3)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2027")]
        HRESULT _stdcall ProtectedViewWindowBeforeEdit(
                        [in] ProtectedViewWindow* ProtViewWindow,
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000979e4)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2028")]
        HRESULT _stdcall ProtectedViewWindowBeforeClose(
                        [in] ProtectedViewWindow* ProtViewWindow,
                        [in] PpProtectedViewCloseReason ProtectedViewCloseReason,
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000979e5)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2029")]
        HRESULT _stdcall ProtectedViewWindowActivate([in] ProtectedViewWindow* ProtViewWindow);
        [helpcontext(0x000979e6)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2030")]
        HRESULT _stdcall ProtectedViewWindowDeactivate([in] ProtectedViewWindow* ProtViewWindow);
        [helpcontext(0x000979e7)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2031")]
        HRESULT _stdcall PresentationCloseFinal([in] Presentation* Pres);
        [helpcontext(0x000979e8)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2032")]
        HRESULT _stdcall AfterDragDropOnSlide(
                        [in] Slide* Sld,
                        [in] single X,
                        [in] single Y);
        [helpcontext(0x000979e9)            custom({CD2BC5C9-F452-4326-B714-F9C539D4DA58}, "2033")]
        HRESULT _stdcall AfterShapeSizeChange([in] Shape* shp);
    };

    [
      odl,
      uuid(914934C3-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00097db0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Table : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00097db1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00097db2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00097db3)]
        HRESULT Columns([out, retval] Columns** Columns);
        [id(0x000007d4), propget, helpcontext(0x00097db4)]
        HRESULT Rows([out, retval] Rows** Rows);
        [id(0x000007d5), helpcontext(0x00097db5)]
        HRESULT Cell(
                        [in] int Row,
                        [in] int Column,
                        [out, retval] Cell** Cell);
        [id(0x000007d6), propget, helpcontext(0x00097db6)]
        HRESULT TableDirection([out, retval] PpDirection* TableDirection);
        [id(0x000007d6), propput, helpcontext(0x00097db6)]
        HRESULT TableDirection([in] PpDirection TableDirection);
        [id(0x000007d7), hidden, helpcontext(0x00097db7)]
        HRESULT MergeBorders();
        [id(0x000007d8), propget, helpcontext(0x00097db8)]
        HRESULT FirstRow([out, retval] VARIANT_BOOL* FirstRow);
        [id(0x000007d8), propput, helpcontext(0x00097db8)]
        HRESULT FirstRow([in] VARIANT_BOOL FirstRow);
        [id(0x000007d9), propget, helpcontext(0x00097db9)]
        HRESULT LastRow([out, retval] VARIANT_BOOL* LastRow);
        [id(0x000007d9), propput, helpcontext(0x00097db9)]
        HRESULT LastRow([in] VARIANT_BOOL LastRow);
        [id(0x000007da), propget, helpcontext(0x00097dba)]
        HRESULT FirstCol([out, retval] VARIANT_BOOL* FirstCol);
        [id(0x000007da), propput, helpcontext(0x00097dba)]
        HRESULT FirstCol([in] VARIANT_BOOL FirstCol);
        [id(0x000007db), propget, helpcontext(0x00097dbb)]
        HRESULT LastCol([out, retval] VARIANT_BOOL* LastCol);
        [id(0x000007db), propput, helpcontext(0x00097dbb)]
        HRESULT LastCol([in] VARIANT_BOOL LastCol);
        [id(0x000007dc), propget, helpcontext(0x00097dbc)]
        HRESULT HorizBanding([out, retval] VARIANT_BOOL* HorizBanding);
        [id(0x000007dc), propput, helpcontext(0x00097dbc)]
        HRESULT HorizBanding([in] VARIANT_BOOL HorizBanding);
        [id(0x000007dd), propget, helpcontext(0x00097dbd)]
        HRESULT VertBanding([out, retval] VARIANT_BOOL* VertBanding);
        [id(0x000007dd), propput, helpcontext(0x00097dbd)]
        HRESULT VertBanding([in] VARIANT_BOOL VertBanding);
        [id(0x000007de), propget, helpcontext(0x00097dbe)]
        HRESULT Style([out, retval] TableStyle** Style);
        [id(0x000007df), propget, helpcontext(0x00097dbf)]
        HRESULT Background([out, retval] TableBackground** Background);
        [id(0x000007e0), helpcontext(0x00097dc0)]
        HRESULT ScaleProportionally([in] single scale);
        [id(0x000007e1), helpcontext(0x00097dc1)]
        HRESULT ApplyStyle(
                        [in, optional, defaultvalue("")] BSTR StyleID,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL SaveFormatting);
        [id(0x000007e2), propget, helpcontext(0x00097dc2)]
        HRESULT AlternativeText([out, retval] BSTR* AlternativeText);
        [id(0x000007e2), propput, helpcontext(0x00097dc2)]
        HRESULT AlternativeText([in] BSTR AlternativeText);
        [id(0x000007e3), propget, helpcontext(0x00097dc3)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x000007e3), propput, helpcontext(0x00097dc3)]
        HRESULT Title([in] BSTR Title);
    };

    [
      odl,
      uuid(914934C4-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00098198),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Columns : Collection {
        [id(0x000007d1), propget, helpcontext(0x00098199)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009819a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009819b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Column** Item);
        [id(0x000007d3), helpcontext(0x0009819c)]
        HRESULT Add(
                        [in, optional, defaultvalue(-1)] int BeforeColumn,
                        [out, retval] Column** Add);
    };

    [
      odl,
      uuid(914934C5-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00098580),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Column : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00098581)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00098582)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00098583)]
        HRESULT Cells([out, retval] CellRange** Cells);
        [id(0x000007d4), helpcontext(0x00098584)]
        HRESULT Select();
        [id(0x000007d5), helpcontext(0x00098585)]
        HRESULT Delete();
        [id(0x000007d6), propget, helpcontext(0x00098586)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007d6), propput, helpcontext(0x00098586)]
        HRESULT Width([in] single Width);
    };

    [
      odl,
      uuid(914934C6-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00098968),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rows : Collection {
        [id(0x000007d1), propget, helpcontext(0x00098969)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009896a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009896b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Row** Item);
        [id(0x000007d3), helpcontext(0x0009896c)]
        HRESULT Add(
                        [in, optional, defaultvalue(-1)] int BeforeRow,
                        [out, retval] Row** Add);
    };

    [
      odl,
      uuid(914934C7-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00098d50),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Row : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00098d51)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00098d52)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00098d53)]
        HRESULT Cells([out, retval] CellRange** Cells);
        [id(0x000007d4), helpcontext(0x00098d54)]
        HRESULT Select();
        [id(0x000007d5), helpcontext(0x00098d55)]
        HRESULT Delete();
        [id(0x000007d6), propget, helpcontext(0x00098d56)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007d6), propput, helpcontext(0x00098d56)]
        HRESULT Height([in] single Height);
    };

    [
      odl,
      uuid(914934C8-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00099138),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CellRange : Collection {
        [id(0x000007d1), propget, helpcontext(0x00099139)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009913a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009913b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Cell** Item);
        [id(0x000007d3), propget, helpcontext(0x0009913c)]
        HRESULT Borders([out, retval] Borders** Borders);
    };

    [
      odl,
      uuid(914934C9-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00099520),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Cell : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x00099521)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x00099522)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x00099523)]
        HRESULT Shape([out, retval] Shape** Shape);
        [id(0x000007d4), propget, helpcontext(0x00099524)]
        HRESULT Borders([out, retval] Borders** Borders);
        [id(0x000007d5), helpcontext(0x00099525)]
        HRESULT Merge([in] Cell* MergeTo);
        [id(0x000007d6), helpcontext(0x00099526)]
        HRESULT Split(
                        [in] int NumRows,
                        [in] int NumColumns);
        [id(0x000007d7), helpcontext(0x00099527)]
        HRESULT Select();
        [id(0x000007d8), propget, helpcontext(0x00099528)]
        HRESULT Selected([out, retval] VARIANT_BOOL* Selected);
    };

    [
      odl,
      uuid(914934CA-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00099908),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Borders : Collection {
        [id(0x000007d1), propget, helpcontext(0x00099909)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009990a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009990b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] PpBorderType BorderType,
                        [out, retval] LineFormat** Item);
    };

    [
      odl,
      uuid(914934CB-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x00099cf0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Panes : Collection {
        [id(0x000007d1), propget, helpcontext(0x00099cf1)]
        HRESULT Application([out, retval] Application** Application);
        [id(00000000), helpcontext(0x00099cf2),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Pane** Item);
        [id(0x000007d2), propget, helpcontext(0x00099cf3)]
        HRESULT Parent([out, retval] IDispatch** Parent);
    };

    [
      odl,
      uuid(914934CC-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009a0d8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Pane : IDispatch {
        [id(0x000007d0), propget, helpcontext(0x0009a0d9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d1), helpcontext(0x0009a0da)]
        HRESULT Activate();
        [id(0x000007d2), propget, helpcontext(0x0009a0db)]
        HRESULT Active([out, retval] MsoTriState* Active);
        [id(0x000007d3), propget, helpcontext(0x0009a0dc)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d4), propget, helpcontext(0x0009a0dd)]
        HRESULT ViewType([out, retval] PpViewType* ViewType);
    };

    [
      odl,
      uuid(914934CD-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009a4c0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DefaultWebOptions : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009a4c1)]
        HRESULT IncludeNavigation([out, retval] MsoTriState* IncludeNavigation);
        [id(0x000007d1), propput, helpcontext(0x0009a4c1)]
        HRESULT IncludeNavigation([in] MsoTriState IncludeNavigation);
        [id(0x000007d2), propget, helpcontext(0x0009a4c2)]
        HRESULT FrameColors([out, retval] PpFrameColors* FrameColors);
        [id(0x000007d2), propput, helpcontext(0x0009a4c2)]
        HRESULT FrameColors([in] PpFrameColors FrameColors);
        [id(0x000007d3), propget, helpcontext(0x0009a4c3)]
        HRESULT ResizeGraphics([out, retval] MsoTriState* ResizeGraphics);
        [id(0x000007d3), propput, helpcontext(0x0009a4c3)]
        HRESULT ResizeGraphics([in] MsoTriState ResizeGraphics);
        [id(0x000007d4), propget, helpcontext(0x0009a4c4)]
        HRESULT ShowSlideAnimation([out, retval] MsoTriState* ShowSlideAnimation);
        [id(0x000007d4), propput, helpcontext(0x0009a4c4)]
        HRESULT ShowSlideAnimation([in] MsoTriState ShowSlideAnimation);
        [id(0x000007d5), propget, helpcontext(0x0009a4c5)]
        HRESULT OrganizeInFolder([out, retval] MsoTriState* OrganizeInFolder);
        [id(0x000007d5), propput, helpcontext(0x0009a4c5)]
        HRESULT OrganizeInFolder([in] MsoTriState OrganizeInFolder);
        [id(0x000007d6), propget, helpcontext(0x0009a4c6)]
        HRESULT UseLongFileNames([out, retval] MsoTriState* UseLongFileNames);
        [id(0x000007d6), propput, helpcontext(0x0009a4c6)]
        HRESULT UseLongFileNames([in] MsoTriState UseLongFileNames);
        [id(0x000007d7), propget, helpcontext(0x0009a4c7)]
        HRESULT RelyOnVML([out, retval] MsoTriState* RelyOnVML);
        [id(0x000007d7), propput, helpcontext(0x0009a4c7)]
        HRESULT RelyOnVML([in] MsoTriState RelyOnVML);
        [id(0x000007d8), propget, helpcontext(0x0009a4c8)]
        HRESULT AllowPNG([out, retval] MsoTriState* AllowPNG);
        [id(0x000007d8), propput, helpcontext(0x0009a4c8)]
        HRESULT AllowPNG([in] MsoTriState AllowPNG);
        [id(0x000007d9), propget, helpcontext(0x0009a4c9)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* ScreenSize);
        [id(0x000007d9), propput, helpcontext(0x0009a4c9)]
        HRESULT ScreenSize([in] MsoScreenSize ScreenSize);
        [id(0x000007da), propget, helpcontext(0x0009a4ca)]
        HRESULT Encoding([out, retval] MsoEncoding* Encoding);
        [id(0x000007da), propput, helpcontext(0x0009a4ca)]
        HRESULT Encoding([in] MsoEncoding Encoding);
        [id(0x000007db), propget, helpcontext(0x0009a4cb)]
        HRESULT UpdateLinksOnSave([out, retval] MsoTriState* UpdateLinksOnSave);
        [id(0x000007db), propput, helpcontext(0x0009a4cb)]
        HRESULT UpdateLinksOnSave([in] MsoTriState UpdateLinksOnSave);
        [id(0x000007dc), propget, helpcontext(0x0009a4cc)]
        HRESULT CheckIfOfficeIsHTMLEditor([out, retval] MsoTriState* CheckIfOfficeIsHTMLEditor);
        [id(0x000007dc), propput, helpcontext(0x0009a4cc)]
        HRESULT CheckIfOfficeIsHTMLEditor([in] MsoTriState CheckIfOfficeIsHTMLEditor);
        [id(0x000007dd), propget, helpcontext(0x0009a4cd)]
        HRESULT AlwaysSaveInDefaultEncoding([out, retval] MsoTriState* AlwaysSaveInDefaultEncoding);
        [id(0x000007dd), propput, helpcontext(0x0009a4cd)]
        HRESULT AlwaysSaveInDefaultEncoding([in] MsoTriState AlwaysSaveInDefaultEncoding);
        [id(0x000007de), propget, helpcontext(0x0009a4ce)]
        HRESULT Fonts([out, retval] WebPageFonts** Fonts);
        [id(0x000007df), propget, helpcontext(0x0009a4cf)]
        HRESULT FolderSuffix([out, retval] BSTR* FolderSuffix);
        [id(0x000007e0), propget, helpcontext(0x0009a4d0)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* TargetBrowser);
        [id(0x000007e0), propput, helpcontext(0x0009a4d0)]
        HRESULT TargetBrowser([in] MsoTargetBrowser TargetBrowser);
        [id(0x000007e1), propget, helpcontext(0x0009a4d1)]
        HRESULT SaveNewWebPagesAsWebArchives([out, retval] MsoTriState* SaveNewWebPagesAsWebArchives);
        [id(0x000007e1), propput, helpcontext(0x0009a4d1)]
        HRESULT SaveNewWebPagesAsWebArchives([in] MsoTriState SaveNewWebPagesAsWebArchives);
        [id(0x000007e2), propget, helpcontext(0x0009a4d2)]
        HRESULT HTMLVersion([out, retval] PpHTMLVersion* HTMLVersion);
        [id(0x000007e2), propput, helpcontext(0x0009a4d2)]
        HRESULT HTMLVersion([in] PpHTMLVersion HTMLVersion);
    };

    [
      odl,
      uuid(914934CE-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009a8a8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebOptions : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009a8a9)]
        HRESULT IncludeNavigation([out, retval] MsoTriState* IncludeNavigation);
        [id(0x000007d1), propput, helpcontext(0x0009a8a9)]
        HRESULT IncludeNavigation([in] MsoTriState IncludeNavigation);
        [id(0x000007d2), propget, helpcontext(0x0009a8aa)]
        HRESULT FrameColors([out, retval] PpFrameColors* FrameColors);
        [id(0x000007d2), propput, helpcontext(0x0009a8aa)]
        HRESULT FrameColors([in] PpFrameColors FrameColors);
        [id(0x000007d3), propget, helpcontext(0x0009a8ab)]
        HRESULT ResizeGraphics([out, retval] MsoTriState* ResizeGraphics);
        [id(0x000007d3), propput, helpcontext(0x0009a8ab)]
        HRESULT ResizeGraphics([in] MsoTriState ResizeGraphics);
        [id(0x000007d4), propget, helpcontext(0x0009a8ac)]
        HRESULT ShowSlideAnimation([out, retval] MsoTriState* ShowSlideAnimation);
        [id(0x000007d4), propput, helpcontext(0x0009a8ac)]
        HRESULT ShowSlideAnimation([in] MsoTriState ShowSlideAnimation);
        [id(0x000007d5), propget, helpcontext(0x0009a8ad)]
        HRESULT OrganizeInFolder([out, retval] MsoTriState* OrganizeInFolder);
        [id(0x000007d5), propput, helpcontext(0x0009a8ad)]
        HRESULT OrganizeInFolder([in] MsoTriState OrganizeInFolder);
        [id(0x000007d6), propget, helpcontext(0x0009a8ae)]
        HRESULT UseLongFileNames([out, retval] MsoTriState* UseLongFileNames);
        [id(0x000007d6), propput, helpcontext(0x0009a8ae)]
        HRESULT UseLongFileNames([in] MsoTriState UseLongFileNames);
        [id(0x000007d7), propget, helpcontext(0x0009a8af)]
        HRESULT RelyOnVML([out, retval] MsoTriState* RelyOnVML);
        [id(0x000007d7), propput, helpcontext(0x0009a8af)]
        HRESULT RelyOnVML([in] MsoTriState RelyOnVML);
        [id(0x000007d8), propget, helpcontext(0x0009a8b0)]
        HRESULT AllowPNG([out, retval] MsoTriState* AllowPNG);
        [id(0x000007d8), propput, helpcontext(0x0009a8b0)]
        HRESULT AllowPNG([in] MsoTriState AllowPNG);
        [id(0x000007d9), propget, helpcontext(0x0009a8b1)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* ScreenSize);
        [id(0x000007d9), propput, helpcontext(0x0009a8b1)]
        HRESULT ScreenSize([in] MsoScreenSize ScreenSize);
        [id(0x000007da), propget, helpcontext(0x0009a8b2)]
        HRESULT Encoding([out, retval] MsoEncoding* Encoding);
        [id(0x000007da), propput, helpcontext(0x0009a8b2)]
        HRESULT Encoding([in] MsoEncoding Encoding);
        [id(0x000007db), propget, helpcontext(0x0009a8b3)]
        HRESULT FolderSuffix([out, retval] BSTR* FolderSuffix);
        [id(0x000007dc), helpcontext(0x0009a8b4)]
        HRESULT UseDefaultFolderSuffix();
        [id(0x000007dd), propget, helpcontext(0x0009a8b5)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* TargetBrowser);
        [id(0x000007dd), propput, helpcontext(0x0009a8b5)]
        HRESULT TargetBrowser([in] MsoTargetBrowser TargetBrowser);
        [id(0x000007de), propget, helpcontext(0x0009a8b6)]
        HRESULT HTMLVersion([out, retval] PpHTMLVersion* HTMLVersion);
        [id(0x000007de), propput, helpcontext(0x0009a8b6)]
        HRESULT HTMLVersion([in] PpHTMLVersion HTMLVersion);
    };

    [
      odl,
      uuid(914934CF-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009ac90),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PublishObjects : Collection {
        [id(0x000007d1), propget, helpcontext(0x0009ac91)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009ac92)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009ac93),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] PublishObject** Item);
    };

    [
      odl,
      uuid(914934D0-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009b078),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PublishObject : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009b079)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009b07a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009b07b)]
        HRESULT HTMLVersion([out, retval] PpHTMLVersion* HTMLVersion);
        [id(0x000007d3), propput, helpcontext(0x0009b07b)]
        HRESULT HTMLVersion([in] PpHTMLVersion HTMLVersion);
        [id(0x000007d4), propget, helpcontext(0x0009b07c)]
        HRESULT SourceType([out, retval] PpPublishSourceType* SourceType);
        [id(0x000007d4), propput, helpcontext(0x0009b07c)]
        HRESULT SourceType([in] PpPublishSourceType SourceType);
        [id(0x000007d5), propget, helpcontext(0x0009b07d)]
        HRESULT RangeStart([out, retval] int* RangeStart);
        [id(0x000007d5), propput, helpcontext(0x0009b07d)]
        HRESULT RangeStart([in] int RangeStart);
        [id(0x000007d6), propget, helpcontext(0x0009b07e)]
        HRESULT RangeEnd([out, retval] int* RangeEnd);
        [id(0x000007d6), propput, helpcontext(0x0009b07e)]
        HRESULT RangeEnd([in] int RangeEnd);
        [id(0x000007d7), propget, helpcontext(0x0009b07f)]
        HRESULT SlideShowName([out, retval] BSTR* SlideShowName);
        [id(0x000007d7), propput, helpcontext(0x0009b07f)]
        HRESULT SlideShowName([in] BSTR SlideShowName);
        [id(0x000007d8), propget, helpcontext(0x0009b080)]
        HRESULT SpeakerNotes([out, retval] MsoTriState* SpeakerNotes);
        [id(0x000007d8), propput, helpcontext(0x0009b080)]
        HRESULT SpeakerNotes([in] MsoTriState SpeakerNotes);
        [id(0x000007d9), propget, helpcontext(0x0009b081)]
        HRESULT FileName([out, retval] BSTR* FileName);
        [id(0x000007d9), propput, helpcontext(0x0009b081)]
        HRESULT FileName([in] BSTR FileName);
        [id(0x000007da), helpcontext(0x0009b082)]
        HRESULT Publish();
    };

    [
      odl,
      uuid(914934D2-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009b848),
      hidden
    ]
    interface MasterEvents : IUnknown {
    };

    [
      uuid(91493447-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009bc30),
      noncreatable
    ]
    coclass Master {
        [default] interface _Master;
        [default, source] interface MasterEvents;
    };

    typedef [uuid(83329628-509C-4CF8-A6B4-AFCA95A071BB)]
    enum {
        ppPasteDefault = 0,
        ppPasteBitmap = 1,
        ppPasteEnhancedMetafile = 2,
        ppPasteMetafilePicture = 3,
        ppPasteGIF = 4,
        ppPasteJPG = 5,
        ppPastePNG = 6,
        ppPasteText = 7,
        ppPasteHTML = 8,
        ppPasteRTF = 9,
        ppPasteOLEObject = 10,
        ppPasteShape = 11
    } PpPasteDataType;

    [
      odl,
      uuid(914934D3-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009c018),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _PowerRex : IDispatch {
        [id(0x000007d1), hidden, helpcontext(0x0009c019)]
        HRESULT OnAsfEncoderEvent(
                        [in] VARIANT erorCode,
                        [in] VARIANT bstrErrorDesc);
    };

    [
      uuid(91493448-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009c400),
      hidden
    ]
    coclass PowerRex {
        [default] interface _PowerRex;
    };

    [
      odl,
      uuid(914934D4-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009c7e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Comments : Collection {
        [id(0x000007d1), propget, helpcontext(0x0009c7e9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009c7ea)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009c7eb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Comment** Item);
        [id(0x000007d3), helpcontext(0x0009c7ec)]
        HRESULT Add(
                        [in] single Left,
                        [in] single Top,
                        [in] BSTR Author,
                        [in] BSTR AuthorInitials,
                        [in] BSTR Text,
                        [out, retval] Comment** Add);
        [id(0x000007d4), helpcontext(0x0009c7ed)]
        HRESULT Add2(
                        [in] single Left,
                        [in] single Top,
                        [in] BSTR Author,
                        [in] BSTR AuthorInitials,
                        [in] BSTR Text,
                        [in] BSTR ProviderID,
                        [in] BSTR UserID,
                        [out, retval] Comment** Add);
    };

    [
      odl,
      uuid(914934D5-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009cbd0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Comment : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009cbd1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009cbd2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009cbd3)]
        HRESULT Author([out, retval] BSTR* Author);
        [id(0x000007d4), propget, helpcontext(0x0009cbd4)]
        HRESULT AuthorInitials([out, retval] BSTR* AuthorInitials);
        [id(0x000007d5), propget, helpcontext(0x0009cbd5)]
        HRESULT Text([out, retval] BSTR* Text);
        [id(0x000007d6), propget, helpcontext(0x0009cbd6)]
        HRESULT DateTime([out, retval] DATE* DateTime);
        [id(0x000007d7), propget, helpcontext(0x0009cbd7)]
        HRESULT AuthorIndex([out, retval] int* AuthorIndex);
        [id(0x000007d8), propget, helpcontext(0x0009cbd8)]
        HRESULT Left([out, retval] single* Left);
        [id(0x000007d9), propget, helpcontext(0x0009cbd9)]
        HRESULT Top([out, retval] single* Top);
        [id(0x000007da), helpcontext(0x0009cbda)]
        HRESULT Delete();
        [id(0x000007db), propget, helpcontext(0x0009cbdb)]
        HRESULT ProviderID([out, retval] BSTR* ProviderID);
        [id(0x000007dc), propget, helpcontext(0x0009cbdc)]
        HRESULT UserID([out, retval] BSTR* UserID);
        [id(0x000007dd), propget, helpcontext(0x0009cbdd)]
        HRESULT TimeZoneBias([out, retval] int* TimeZoneBias);
        [id(0x000007de), propget, helpcontext(0x0009cbde)]
        HRESULT Replies([out, retval] Comments** Comments);
        [id(0x000007df), propget, helpcontext(0x0009cbdf)]
        HRESULT Collapsed([out, retval] VARIANT_BOOL* Comments);
    };

    [
      odl,
      uuid(914934D6-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009cfb8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Designs : Collection {
        [id(0x000007d1), propget, helpcontext(0x0009cfb9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009cfba)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009cfbb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Design** Item);
        [id(0x000007d3), helpcontext(0x0009cfbc)]
        HRESULT Add(
                        [in] BSTR designName,
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] Design** Add);
        [id(0x000007d4), helpcontext(0x0009cfbd)]
        HRESULT Load(
                        [in] BSTR TemplateName,
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] Design** Load);
        [id(0x000007d5), helpcontext(0x0009cfbe)]
        HRESULT Clone(
                        [in] Design* pOriginal,
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] Design** Clone);
    };

    [
      odl,
      uuid(914934D7-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009d3a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Design : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009d3a1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009d3a2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009d3a3)]
        HRESULT SlideMaster([out, retval] _Master** SlideMaster);
        [id(0x000007d4), propget, hidden, helpcontext(0x0009d3a4)]
        HRESULT TitleMaster([out, retval] _Master** TitleMaster);
        [id(0x000007d5), propget, hidden, helpcontext(0x0009d3a5)]
        HRESULT HasTitleMaster([out, retval] MsoTriState* HasTitleMaster);
        [id(0x000007d6), hidden, helpcontext(0x0009d3a6)]
        HRESULT AddTitleMaster([out, retval] _Master** TitleMaster);
        [id(0x000007d7), propget, helpcontext(0x0009d3a7)]
        HRESULT Index([out, retval] int* Index);
        [id(0x000007d8), propget, helpcontext(0x0009d3a8)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d8), propput, helpcontext(0x0009d3a8)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d9), propget, helpcontext(0x0009d3a9)]
        HRESULT Preserved([out, retval] MsoTriState* Preserved);
        [id(0x000007d9), propput, helpcontext(0x0009d3a9)]
        HRESULT Preserved([in] MsoTriState Preserved);
        [id(0x000007da), helpcontext(0x0009d3aa)]
        HRESULT MoveTo([in] int toPos);
        [id(0x000007db), helpcontext(0x0009d3ab)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(914934D8-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009d788),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNode : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x0000000a), helpcontext(0x0009d789)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos,
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType,
                        [out, retval] DiagramNode** NewNode);
        [id(0x0000000b), helpcontext(0x0009d78a)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x0009d78b)]
        HRESULT MoveNode(
                        [in] DiagramNode* TargetNode,
                        [in] MsoRelativeNodePosition Pos);
        [id(0x0000000d), helpcontext(0x0009d78c)]
        HRESULT ReplaceNode([in] DiagramNode* TargetNode);
        [id(0x0000000e), helpcontext(0x0009d78d)]
        HRESULT SwapNode(
                        [in] DiagramNode* TargetNode,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SwapChildren);
        [id(0x0000000f), helpcontext(0x0009d78e)]
        HRESULT CloneNode(
                        [in] VARIANT_BOOL CopyChildren,
                        [in] DiagramNode* TargetNode,
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos,
                        [out, retval] DiagramNode** Node);
        [id(0x00000010), helpcontext(0x0009d78f)]
        HRESULT TransferChildren([in] DiagramNode* ReceivingNode);
        [id(0x00000011), helpcontext(0x0009d790)]
        HRESULT NextNode([out, retval] DiagramNode** NextNode);
        [id(0x00000012), helpcontext(0x0009d791)]
        HRESULT PrevNode([out, retval] DiagramNode** PrevNode);
        [id(0x00000064), propget, helpcontext(0x0009d792)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget, helpcontext(0x0009d793)]
        HRESULT Children([out, retval] DiagramNodeChildren** Children);
        [id(0x00000066), propget, helpcontext(0x0009d794)]
        HRESULT Shape([out, retval] Shape** Shape);
        [id(0x00000067), propget, helpcontext(0x0009d795)]
        HRESULT Root([out, retval] DiagramNode** Root);
        [id(0x00000068), propget, helpcontext(0x0009d796)]
        HRESULT Diagram([out, retval] Diagram** Diagram);
        [id(0x00000069), propget, helpcontext(0x0009d797)]
        HRESULT Layout([out, retval] MsoOrgChartLayoutType* Type);
        [id(0x00000069), propput, helpcontext(0x0009d797)]
        HRESULT Layout([in] MsoOrgChartLayoutType Type);
        [id(0x0000006a), propget, helpcontext(0x0009d798)]
        HRESULT TextShape([out, retval] Shape** Shape);
    };

    [
      odl,
      uuid(914934D9-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009db70),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodeChildren : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0xfffffffc), propget, helpcontext(0x0009db71)]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(00000000), helpcontext(0x0009db72),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] DiagramNode** Node);
        [id(0x0000000a), helpcontext(0x0009db73)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(-1)] VARIANT Index,
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType,
                        [out, retval] DiagramNode** NewNode);
        [id(0x0000000b), helpcontext(0x0009db74)]
        HRESULT SelectAll();
        [id(0x00000064), propget, helpcontext(0x0009db75)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget, helpcontext(0x0009db76)]
        HRESULT Count([out, retval] int* iDiagramNodes);
        [id(0x00000067), propget, helpcontext(0x0009db77)]
        HRESULT FirstChild([out, retval] DiagramNode** First);
        [id(0x00000068), propget, helpcontext(0x0009db78)]
        HRESULT LastChild([out, retval] DiagramNode** Last);
    };

    [
      odl,
      uuid(914934DA-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009df58),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodes : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0xfffffffc), propget, helpcontext(0x0009df59)]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(00000000), helpcontext(0x0009df5a),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] DiagramNode** ppdn);
        [id(0x0000000a), helpcontext(0x0009df5b)]
        HRESULT SelectAll();
        [id(0x00000064), propget, helpcontext(0x0009df5c)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget, helpcontext(0x0009df5d)]
        HRESULT Count([out, retval] int* iDiagramNodes);
    };

    [
      odl,
      uuid(914934DB-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009e340),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Diagram : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000064), propget, helpcontext(0x0009e341)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget, helpcontext(0x0009e342)]
        HRESULT Nodes([out, retval] DiagramNodes** Nodes);
        [id(0x00000066), propget, helpcontext(0x0009e343)]
        HRESULT Type([out, retval] MsoDiagramType* Type);
        [id(0x00000067), propget, helpcontext(0x0009e344)]
        HRESULT AutoLayout([out, retval] MsoTriState* AutoLayout);
        [id(0x00000067), propput, helpcontext(0x0009e344)]
        HRESULT AutoLayout([in] MsoTriState AutoLayout);
        [id(0x00000068), propget, helpcontext(0x0009e345)]
        HRESULT Reverse([out, retval] MsoTriState* Reverse);
        [id(0x00000068), propput, helpcontext(0x0009e345)]
        HRESULT Reverse([in] MsoTriState Reverse);
        [id(0x00000069), propget, helpcontext(0x0009e346)]
        HRESULT AutoFormat([out, retval] MsoTriState* AutoFormat);
        [id(0x00000069), propput, helpcontext(0x0009e346)]
        HRESULT AutoFormat([in] MsoTriState AutoFormat);
        [id(0x0000000a), helpcontext(0x0009e347)]
        HRESULT Convert([in] MsoDiagramType Type);
        [id(0x0000000b), helpcontext(0x0009e348)]
        HRESULT FitText();
    };

    [
      odl,
      uuid(914934DC-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009e728),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TimeLine : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009e729)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009e72a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009e72b)]
        HRESULT MainSequence([out, retval] Sequence** MainSequence);
        [id(0x000007d4), propget, helpcontext(0x0009e72c)]
        HRESULT InteractiveSequences([out, retval] Sequences** InteractiveSequences);
    };

    [
      odl,
      uuid(914934DD-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009eb10),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sequences : Collection {
        [id(0x000007d1), propget, helpcontext(0x0009eb11)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009eb12)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009eb13),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Sequence** Item);
        [id(0x000007d3), helpcontext(0x0009eb14)]
        HRESULT Add(
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] Sequence** Add);
    };

    typedef [uuid(4927EA82-23FB-4F6F-9C8B-4204CEB23D21)]
    enum {
        msoAnimEffectCustom = 0,
        msoAnimEffectAppear = 1,
        msoAnimEffectFly = 2,
        msoAnimEffectBlinds = 3,
        msoAnimEffectBox = 4,
        msoAnimEffectCheckerboard = 5,
        msoAnimEffectCircle = 6,
        msoAnimEffectCrawl = 7,
        msoAnimEffectDiamond = 8,
        msoAnimEffectDissolve = 9,
        msoAnimEffectFade = 10,
        msoAnimEffectFlashOnce = 11,
        msoAnimEffectPeek = 12,
        msoAnimEffectPlus = 13,
        msoAnimEffectRandomBars = 14,
        msoAnimEffectSpiral = 15,
        msoAnimEffectSplit = 16,
        msoAnimEffectStretch = 17,
        msoAnimEffectStrips = 18,
        msoAnimEffectSwivel = 19,
        msoAnimEffectWedge = 20,
        msoAnimEffectWheel = 21,
        msoAnimEffectWipe = 22,
        msoAnimEffectZoom = 23,
        msoAnimEffectRandomEffects = 24,
        msoAnimEffectBoomerang = 25,
        msoAnimEffectBounce = 26,
        msoAnimEffectColorReveal = 27,
        msoAnimEffectCredits = 28,
        msoAnimEffectEaseIn = 29,
        msoAnimEffectFloat = 30,
        msoAnimEffectGrowAndTurn = 31,
        msoAnimEffectLightSpeed = 32,
        msoAnimEffectPinwheel = 33,
        msoAnimEffectRiseUp = 34,
        msoAnimEffectSwish = 35,
        msoAnimEffectThinLine = 36,
        msoAnimEffectUnfold = 37,
        msoAnimEffectWhip = 38,
        msoAnimEffectAscend = 39,
        msoAnimEffectCenterRevolve = 40,
        msoAnimEffectFadedSwivel = 41,
        msoAnimEffectDescend = 42,
        msoAnimEffectSling = 43,
        msoAnimEffectSpinner = 44,
        msoAnimEffectStretchy = 45,
        msoAnimEffectZip = 46,
        msoAnimEffectArcUp = 47,
        msoAnimEffectFadedZoom = 48,
        msoAnimEffectGlide = 49,
        msoAnimEffectExpand = 50,
        msoAnimEffectFlip = 51,
        msoAnimEffectShimmer = 52,
        msoAnimEffectFold = 53,
        msoAnimEffectChangeFillColor = 54,
        msoAnimEffectChangeFont = 55,
        msoAnimEffectChangeFontColor = 56,
        msoAnimEffectChangeFontSize = 57,
        msoAnimEffectChangeFontStyle = 58,
        msoAnimEffectGrowShrink = 59,
        msoAnimEffectChangeLineColor = 60,
        msoAnimEffectSpin = 61,
        msoAnimEffectTransparency = 62,
        msoAnimEffectBoldFlash = 63,
        msoAnimEffectBlast = 64,
        msoAnimEffectBoldReveal = 65,
        msoAnimEffectBrushOnColor = 66,
        msoAnimEffectBrushOnUnderline = 67,
        msoAnimEffectColorBlend = 68,
        msoAnimEffectColorWave = 69,
        msoAnimEffectComplementaryColor = 70,
        msoAnimEffectComplementaryColor2 = 71,
        msoAnimEffectContrastingColor = 72,
        msoAnimEffectDarken = 73,
        msoAnimEffectDesaturate = 74,
        msoAnimEffectFlashBulb = 75,
        msoAnimEffectFlicker = 76,
        msoAnimEffectGrowWithColor = 77,
        msoAnimEffectLighten = 78,
        msoAnimEffectStyleEmphasis = 79,
        msoAnimEffectTeeter = 80,
        msoAnimEffectVerticalGrow = 81,
        msoAnimEffectWave = 82,
        msoAnimEffectMediaPlay = 83,
        msoAnimEffectMediaPause = 84,
        msoAnimEffectMediaStop = 85,
        msoAnimEffectPathCircle = 86,
        msoAnimEffectPathRightTriangle = 87,
        msoAnimEffectPathDiamond = 88,
        msoAnimEffectPathHexagon = 89,
        msoAnimEffectPath5PointStar = 90,
        msoAnimEffectPathCrescentMoon = 91,
        msoAnimEffectPathSquare = 92,
        msoAnimEffectPathTrapezoid = 93,
        msoAnimEffectPathHeart = 94,
        msoAnimEffectPathOctagon = 95,
        msoAnimEffectPath6PointStar = 96,
        msoAnimEffectPathFootball = 97,
        msoAnimEffectPathEqualTriangle = 98,
        msoAnimEffectPathParallelogram = 99,
        msoAnimEffectPathPentagon = 100,
        msoAnimEffectPath4PointStar = 101,
        msoAnimEffectPath8PointStar = 102,
        msoAnimEffectPathTeardrop = 103,
        msoAnimEffectPathPointyStar = 104,
        msoAnimEffectPathCurvedSquare = 105,
        msoAnimEffectPathCurvedX = 106,
        msoAnimEffectPathVerticalFigure8 = 107,
        msoAnimEffectPathCurvyStar = 108,
        msoAnimEffectPathLoopdeLoop = 109,
        msoAnimEffectPathBuzzsaw = 110,
        msoAnimEffectPathHorizontalFigure8 = 111,
        msoAnimEffectPathPeanut = 112,
        msoAnimEffectPathFigure8Four = 113,
        msoAnimEffectPathNeutron = 114,
        msoAnimEffectPathSwoosh = 115,
        msoAnimEffectPathBean = 116,
        msoAnimEffectPathPlus = 117,
        msoAnimEffectPathInvertedTriangle = 118,
        msoAnimEffectPathInvertedSquare = 119,
        msoAnimEffectPathLeft = 120,
        msoAnimEffectPathTurnRight = 121,
        msoAnimEffectPathArcDown = 122,
        msoAnimEffectPathZigzag = 123,
        msoAnimEffectPathSCurve2 = 124,
        msoAnimEffectPathSineWave = 125,
        msoAnimEffectPathBounceLeft = 126,
        msoAnimEffectPathDown = 127,
        msoAnimEffectPathTurnUp = 128,
        msoAnimEffectPathArcUp = 129,
        msoAnimEffectPathHeartbeat = 130,
        msoAnimEffectPathSpiralRight = 131,
        msoAnimEffectPathWave = 132,
        msoAnimEffectPathCurvyLeft = 133,
        msoAnimEffectPathDiagonalDownRight = 134,
        msoAnimEffectPathTurnDown = 135,
        msoAnimEffectPathArcLeft = 136,
        msoAnimEffectPathFunnel = 137,
        msoAnimEffectPathSpring = 138,
        msoAnimEffectPathBounceRight = 139,
        msoAnimEffectPathSpiralLeft = 140,
        msoAnimEffectPathDiagonalUpRight = 141,
        msoAnimEffectPathTurnUpRight = 142,
        msoAnimEffectPathArcRight = 143,
        msoAnimEffectPathSCurve1 = 144,
        msoAnimEffectPathDecayingWave = 145,
        msoAnimEffectPathCurvyRight = 146,
        msoAnimEffectPathStairsDown = 147,
        msoAnimEffectPathUp = 148,
        msoAnimEffectPathRight = 149,
        msoAnimEffectMediaPlayFromBookmark = 150
    } MsoAnimEffect;

    typedef [uuid(4290D45B-433A-452F-8402-447FD15187E0)]
    enum {
        msoAnimateLevelMixed = -1,
        msoAnimateLevelNone = 0,
        msoAnimateTextByAllLevels = 1,
        msoAnimateTextByFirstLevel = 2,
        msoAnimateTextBySecondLevel = 3,
        msoAnimateTextByThirdLevel = 4,
        msoAnimateTextByFourthLevel = 5,
        msoAnimateTextByFifthLevel = 6,
        msoAnimateChartAllAtOnce = 7,
        msoAnimateChartByCategory = 8,
        msoAnimateChartByCategoryElements = 9,
        msoAnimateChartBySeries = 10,
        msoAnimateChartBySeriesElements = 11,
        msoAnimateDiagramAllAtOnce = 12,
        msoAnimateDiagramDepthByNode = 13,
        msoAnimateDiagramDepthByBranch = 14,
        msoAnimateDiagramBreadthByNode = 15,
        msoAnimateDiagramBreadthByLevel = 16,
        msoAnimateDiagramClockwise = 17,
        msoAnimateDiagramClockwiseIn = 18,
        msoAnimateDiagramClockwiseOut = 19,
        msoAnimateDiagramCounterClockwise = 20,
        msoAnimateDiagramCounterClockwiseIn = 21,
        msoAnimateDiagramCounterClockwiseOut = 22,
        msoAnimateDiagramInByRing = 23,
        msoAnimateDiagramOutByRing = 24,
        msoAnimateDiagramUp = 25,
        msoAnimateDiagramDown = 26
    } MsoAnimateByLevel;

    typedef [uuid(45F2ED98-F126-47EF-9521-420DD5D364AF)]
    enum {
        msoAnimTriggerMixed = -1,
        msoAnimTriggerNone = 0,
        msoAnimTriggerOnPageClick = 1,
        msoAnimTriggerWithPrevious = 2,
        msoAnimTriggerAfterPrevious = 3,
        msoAnimTriggerOnShapeClick = 4,
        msoAnimTriggerOnMediaBookmark = 5
    } MsoAnimTriggerType;

    typedef [uuid(6BF95896-A5B8-44C5-81E1-03D78481C890)]
    enum {
        msoAnimAfterEffectMixed = -1,
        msoAnimAfterEffectNone = 0,
        msoAnimAfterEffectDim = 1,
        msoAnimAfterEffectHide = 2,
        msoAnimAfterEffectHideOnNextClick = 3
    } MsoAnimAfterEffect;

    typedef [uuid(8BA1E4A7-C122-4400-AF6B-6905A8863766)]
    enum {
        msoAnimTextUnitEffectMixed = -1,
        msoAnimTextUnitEffectByParagraph = 0,
        msoAnimTextUnitEffectByCharacter = 1,
        msoAnimTextUnitEffectByWord = 2
    } MsoAnimTextUnitEffect;

    [
      odl,
      uuid(914934DE-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009eef8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sequence : Collection {
        [id(0x000007d1), propget, helpcontext(0x0009eef9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009eefa)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x0009eefb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Effect** Item);
        [id(0x000007d3), helpcontext(0x0009eefc)]
        HRESULT AddEffect(
                        [in] Shape* Shape,
                        [in] MsoAnimEffect effectId,
                        [in, optional, defaultvalue(0)] MsoAnimateByLevel Level,
                        [in, optional, defaultvalue(1)] MsoAnimTriggerType trigger,
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] Effect** Effect);
        [id(0x000007d4), helpcontext(0x0009eefd)]
        HRESULT Clone(
                        [in] Effect* Effect,
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] Effect** Clone);
        [id(0x000007d5), helpcontext(0x0009eefe)]
        HRESULT FindFirstAnimationFor(
                        [in] Shape* Shape,
                        [out, retval] Effect** FindFirstAnimationFor);
        [id(0x000007d6), helpcontext(0x0009eeff)]
        HRESULT FindFirstAnimationForClick(
                        [in] int click,
                        [out, retval] Effect** FindFirstAnimationForClick);
        [id(0x000007d7), helpcontext(0x0009ef00)]
        HRESULT ConvertToBuildLevel(
                        [in] Effect* Effect,
                        [in] MsoAnimateByLevel Level,
                        [out, retval] Effect** ConvertToBuildLevel);
        [id(0x000007d8), helpcontext(0x0009ef01)]
        HRESULT ConvertToAfterEffect(
                        [in] Effect* Effect,
                        [in] MsoAnimAfterEffect After,
                        [in, optional, defaultvalue(0)] MsoRGBType DimColor,
                        [in, optional, defaultvalue(0)] PpColorSchemeIndex DimSchemeColor,
                        [out, retval] Effect** ConvertToAfterEffect);
        [id(0x000007d9), helpcontext(0x0009ef02)]
        HRESULT ConvertToAnimateBackground(
                        [in] Effect* Effect,
                        [in] MsoTriState AnimateBackground,
                        [out, retval] Effect** ConvertToAnimateBackground);
        [id(0x000007da), helpcontext(0x0009ef03)]
        HRESULT ConvertToAnimateInReverse(
                        [in] Effect* Effect,
                        [in] MsoTriState animateInReverse,
                        [out, retval] Effect** ConvertToAnimateInReverse);
        [id(0x000007db), helpcontext(0x0009ef04)]
        HRESULT ConvertToTextUnitEffect(
                        [in] Effect* Effect,
                        [in] MsoAnimTextUnitEffect unitEffect,
                        [out, retval] Effect** ConvertToTextUnitEffect);
        [id(0x000007dc), helpcontext(0x0009ef05)]
        HRESULT AddTriggerEffect(
                        [in] Shape* pShape,
                        [in] MsoAnimEffect effectId,
                        [in] MsoAnimTriggerType trigger,
                        [in] Shape* pTriggerShape,
                        [in, optional, defaultvalue("")] BSTR bookmark,
                        [in, optional, defaultvalue(0)] MsoAnimateByLevel Level,
                        [out, retval] Effect** TriggerEffect);
    };

    typedef [uuid(DA113E67-ED91-4427-9415-83960759D3FB)]
    enum {
        msoAnimEffectRestartAlways = 1,
        msoAnimEffectRestartWhenOff = 2,
        msoAnimEffectRestartNever = 3
    } MsoAnimEffectRestart;

    typedef [uuid(A2F1DAF6-7EEC-46C9-AB9F-877C909CB47D)]
    enum {
        msoAnimEffectAfterFreeze = 1,
        msoAnimEffectAfterRemove = 2,
        msoAnimEffectAfterHold = 3,
        msoAnimEffectAfterTransition = 4
    } MsoAnimEffectAfter;

    [
      odl,
      uuid(914934DF-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009f2e0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Effect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009f2e1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009f2e2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009f2e3)]
        HRESULT Shape([out, retval] Shape** Shape);
        [id(0x000007d3), propput, helpcontext(0x0009f2e3)]
        HRESULT Shape([in] Shape* Shape);
        [id(0x000007d4), helpcontext(0x0009f2e4)]
        HRESULT MoveTo([in] int toPos);
        [id(0x000007d5), helpcontext(0x0009f2e5)]
        HRESULT MoveBefore([in] Effect* Effect);
        [id(0x000007d6), helpcontext(0x0009f2e6)]
        HRESULT MoveAfter([in] Effect* Effect);
        [id(0x000007d7), helpcontext(0x0009f2e7)]
        HRESULT Delete();
        [id(0x000007d8), propget, helpcontext(0x0009f2e8)]
        HRESULT Index([out, retval] int* Index);
        [id(0x000007d9), propget, helpcontext(0x0009f2e9)]
        HRESULT Timing([out, retval] Timing** Timing);
        [id(0x000007da), propget, helpcontext(0x0009f2ea)]
        HRESULT EffectType([out, retval] MsoAnimEffect* EffectType);
        [id(0x000007da), propput, helpcontext(0x0009f2ea)]
        HRESULT EffectType([in] MsoAnimEffect EffectType);
        [id(0x000007db), propget, helpcontext(0x0009f2eb)]
        HRESULT EffectParameters([out, retval] EffectParameters** EffectParameters);
        [id(0x000007dc), propget, helpcontext(0x0009f2ec)]
        HRESULT TextRangeStart([out, retval] int* TextRangeStart);
        [id(0x000007dd), propget, helpcontext(0x0009f2ed)]
        HRESULT TextRangeLength([out, retval] int* TextRangeLength);
        [id(0x000007de), propget, helpcontext(0x0009f2ee)]
        HRESULT Paragraph([out, retval] int* Paragraph);
        [id(0x000007de), propput, helpcontext(0x0009f2ee)]
        HRESULT Paragraph([in] int Paragraph);
        [id(0x000007df), propget, helpcontext(0x0009f2ef)]
        HRESULT DisplayName([out, retval] BSTR* DisplayName);
        [id(0x000007e0), propget, helpcontext(0x0009f2f0)]
        HRESULT Exit([out, retval] MsoTriState* Exit);
        [id(0x000007e0), propput, helpcontext(0x0009f2f0)]
        HRESULT Exit([in] MsoTriState Exit);
        [id(0x000007e1), propget, helpcontext(0x0009f2f1)]
        HRESULT Behaviors([out, retval] AnimationBehaviors** Behaviors);
        [id(0x000007e2), propget, helpcontext(0x0009f2f2)]
        HRESULT EffectInformation([out, retval] EffectInformation** EffectInformation);
    };

    [
      odl,
      uuid(914934E0-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009f6c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Timing : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009f6c9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009f6ca)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009f6cb)]
        HRESULT Duration([out, retval] single* Duration);
        [id(0x000007d3), propput, helpcontext(0x0009f6cb)]
        HRESULT Duration([in] single Duration);
        [id(0x000007d4), propget, helpcontext(0x0009f6cc)]
        HRESULT TriggerType([out, retval] MsoAnimTriggerType* TriggerType);
        [id(0x000007d4), propput, helpcontext(0x0009f6cc)]
        HRESULT TriggerType([in] MsoAnimTriggerType TriggerType);
        [id(0x000007d5), propget, helpcontext(0x0009f6cd)]
        HRESULT TriggerDelayTime([out, retval] single* TriggerDelayTime);
        [id(0x000007d5), propput, helpcontext(0x0009f6cd)]
        HRESULT TriggerDelayTime([in] single TriggerDelayTime);
        [id(0x000007d6), propget, helpcontext(0x0009f6ce)]
        HRESULT TriggerShape([out, retval] Shape** TriggerShape);
        [id(0x000007d6), propput, helpcontext(0x0009f6ce)]
        HRESULT TriggerShape([in] Shape* TriggerShape);
        [id(0x000007d7), propget, helpcontext(0x0009f6cf)]
        HRESULT RepeatCount([out, retval] int* RepeatCount);
        [id(0x000007d7), propput, helpcontext(0x0009f6cf)]
        HRESULT RepeatCount([in] int RepeatCount);
        [id(0x000007d8), propget, helpcontext(0x0009f6d0)]
        HRESULT RepeatDuration([out, retval] single* RepeatDuration);
        [id(0x000007d8), propput, helpcontext(0x0009f6d0)]
        HRESULT RepeatDuration([in] single RepeatDuration);
        [id(0x000007d9), propget, helpcontext(0x0009f6d1)]
        HRESULT Speed([out, retval] single* Speed);
        [id(0x000007d9), propput, helpcontext(0x0009f6d1)]
        HRESULT Speed([in] single Speed);
        [id(0x000007da), propget, helpcontext(0x0009f6d2)]
        HRESULT Accelerate([out, retval] single* Accelerate);
        [id(0x000007da), propput, helpcontext(0x0009f6d2)]
        HRESULT Accelerate([in] single Accelerate);
        [id(0x000007db), propget, helpcontext(0x0009f6d3)]
        HRESULT Decelerate([out, retval] single* Decelerate);
        [id(0x000007db), propput, helpcontext(0x0009f6d3)]
        HRESULT Decelerate([in] single Decelerate);
        [id(0x000007dc), propget, helpcontext(0x0009f6d4)]
        HRESULT AutoReverse([out, retval] MsoTriState* AutoReverse);
        [id(0x000007dc), propput, helpcontext(0x0009f6d4)]
        HRESULT AutoReverse([in] MsoTriState AutoReverse);
        [id(0x000007dd), propget, helpcontext(0x0009f6d5)]
        HRESULT SmoothStart([out, retval] MsoTriState* SmoothStart);
        [id(0x000007dd), propput, helpcontext(0x0009f6d5)]
        HRESULT SmoothStart([in] MsoTriState SmoothStart);
        [id(0x000007de), propget, helpcontext(0x0009f6d6)]
        HRESULT SmoothEnd([out, retval] MsoTriState* SmoothEnd);
        [id(0x000007de), propput, helpcontext(0x0009f6d6)]
        HRESULT SmoothEnd([in] MsoTriState SmoothEnd);
        [id(0x000007df), propget, helpcontext(0x0009f6d7)]
        HRESULT RewindAtEnd([out, retval] MsoTriState* RewindAtEnd);
        [id(0x000007df), propput, helpcontext(0x0009f6d7)]
        HRESULT RewindAtEnd([in] MsoTriState RewindAtEnd);
        [id(0x000007e0), propget, helpcontext(0x0009f6d8)]
        HRESULT Restart([out, retval] MsoAnimEffectRestart* Restart);
        [id(0x000007e0), propput, helpcontext(0x0009f6d8)]
        HRESULT Restart([in] MsoAnimEffectRestart Restart);
        [id(0x000007e1), propget, helpcontext(0x0009f6d9)]
        HRESULT BounceEnd([out, retval] MsoTriState* BounceEnd);
        [id(0x000007e1), propput, helpcontext(0x0009f6d9)]
        HRESULT BounceEnd([in] MsoTriState BounceEnd);
        [id(0x000007e2), propget, helpcontext(0x0009f6da)]
        HRESULT BounceEndIntensity([out, retval] single* BounceEndIntensity);
        [id(0x000007e2), propput, helpcontext(0x0009f6da)]
        HRESULT BounceEndIntensity([in] single BounceEndIntensity);
        [id(0x000007e3), propget, helpcontext(0x0009f6db)]
        HRESULT TriggerBookmark([out, retval] BSTR* TriggerBookmark);
        [id(0x000007e3), propput, helpcontext(0x0009f6db)]
        HRESULT TriggerBookmark([in] BSTR TriggerBookmark);
    };

    typedef [uuid(9D777915-EB83-4F30-AAE5-D96DB9A3CF7A)]
    enum {
        msoAnimDirectionNone = 0,
        msoAnimDirectionUp = 1,
        msoAnimDirectionRight = 2,
        msoAnimDirectionDown = 3,
        msoAnimDirectionLeft = 4,
        msoAnimDirectionOrdinalMask = 5,
        msoAnimDirectionUpLeft = 6,
        msoAnimDirectionUpRight = 7,
        msoAnimDirectionDownRight = 8,
        msoAnimDirectionDownLeft = 9,
        msoAnimDirectionTop = 10,
        msoAnimDirectionBottom = 11,
        msoAnimDirectionTopLeft = 12,
        msoAnimDirectionTopRight = 13,
        msoAnimDirectionBottomRight = 14,
        msoAnimDirectionBottomLeft = 15,
        msoAnimDirectionHorizontal = 16,
        msoAnimDirectionVertical = 17,
        msoAnimDirectionAcross = 18,
        msoAnimDirectionIn = 19,
        msoAnimDirectionOut = 20,
        msoAnimDirectionClockwise = 21,
        msoAnimDirectionCounterclockwise = 22,
        msoAnimDirectionHorizontalIn = 23,
        msoAnimDirectionHorizontalOut = 24,
        msoAnimDirectionVerticalIn = 25,
        msoAnimDirectionVerticalOut = 26,
        msoAnimDirectionSlightly = 27,
        msoAnimDirectionCenter = 28,
        msoAnimDirectionInSlightly = 29,
        msoAnimDirectionInCenter = 30,
        msoAnimDirectionInBottom = 31,
        msoAnimDirectionOutSlightly = 32,
        msoAnimDirectionOutCenter = 33,
        msoAnimDirectionOutBottom = 34,
        msoAnimDirectionFontBold = 35,
        msoAnimDirectionFontItalic = 36,
        msoAnimDirectionFontUnderline = 37,
        msoAnimDirectionFontStrikethrough = 38,
        msoAnimDirectionFontShadow = 39,
        msoAnimDirectionFontAllCaps = 40,
        msoAnimDirectionInstant = 41,
        msoAnimDirectionGradual = 42,
        msoAnimDirectionCycleClockwise = 43,
        msoAnimDirectionCycleCounterclockwise = 44
    } MsoAnimDirection;

    [
      odl,
      uuid(914934E1-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009fab0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EffectParameters : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009fab1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009fab2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009fab3)]
        HRESULT Direction([out, retval] MsoAnimDirection* Direction);
        [id(0x000007d3), propput, helpcontext(0x0009fab3)]
        HRESULT Direction([in] MsoAnimDirection Direction);
        [id(0x000007d4), propget, helpcontext(0x0009fab4)]
        HRESULT Amount([out, retval] single* Amount);
        [id(0x000007d4), propput, helpcontext(0x0009fab4)]
        HRESULT Amount([in] single Amount);
        [id(0x000007d5), propget, helpcontext(0x0009fab5)]
        HRESULT Size([out, retval] single* Size);
        [id(0x000007d5), propput, helpcontext(0x0009fab5)]
        HRESULT Size([in] single Size);
        [id(0x000007d6), propget, helpcontext(0x0009fab6)]
        HRESULT Color2([out, retval] ColorFormat** Color2);
        [id(0x000007d7), propget, helpcontext(0x0009fab7)]
        HRESULT Relative([out, retval] MsoTriState* Relative);
        [id(0x000007d7), propput, helpcontext(0x0009fab7)]
        HRESULT Relative([in] MsoTriState Relative);
        [id(0x000007d8), propget, helpcontext(0x0009fab8)]
        HRESULT FontName([out, retval] BSTR* FontName);
        [id(0x000007d8), propput, helpcontext(0x0009fab8)]
        HRESULT FontName([in] BSTR FontName);
    };

    [
      odl,
      uuid(914934E2-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x0009fe98),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EffectInformation : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x0009fe99)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x0009fe9a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x0009fe9b)]
        HRESULT AfterEffect([out, retval] MsoAnimAfterEffect* AfterEffect);
        [id(0x000007d4), propget, helpcontext(0x0009fe9c)]
        HRESULT AnimateBackground([out, retval] MsoTriState* AnimateBackground);
        [id(0x000007d5), propget, helpcontext(0x0009fe9d)]
        HRESULT AnimateTextInReverse([out, retval] MsoTriState* AnimateTextInReverse);
        [id(0x000007d6), propget, helpcontext(0x0009fe9e)]
        HRESULT BuildByLevelEffect([out, retval] MsoAnimateByLevel* BuildByLevelEffect);
        [id(0x000007d7), propget, helpcontext(0x0009fe9f)]
        HRESULT Dim([out, retval] ColorFormat** Dim);
        [id(0x000007d8), propget, helpcontext(0x0009fea0)]
        HRESULT PlaySettings([out, retval] PlaySettings** PlaySettings);
        [id(0x000007d9), propget, helpcontext(0x0009fea1)]
        HRESULT SoundEffect([out, retval] SoundEffect** SoundEffect);
        [id(0x000007da), propget, helpcontext(0x0009fea2)]
        HRESULT TextUnitEffect([out, retval] MsoAnimTextUnitEffect* TextUnitEffect);
    };

    typedef [uuid(6B9EFDD2-199B-41A0-8192-6A50CD6E521F)]
    enum {
        msoAnimTypeMixed = -2,
        msoAnimTypeNone = 0,
        msoAnimTypeMotion = 1,
        msoAnimTypeColor = 2,
        msoAnimTypeScale = 3,
        msoAnimTypeRotation = 4,
        msoAnimTypeProperty = 5,
        msoAnimTypeCommand = 6,
        msoAnimTypeFilter = 7,
        msoAnimTypeSet = 8
    } MsoAnimType;

    [
      odl,
      uuid(914934E3-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a0280),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnimationBehaviors : Collection {
        [id(0x000007d1), propget, helpcontext(0x000a0281)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a0282)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000a0283),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] AnimationBehavior** Item);
        [id(0x000007d3), helpcontext(0x000a0284)]
        HRESULT Add(
                        [in] MsoAnimType Type,
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] AnimationBehavior** Add);
    };

    typedef [uuid(F9D204A8-2D7B-4F32-ABE4-94650F0E2B72)]
    enum {
        msoAnimAdditiveAddBase = 1,
        msoAnimAdditiveAddSum = 2
    } MsoAnimAdditive;

    typedef [uuid(661ECFC7-4D4F-4BF9-B5F1-D4718EE3F9CA)]
    enum {
        msoAnimAccumulateNone = 1,
        msoAnimAccumulateAlways = 2
    } MsoAnimAccumulate;

    [
      odl,
      uuid(914934E4-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a0668),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnimationBehavior : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a0669)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a066a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a066b)]
        HRESULT Additive([out, retval] MsoAnimAdditive* Additive);
        [id(0x000007d3), propput, helpcontext(0x000a066b)]
        HRESULT Additive([in] MsoAnimAdditive Additive);
        [id(0x000007d4), propget, helpcontext(0x000a066c)]
        HRESULT Accumulate([out, retval] MsoAnimAccumulate* Accumulate);
        [id(0x000007d4), propput, helpcontext(0x000a066c)]
        HRESULT Accumulate([in] MsoAnimAccumulate Accumulate);
        [id(0x000007d5), propget, helpcontext(0x000a066d)]
        HRESULT Type([out, retval] MsoAnimType* Type);
        [id(0x000007d5), propput, helpcontext(0x000a066d)]
        HRESULT Type([in] MsoAnimType Type);
        [id(0x000007d6), propget, helpcontext(0x000a066e)]
        HRESULT MotionEffect([out, retval] MotionEffect** MotionEffect);
        [id(0x000007d7), propget, helpcontext(0x000a066f)]
        HRESULT ColorEffect([out, retval] ColorEffect** ColorEffect);
        [id(0x000007d8), propget, helpcontext(0x000a0670)]
        HRESULT ScaleEffect([out, retval] ScaleEffect** ScaleEffect);
        [id(0x000007d9), propget, helpcontext(0x000a0671)]
        HRESULT RotationEffect([out, retval] RotationEffect** RotationEffect);
        [id(0x000007da), propget, helpcontext(0x000a0672)]
        HRESULT PropertyEffect([out, retval] PropertyEffect** PropertyEffect);
        [id(0x000007db), propget, helpcontext(0x000a0673)]
        HRESULT Timing([out, retval] Timing** Timing);
        [id(0x000007dc), helpcontext(0x000a0674)]
        HRESULT Delete();
        [id(0x000007dd), propget, helpcontext(0x000a0675)]
        HRESULT CommandEffect([out, retval] CommandEffect** CommandEffect);
        [id(0x000007de), propget, helpcontext(0x000a0676)]
        HRESULT FilterEffect([out, retval] FilterEffect** FilterEffect);
        [id(0x000007df), propget, helpcontext(0x000a0677)]
        HRESULT SetEffect([out, retval] SetEffect** SetEffect);
    };

    [
      odl,
      uuid(914934E5-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a0a50),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MotionEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a0a51)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a0a52)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a0a53)]
        HRESULT ByX([out, retval] single* ByX);
        [id(0x000007d3), propput, helpcontext(0x000a0a53)]
        HRESULT ByX([in] single ByX);
        [id(0x000007d4), propget, helpcontext(0x000a0a54)]
        HRESULT ByY([out, retval] single* ByY);
        [id(0x000007d4), propput, helpcontext(0x000a0a54)]
        HRESULT ByY([in] single ByY);
        [id(0x000007d5), propget, helpcontext(0x000a0a55)]
        HRESULT FromX([out, retval] single* FromX);
        [id(0x000007d5), propput, helpcontext(0x000a0a55)]
        HRESULT FromX([in] single FromX);
        [id(0x000007d6), propget, helpcontext(0x000a0a56)]
        HRESULT FromY([out, retval] single* FromY);
        [id(0x000007d6), propput, helpcontext(0x000a0a56)]
        HRESULT FromY([in] single FromY);
        [id(0x000007d7), propget, helpcontext(0x000a0a57)]
        HRESULT ToX([out, retval] single* ToX);
        [id(0x000007d7), propput, helpcontext(0x000a0a57)]
        HRESULT ToX([in] single ToX);
        [id(0x000007d8), propget, helpcontext(0x000a0a58)]
        HRESULT ToY([out, retval] single* ToY);
        [id(0x000007d8), propput, helpcontext(0x000a0a58)]
        HRESULT ToY([in] single ToY);
        [id(0x000007d9), propget, helpcontext(0x000a0a59)]
        HRESULT Path([out, retval] BSTR* Path);
        [id(0x000007d9), propput, helpcontext(0x000a0a59)]
        HRESULT Path([in] BSTR Path);
    };

    [
      odl,
      uuid(914934E6-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a0e38),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a0e39)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a0e3a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a0e3b)]
        HRESULT By([out, retval] ColorFormat** By);
        [id(0x000007d4), propget, helpcontext(0x000a0e3c)]
        HRESULT From([out, retval] ColorFormat** From);
        [id(0x000007d5), propget, helpcontext(0x000a0e3d)]
        HRESULT To([out, retval] ColorFormat** To);
    };

    [
      odl,
      uuid(914934E7-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a1220),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ScaleEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a1221)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a1222)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a1223)]
        HRESULT ByX([out, retval] single* ByX);
        [id(0x000007d3), propput, helpcontext(0x000a1223)]
        HRESULT ByX([in] single ByX);
        [id(0x000007d4), propget, helpcontext(0x000a1224)]
        HRESULT ByY([out, retval] single* ByY);
        [id(0x000007d4), propput, helpcontext(0x000a1224)]
        HRESULT ByY([in] single ByY);
        [id(0x000007d5), propget, helpcontext(0x000a1225)]
        HRESULT FromX([out, retval] single* FromX);
        [id(0x000007d5), propput, helpcontext(0x000a1225)]
        HRESULT FromX([in] single FromX);
        [id(0x000007d6), propget, helpcontext(0x000a1226)]
        HRESULT FromY([out, retval] single* FromY);
        [id(0x000007d6), propput, helpcontext(0x000a1226)]
        HRESULT FromY([in] single FromY);
        [id(0x000007d7), propget, helpcontext(0x000a1227)]
        HRESULT ToX([out, retval] single* ToX);
        [id(0x000007d7), propput, helpcontext(0x000a1227)]
        HRESULT ToX([in] single ToX);
        [id(0x000007d8), propget, helpcontext(0x000a1228)]
        HRESULT ToY([out, retval] single* ToY);
        [id(0x000007d8), propput, helpcontext(0x000a1228)]
        HRESULT ToY([in] single ToY);
    };

    [
      odl,
      uuid(914934E8-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a1608),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RotationEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a1609)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a160a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a160b)]
        HRESULT By([out, retval] single* By);
        [id(0x000007d3), propput, helpcontext(0x000a160b)]
        HRESULT By([in] single By);
        [id(0x000007d4), propget, helpcontext(0x000a160c)]
        HRESULT From([out, retval] single* From);
        [id(0x000007d4), propput, helpcontext(0x000a160c)]
        HRESULT From([in] single From);
        [id(0x000007d5), propget, helpcontext(0x000a160d)]
        HRESULT To([out, retval] single* To);
        [id(0x000007d5), propput, helpcontext(0x000a160d)]
        HRESULT To([in] single To);
    };

    typedef [uuid(BD7BAABC-C4F9-402E-A98C-B9840A10D355)]
    enum {
        msoAnimNone = 0,
        msoAnimX = 1,
        msoAnimY = 2,
        msoAnimWidth = 3,
        msoAnimHeight = 4,
        msoAnimOpacity = 5,
        msoAnimRotation = 6,
        msoAnimColor = 7,
        msoAnimVisibility = 8,
        msoAnimTextFontBold = 100,
        msoAnimTextFontColor = 101,
        msoAnimTextFontEmboss = 102,
        msoAnimTextFontItalic = 103,
        msoAnimTextFontName = 104,
        msoAnimTextFontShadow = 105,
        msoAnimTextFontSize = 106,
        msoAnimTextFontSubscript = 107,
        msoAnimTextFontSuperscript = 108,
        msoAnimTextFontUnderline = 109,
        msoAnimTextFontStrikeThrough = 110,
        msoAnimTextBulletCharacter = 111,
        msoAnimTextBulletFontName = 112,
        msoAnimTextBulletNumber = 113,
        msoAnimTextBulletColor = 114,
        msoAnimTextBulletRelativeSize = 115,
        msoAnimTextBulletStyle = 116,
        msoAnimTextBulletType = 117,
        msoAnimShapePictureContrast = 1000,
        msoAnimShapePictureBrightness = 1001,
        msoAnimShapePictureGamma = 1002,
        msoAnimShapePictureGrayscale = 1003,
        msoAnimShapeFillOn = 1004,
        msoAnimShapeFillColor = 1005,
        msoAnimShapeFillOpacity = 1006,
        msoAnimShapeFillBackColor = 1007,
        msoAnimShapeLineOn = 1008,
        msoAnimShapeLineColor = 1009,
        msoAnimShapeShadowOn = 1010,
        msoAnimShapeShadowType = 1011,
        msoAnimShapeShadowColor = 1012,
        msoAnimShapeShadowOpacity = 1013,
        msoAnimShapeShadowOffsetX = 1014,
        msoAnimShapeShadowOffsetY = 1015
    } MsoAnimProperty;

    [
      odl,
      uuid(914934E9-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a19f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PropertyEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a19f1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a19f2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a19f3)]
        HRESULT Property([out, retval] MsoAnimProperty* Property);
        [id(0x000007d3), propput, helpcontext(0x000a19f3)]
        HRESULT Property([in] MsoAnimProperty Property);
        [id(0x000007d4), propget, helpcontext(0x000a19f4)]
        HRESULT Points([out, retval] AnimationPoints** Points);
        [id(0x000007d5), propget, helpcontext(0x000a19f5)]
        HRESULT From([out, retval] VARIANT* From);
        [id(0x000007d5), propput, helpcontext(0x000a19f5)]
        HRESULT From([in] VARIANT From);
        [id(0x000007d6), propget, helpcontext(0x000a19f6)]
        HRESULT To([out, retval] VARIANT* To);
        [id(0x000007d6), propput, helpcontext(0x000a19f6)]
        HRESULT To([in] VARIANT To);
    };

    [
      odl,
      uuid(914934EA-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a1dd8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnimationPoints : Collection {
        [id(0x000007d1), propget, helpcontext(0x000a1dd9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a1dda)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000a1ddb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] AnimationPoint** Item);
        [id(0x000007d3), helpcontext(0x000a1ddc)]
        HRESULT Add(
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] AnimationPoint** Add);
        [id(0x000007d4), propget, helpcontext(0x000a1ddd)]
        HRESULT Smooth([out, retval] MsoTriState* Smooth);
        [id(0x000007d4), propput, helpcontext(0x000a1ddd)]
        HRESULT Smooth([in] MsoTriState Smooth);
    };

    [
      odl,
      uuid(914934EB-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a21c0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnimationPoint : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a21c1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a21c2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), helpcontext(0x000a21c3)]
        HRESULT Delete();
        [id(0x000007d4), propget, helpcontext(0x000a21c4)]
        HRESULT Time([out, retval] single* Time);
        [id(0x000007d4), propput, helpcontext(0x000a21c4)]
        HRESULT Time([in] single Time);
        [id(0x000007d5), propget, helpcontext(0x000a21c5)]
        HRESULT Value([out, retval] VARIANT* Value);
        [id(0x000007d5), propput, helpcontext(0x000a21c5)]
        HRESULT Value([in] VARIANT Value);
        [id(0x000007d6), propget, helpcontext(0x000a21c6)]
        HRESULT Formula([out, retval] BSTR* Formula);
        [id(0x000007d6), propput, helpcontext(0x000a21c6)]
        HRESULT Formula([in] BSTR Formula);
    };

    typedef [uuid(14876707-AF12-41EE-983D-E7366840A4DF)]
    enum {
        ppAlertsNone = 1,
        ppAlertsAll = 2
    } PpAlertLevel;

    [
      odl,
      uuid(914934EC-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a25a8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface CanvasShapes : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x000a25a9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget, helpcontext(0x000a25aa)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), helpcontext(0x000a25ab),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget, helpcontext(0x000a25ac)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a), helpcontext(0x000a25ad)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Callout);
        [id(0x0000000b), helpcontext(0x000a25ae)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type,
                        [in] single BeginX,
                        [in] single BeginY,
                        [in] single EndX,
                        [in] single EndY,
                        [out, retval] Shape** Connector);
        [id(0x0000000c), helpcontext(0x000a25af)]
        HRESULT AddCurve(
                        [in] VARIANT SafeArrayOfPoints,
                        [out, retval] Shape** Curve);
        [id(0x0000000d), helpcontext(0x000a25b0)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Label);
        [id(0x0000000e), helpcontext(0x000a25b1)]
        HRESULT AddLine(
                        [in] single BeginX,
                        [in] single BeginY,
                        [in] single EndX,
                        [in] single EndY,
                        [out, retval] Shape** Line);
        [id(0x0000000f), helpcontext(0x000a25b2)]
        HRESULT AddPicture(
                        [in] BSTR FileName,
                        [in] MsoTriState LinkToFile,
                        [in] MsoTriState SaveWithDocument,
                        [in] single Left,
                        [in] single Top,
                        [in, optional, defaultvalue(-1)] single Width,
                        [in, optional, defaultvalue(-1)] single Height,
                        [out, retval] Shape** Picture);
        [id(0x00000010), helpcontext(0x000a25b3)]
        HRESULT AddPolyline(
                        [in] VARIANT SafeArrayOfPoints,
                        [out, retval] Shape** Polyline);
        [id(0x00000011), helpcontext(0x000a25b4)]
        HRESULT AddShape(
                        [in] MsoAutoShapeType Type,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Shape);
        [id(0x00000012), helpcontext(0x000a25b5)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect,
                        [in] BSTR Text,
                        [in] BSTR FontName,
                        [in] single FontSize,
                        [in] MsoTriState FontBold,
                        [in] MsoTriState FontItalic,
                        [in] single Left,
                        [in] single Top,
                        [out, retval] Shape** TextEffect);
        [id(0x00000013), helpcontext(0x000a25b6)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation,
                        [in] single Left,
                        [in] single Top,
                        [in] single Width,
                        [in] single Height,
                        [out, retval] Shape** Textbox);
        [id(0x00000014), helpcontext(0x000a25b7)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType,
                        [in] single X1,
                        [in] single Y1,
                        [out, retval] FreeformBuilder** FreeformBuilder);
        [id(0x00000015), helpcontext(0x000a25b8)]
        HRESULT Range(
                        [in] VARIANT Index,
                        [out, retval] ShapeRange** Range);
        [id(0x00000016), helpcontext(0x000a25b9)]
        HRESULT SelectAll();
        [id(0x00000064), propget, helpcontext(0x000a25ba)]
        HRESULT Background([out, retval] Shape** Background);
    };

    typedef [uuid(DDFE9852-7847-4826-A6AB-0322E069C378)]
    enum {
        ppRevisionInfoNone = 0,
        ppRevisionInfoBaseline = 1,
        ppRevisionInfoMerged = 2
    } PpRevisionInfo;

    [
      odl,
      uuid(914934ED-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a2990),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a2991)]
        HRESULT DisplayAutoCorrectOptions([out, retval] VARIANT_BOOL* DisplayAutoCorrectOptions);
        [id(0x000007d1), propput, helpcontext(0x000a2991)]
        HRESULT DisplayAutoCorrectOptions([in] VARIANT_BOOL DisplayAutoCorrectOptions);
        [id(0x000007d2), propget, helpcontext(0x000a2992)]
        HRESULT DisplayAutoLayoutOptions([out, retval] VARIANT_BOOL* DisplayAutoLayoutOptions);
        [id(0x000007d2), propput, helpcontext(0x000a2992)]
        HRESULT DisplayAutoLayoutOptions([in] VARIANT_BOOL DisplayAutoLayoutOptions);
    };

    [
      odl,
      uuid(914934EE-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a2d78),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Options : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a2d79)]
        HRESULT DisplayPasteOptions([out, retval] MsoTriState* DisplayPasteOptions);
        [id(0x000007d1), propput, helpcontext(0x000a2d79)]
        HRESULT DisplayPasteOptions([in] MsoTriState DisplayPasteOptions);
        [id(0x000007d2), propget, hidden, helpcontext(0x000a2d7a)]
        HRESULT DoNotPromptForConvert([out, retval] MsoTriState* DoNotPromptForConvert);
        [id(0x000007d2), propput, hidden, helpcontext(0x000a2d7a)]
        HRESULT DoNotPromptForConvert([in] MsoTriState DoNotPromptForConvert);
        [id(0x000007d3), propget, helpcontext(0x000a2d7b)]
        HRESULT ShowCoauthoringMergeChanges([out, retval] VARIANT_BOOL* ShowCoauthoringMergeChanges);
        [id(0x000007d3), propput, helpcontext(0x000a2d7b)]
        HRESULT ShowCoauthoringMergeChanges([in] VARIANT_BOOL ShowCoauthoringMergeChanges);
    };

    typedef [uuid(25DAEE6C-E895-441F-BF3E-69FB4253DFE5)]
    enum {
        msoAnimCommandTypeEvent = 0,
        msoAnimCommandTypeCall = 1,
        msoAnimCommandTypeVerb = 2
    } MsoAnimCommandType;

    [
      odl,
      uuid(914934EF-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a3160),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CommandEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a3161)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a3162)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a3163)]
        HRESULT Type([out, retval] MsoAnimCommandType* Type);
        [id(0x000007d3), propput, helpcontext(0x000a3163)]
        HRESULT Type([in] MsoAnimCommandType Type);
        [id(0x000007d4), propget, helpcontext(0x000a3164)]
        HRESULT Command([out, retval] BSTR* Command);
        [id(0x000007d4), propput, helpcontext(0x000a3164)]
        HRESULT Command([in] BSTR Command);
        [id(0x000007d5), propget, helpcontext(0x000a3165)]
        HRESULT bookmark([out, retval] BSTR* bookmark);
        [id(0x000007d5), propput, helpcontext(0x000a3165)]
        HRESULT bookmark([in] BSTR bookmark);
    };

    typedef [uuid(2F291805-EABF-4F68-801D-A2CC04340F2B)]
    enum {
        msoAnimFilterEffectTypeNone = 0,
        msoAnimFilterEffectTypeBarn = 1,
        msoAnimFilterEffectTypeBlinds = 2,
        msoAnimFilterEffectTypeBox = 3,
        msoAnimFilterEffectTypeCheckerboard = 4,
        msoAnimFilterEffectTypeCircle = 5,
        msoAnimFilterEffectTypeDiamond = 6,
        msoAnimFilterEffectTypeDissolve = 7,
        msoAnimFilterEffectTypeFade = 8,
        msoAnimFilterEffectTypeImage = 9,
        msoAnimFilterEffectTypePixelate = 10,
        msoAnimFilterEffectTypePlus = 11,
        msoAnimFilterEffectTypeRandomBar = 12,
        msoAnimFilterEffectTypeSlide = 13,
        msoAnimFilterEffectTypeStretch = 14,
        msoAnimFilterEffectTypeStrips = 15,
        msoAnimFilterEffectTypeWedge = 16,
        msoAnimFilterEffectTypeWheel = 17,
        msoAnimFilterEffectTypeWipe = 18
    } MsoAnimFilterEffectType;

    typedef [uuid(FCFB2414-4EBB-4875-B0A4-A697CA47AF6A)]
    enum {
        msoAnimFilterEffectSubtypeNone = 0,
        msoAnimFilterEffectSubtypeInVertical = 1,
        msoAnimFilterEffectSubtypeOutVertical = 2,
        msoAnimFilterEffectSubtypeInHorizontal = 3,
        msoAnimFilterEffectSubtypeOutHorizontal = 4,
        msoAnimFilterEffectSubtypeHorizontal = 5,
        msoAnimFilterEffectSubtypeVertical = 6,
        msoAnimFilterEffectSubtypeIn = 7,
        msoAnimFilterEffectSubtypeOut = 8,
        msoAnimFilterEffectSubtypeAcross = 9,
        msoAnimFilterEffectSubtypeFromLeft = 10,
        msoAnimFilterEffectSubtypeFromRight = 11,
        msoAnimFilterEffectSubtypeFromTop = 12,
        msoAnimFilterEffectSubtypeFromBottom = 13,
        msoAnimFilterEffectSubtypeDownLeft = 14,
        msoAnimFilterEffectSubtypeUpLeft = 15,
        msoAnimFilterEffectSubtypeDownRight = 16,
        msoAnimFilterEffectSubtypeUpRight = 17,
        msoAnimFilterEffectSubtypeSpokes1 = 18,
        msoAnimFilterEffectSubtypeSpokes2 = 19,
        msoAnimFilterEffectSubtypeSpokes3 = 20,
        msoAnimFilterEffectSubtypeSpokes4 = 21,
        msoAnimFilterEffectSubtypeSpokes8 = 22,
        msoAnimFilterEffectSubtypeLeft = 23,
        msoAnimFilterEffectSubtypeRight = 24,
        msoAnimFilterEffectSubtypeDown = 25,
        msoAnimFilterEffectSubtypeUp = 26
    } MsoAnimFilterEffectSubtype;

    [
      odl,
      uuid(914934F0-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a3548),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FilterEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a3549)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a354a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a354b)]
        HRESULT Type([out, retval] MsoAnimFilterEffectType* Type);
        [id(0x000007d3), propput, helpcontext(0x000a354b)]
        HRESULT Type([in] MsoAnimFilterEffectType Type);
        [id(0x000007d4), propget, helpcontext(0x000a354c)]
        HRESULT Subtype([out, retval] MsoAnimFilterEffectSubtype* Subtype);
        [id(0x000007d4), propput, helpcontext(0x000a354c)]
        HRESULT Subtype([in] MsoAnimFilterEffectSubtype Subtype);
        [id(0x000007d5), propget, helpcontext(0x000a354d)]
        HRESULT Reveal([out, retval] MsoTriState* Reveal);
        [id(0x000007d5), propput, helpcontext(0x000a354d)]
        HRESULT Reveal([in] MsoTriState Reveal);
    };

    [
      odl,
      uuid(914934F1-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a3930),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SetEffect : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a3931)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a3932)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a3933)]
        HRESULT Property([out, retval] MsoAnimProperty* Property);
        [id(0x000007d3), propput, helpcontext(0x000a3933)]
        HRESULT Property([in] MsoAnimProperty Property);
        [id(0x000007d4), propget, helpcontext(0x000a3934)]
        HRESULT To([out, retval] VARIANT* To);
        [id(0x000007d4), propput, helpcontext(0x000a3934)]
        HRESULT To([in] VARIANT To);
    };

    [
      odl,
      uuid(914934F2-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a3d18),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomLayouts : Collection {
        [id(0x000007d1), propget, helpcontext(0x000a3d19)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a3d1a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000a3d1b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] CustomLayout** Item);
        [id(0x000007d3), helpcontext(0x000a3d1c)]
        HRESULT Add(
                        [in] int Index,
                        [out, retval] CustomLayout** Add);
        [id(0x000007d4), helpcontext(0x000a3d1d)]
        HRESULT Paste(
                        [in, optional, defaultvalue(-1)] int Index,
                        [out, retval] CustomLayout** Paste);
    };

    [
      odl,
      uuid(914934F3-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a4100),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomLayout : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a4101)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a4102)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000a4103)]
        HRESULT Shapes([out, retval] Shapes** Shapes);
        [id(0x000007d4), propget, helpcontext(0x000a4104)]
        HRESULT HeadersFooters([out, retval] HeadersFooters** HeadersFooters);
        [id(0x000007d5), propget, helpcontext(0x000a4105)]
        HRESULT Background([out, retval] ShapeRange** Background);
        [id(0x000007d6), propget, helpcontext(0x000a4106)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d6), propput, helpcontext(0x000a4106)]
        HRESULT Name([in] BSTR Name);
        [id(0x000007d7), helpcontext(0x000a4107)]
        HRESULT Delete();
        [id(0x000007d8), propget, helpcontext(0x000a4108)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007d9), propget, helpcontext(0x000a4109)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007da), propget, helpcontext(0x000a410a)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** Hyperlinks);
        [id(0x000007db), propget, helpcontext(0x000a410b)]
        HRESULT Design([out, retval] Design** Design);
        [id(0x000007dc), propget, helpcontext(0x000a410c)]
        HRESULT TimeLine([out, retval] TimeLine** TimeLine);
        [id(0x000007dd), propget, helpcontext(0x000a410d)]
        HRESULT SlideShowTransition([out, retval] SlideShowTransition** SlideShowTransition);
        [id(0x000007de), propget, helpcontext(0x000a410e)]
        HRESULT MatchingName([out, retval] BSTR* MatchingName);
        [id(0x000007de), propput, helpcontext(0x000a410e)]
        HRESULT MatchingName([in] BSTR MatchingName);
        [id(0x000007df), propget, helpcontext(0x000a410f)]
        HRESULT Preserved([out, retval] MsoTriState* Preserved);
        [id(0x000007df), propput, helpcontext(0x000a410f)]
        HRESULT Preserved([in] MsoTriState Preserved);
        [id(0x000007e0), propget, helpcontext(0x000a4110)]
        HRESULT Index([out, retval] int* Index);
        [id(0x000007e1), helpcontext(0x000a4111)]
        HRESULT Select();
        [id(0x000007e2), helpcontext(0x000a4112)]
        HRESULT Cut();
        [id(0x000007e3), helpcontext(0x000a4113)]
        HRESULT Copy();
        [id(0x000007e4), helpcontext(0x000a4114)]
        HRESULT Duplicate([out, retval] CustomLayout** Duplicate);
        [id(0x000007e5), helpcontext(0x000a4115)]
        HRESULT MoveTo([in] int toPos);
        [id(0x000007e6), propget, helpcontext(0x000a4116)]
        HRESULT DisplayMasterShapes([out, retval] MsoTriState* DisplayMasterShapes);
        [id(0x000007e6), propput, helpcontext(0x000a4116)]
        HRESULT DisplayMasterShapes([in] MsoTriState DisplayMasterShapes);
        [id(0x000007e7), propget, helpcontext(0x000a4117)]
        HRESULT FollowMasterBackground([out, retval] MsoTriState* FollowMasterBackground);
        [id(0x000007e7), propput, helpcontext(0x000a4117)]
        HRESULT FollowMasterBackground([in] MsoTriState FollowMasterBackground);
        [id(0x000007e8), propget, helpcontext(0x000a4118)]
        HRESULT ThemeColorScheme([out, retval] ThemeColorScheme** ThemeColorScheme);
        [id(0x000007e9), propget, helpcontext(0x000a4119)]
        HRESULT CustomerData([out, retval] CustomerData** CustomerData);
        [id(0x000007ea), propget, helpcontext(0x000a411a)]
        HRESULT Guides([out, retval] Guides** Guides);
    };

    typedef [uuid(3B006E87-E68C-4933-9095-BBB3336FE234)]
    enum {
        ppRDIComments = 1,
        ppRDIRemovePersonalInformation = 4,
        ppRDIDocumentProperties = 8,
        ppRDIDocumentWorkspace = 10,
        ppRDIInkAnnotations = 11,
        ppRDIPublishPath = 13,
        ppRDIDocumentServerProperties = 14,
        ppRDIDocumentManagementPolicy = 15,
        ppRDIContentType = 16,
        ppRDISlideUpdateInformation = 17,
        ppRDIAll = 99
    } PpRemoveDocInfoType;

    typedef [uuid(F4694AF5-8686-44E1-978F-EEBA63557B90)]
    enum {
        ppCheckInMinorVersion = 0,
        ppCheckInMajorVersion = 1,
        ppCheckInOverwriteVersion = 2
    } PpCheckInVersionType;

    typedef [uuid(ABF6BCAE-EB69-4044-BD66-87DB3A1E0211)]
    enum {
        msoClickStateAfterAllAnimations = -2,
        msoClickStateBeforeAutomaticAnimations = -1
    } MsoClickState;

    typedef [uuid(CD470FBB-4284-4670-87E5-F315EF63D556)]
    enum {
        ppFixedFormatTypeXPS = 1,
        ppFixedFormatTypePDF = 2
    } PpFixedFormatType;

    typedef [uuid(2CF9706B-E805-4EF6-BA87-7B7EBBD43D42)]
    enum {
        ppFixedFormatIntentScreen = 1,
        ppFixedFormatIntentPrint = 2
    } PpFixedFormatIntent;

    [
      odl,
      uuid(914934F5-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a48d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableStyle : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a48d1)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d2), propget, helpcontext(0x000a48d2)]
        HRESULT Id([out, retval] BSTR* Id);
    };

    [
      odl,
      uuid(914934F6-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a4cb8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomerData : Collection {
        [id(0x000007d1), propget, helpcontext(0x000a4cb9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a4cba)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000a4cbb),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] BSTR Id,
                        [out, retval] CustomXMLPart** Item);
        [id(0x000007d3), helpcontext(0x000a4cbc)]
        HRESULT Add([out, retval] CustomXMLPart** Add);
        [id(0x000007d4), helpcontext(0x000a4cbd)]
        HRESULT Delete([in] BSTR Id);
    };

    [
      odl,
      uuid(914934F7-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a50a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Research : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a50a1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a50a2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), helpcontext(0x000a50a3)]
        HRESULT Query(
                        [in] BSTR ServiceID,
                        [in, optional] VARIANT* QueryString,
                        [in, optional] VARIANT* QueryLanguage,
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseSelection,
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL LaunchQuery);
        [id(0x000007d4), helpcontext(0x000a50a4)]
        HRESULT SetLanguagePair(
                        [in] VARIANT* Language1,
                        [in] VARIANT* Language2);
        [id(0x000007d5), helpcontext(0x000a50a5)]
        HRESULT IsResearchService(
                        [in] BSTR ServiceID,
                        [out, retval] VARIANT_BOOL* IsResearchService);
    };

    [
      odl,
      uuid(914934F8-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a5488),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableBackground : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a5489)]
        HRESULT Fill([out, retval] FillFormat** Fill);
        [id(0x000007d2), propget, helpcontext(0x000a548a)]
        HRESULT Picture([out, retval] PictureFormat** Picture);
        [id(0x000007d3), propget, helpcontext(0x000a548b)]
        HRESULT Reflection([out, retval] ReflectionFormat** Reflection);
        [id(0x000007d4), propget, helpcontext(0x000a548c)]
        HRESULT Shadow([out, retval] ShadowFormat** Shadow);
    };

    [
      odl,
      uuid(914934F9-5A91-11CF-8700-00AA0060263B),
      helpcontext(0x000a5870),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame2 : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x000007d2), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
        [id(0x00000001), propget, helpcontext(0x000a5871)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget, helpcontext(0x000a5872)]
        HRESULT MarginBottom([out, retval] single* MarginBottom);
        [id(0x00000064), propput, helpcontext(0x000a5872)]
        HRESULT MarginBottom([in] single MarginBottom);
        [id(0x00000065), propget, helpcontext(0x000a5873)]
        HRESULT MarginLeft([out, retval] single* MarginLeft);
        [id(0x00000065), propput, helpcontext(0x000a5873)]
        HRESULT MarginLeft([in] single MarginLeft);
        [id(0x00000066), propget, helpcontext(0x000a5874)]
        HRESULT MarginRight([out, retval] single* MarginRight);
        [id(0x00000066), propput, helpcontext(0x000a5874)]
        HRESULT MarginRight([in] single MarginRight);
        [id(0x00000067), propget, helpcontext(0x000a5875)]
        HRESULT MarginTop([out, retval] single* MarginTop);
        [id(0x00000067), propput, helpcontext(0x000a5875)]
        HRESULT MarginTop([in] single MarginTop);
        [id(0x00000068), propget, helpcontext(0x000a5876)]
        HRESULT Orientation([out, retval] MsoTextOrientation* Orientation);
        [id(0x00000068), propput, helpcontext(0x000a5876)]
        HRESULT Orientation([in] MsoTextOrientation Orientation);
        [id(0x00000069), propget, helpcontext(0x000a5877)]
        HRESULT HorizontalAnchor([out, retval] MsoHorizontalAnchor* HorizontalAnchor);
        [id(0x00000069), propput, helpcontext(0x000a5877)]
        HRESULT HorizontalAnchor([in] MsoHorizontalAnchor HorizontalAnchor);
        [id(0x0000006a), propget, helpcontext(0x000a5878)]
        HRESULT VerticalAnchor([out, retval] MsoVerticalAnchor* VerticalAnchor);
        [id(0x0000006a), propput, helpcontext(0x000a5878)]
        HRESULT VerticalAnchor([in] MsoVerticalAnchor VerticalAnchor);
        [id(0x0000006b), propget, helpcontext(0x000a5879)]
        HRESULT PathFormat([out, retval] MsoPathFormat* PathFormat);
        [id(0x0000006b), propput, helpcontext(0x000a5879)]
        HRESULT PathFormat([in] MsoPathFormat PathFormat);
        [id(0x0000006c), propget, helpcontext(0x000a587a)]
        HRESULT WarpFormat([out, retval] MsoWarpFormat* WarpFormat);
        [id(0x0000006c), propput, helpcontext(0x000a587a)]
        HRESULT WarpFormat([in] MsoWarpFormat WarpFormat);
        [id(0x0000006d), propget, helpcontext(0x000a587b)]
        HRESULT WordArtFormat([out, retval] MsoPresetTextEffect* WordArtFormat);
        [id(0x0000006d), propput, helpcontext(0x000a587b)]
        HRESULT WordArtFormat([in] MsoPresetTextEffect WordArtFormat);
        [id(0x0000006e), propget, helpcontext(0x000a587c)]
        HRESULT WordWrap([out, retval] MsoTriState* WordWrap);
        [id(0x0000006e), propput, helpcontext(0x000a587c)]
        HRESULT WordWrap([in] MsoTriState WordWrap);
        [id(0x0000006f), propget, helpcontext(0x000a587d)]
        HRESULT AutoSize([out, retval] MsoAutoSize* AutoSize);
        [id(0x0000006f), propput, helpcontext(0x000a587d)]
        HRESULT AutoSize([in] MsoAutoSize AutoSize);
        [id(0x00000070), propget, helpcontext(0x000a587e)]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x00000071), propget, helpcontext(0x000a587f)]
        HRESULT HasText([out, retval] MsoTriState* pHasText);
        [id(0x00000072), propget, helpcontext(0x000a5880)]
        HRESULT TextRange([out, retval] TextRange2** Range);
        [id(0x00000073), propget, helpcontext(0x000a5881)]
        HRESULT Column([out, retval] TextColumn2** Column);
        [id(0x00000074), propget, helpcontext(0x000a5882)]
        HRESULT Ruler([out, retval] Ruler2** Ruler);
        [id(0x00000075), helpcontext(0x000a5883)]
        HRESULT DeleteText();
        [id(0x00000076), propget, helpcontext(0x000a5884)]
        HRESULT NoTextRotation([out, retval] MsoTriState* NoTextRotation);
        [id(0x00000076), propput, helpcontext(0x000a5884)]
        HRESULT NoTextRotation([in] MsoTriState NoTextRotation);
    };

    [
      odl,
      uuid(92D41A50-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a5c58),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileConverters : Collection {
        [id(00000000), helpcontext(0x000a5c59),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] FileConverter** Item);
    };

    [
      odl,
      uuid(92D41A51-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a6040),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileConverter : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a6041)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a6042)]
        HRESULT CanOpen([out, retval] VARIANT_BOOL* CanOpen);
        [id(0x000007d3), propget, helpcontext(0x000a6043)]
        HRESULT CanSave([out, retval] VARIANT_BOOL* CanSave);
        [id(0x000007d4), propget, helpcontext(0x000a6044)]
        HRESULT ClassName([out, retval] BSTR* ClassName);
        [id(0x000007d5), propget, helpcontext(0x000a6045)]
        HRESULT Creator([out, retval] FileConverters** Creator);
        [id(0x000007d6), propget, helpcontext(0x000a6046)]
        HRESULT Extensions([out, retval] BSTR* Extensions);
        [id(0x000007d7), propget, helpcontext(0x000a6047)]
        HRESULT FormatName([out, retval] BSTR* FormatName);
        [id(0x000007d8), propget, helpcontext(0x000a6048)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d9), propget, helpcontext(0x000a6049)]
        HRESULT Parent([out, retval] FileConverters** Parent);
        [id(0x000007da), propget, helpcontext(0x000a604a)]
        HRESULT Path([out, retval] BSTR* Path);
        [id(0x000007db), propget, helpcontext(0x000a604b)]
        HRESULT OpenFormat([out, retval] long* OpenFormat);
        [id(0x000007dc), propget, helpcontext(0x000a604c)]
        HRESULT SaveFormat([out, retval] long* SaveFormat);
    };

    typedef [uuid(628C4ECD-2840-41AB-BA67-FE836C277E76)]
    enum {
        xlBackgroundAutomatic = -4105,
        xlBackgroundOpaque = 3,
        xlBackgroundTransparent = 2
    } XlBackground;

    typedef [uuid(B1AC486B-FEB5-4F91-AB5A-674BD3C93FF7)]
    enum {
        xlBuiltIn = 21,
        xlUserDefined = 22,
        xlAnyGallery = 23
    } XlChartGallery;

    typedef [uuid(361D6719-C6C7-438C-849F-09F55B485C30)]
    enum {
        xlSides = 1,
        xlEnd = 2,
        xlEndSides = 3,
        xlFront = 4,
        xlFrontSides = 5,
        xlFrontEnd = 6,
        xlAllFaces = 7
    } XlChartPicturePlacement;

    typedef [uuid(6D851B33-E263-4602-B4BD-96ED7CB4F542)]
    enum {
        xlDataLabelSeparatorDefault = 1
    } XlDataLabelSeparator;

    typedef [uuid(F800B4FC-157E-49F8-80A8-07A524F87C63)]
    enum {
        xlPatternAutomatic = -4105,
        xlPatternChecker = 9,
        xlPatternCrissCross = 16,
        xlPatternDown = -4121,
        xlPatternGray16 = 17,
        xlPatternGray25 = -4124,
        xlPatternGray50 = -4125,
        xlPatternGray75 = -4126,
        xlPatternGray8 = 18,
        xlPatternGrid = 15,
        xlPatternHorizontal = -4128,
        xlPatternLightDown = 13,
        xlPatternLightHorizontal = 11,
        xlPatternLightUp = 14,
        xlPatternLightVertical = 12,
        xlPatternNone = -4142,
        xlPatternSemiGray75 = 10,
        xlPatternSolid = 1,
        xlPatternUp = -4162,
        xlPatternVertical = -4166,
        xlPatternLinearGradient = 4000,
        xlPatternRectangularGradient = 4001
    } XlPattern;

    typedef [uuid(A7E68D3B-0A7D-4F2E-A398-7FA9F2DB0D8A)]
    enum {
        xlPrinter = 2,
        xlScreen = 1
    } XlPictureAppearance;

    typedef [uuid(0ACDCD15-22E1-467C-A50B-9940132630A2)]
    enum {
        xlBitmap = 2,
        xlPicture = -4147
    } XlCopyPictureFormat;

    typedef [uuid(1E1C4C4B-742D-40CA-8DD8-6E9B772D117D)]
    enum {
        rgbAliceBlue = 16775408,
        rgbAntiqueWhite = 14150650,
        rgbAqua = 16776960,
        rgbAquamarine = 13959039,
        rgbAzure = 16777200,
        rgbBeige = 14480885,
        rgbBisque = 12903679,
        rgbBlack = 0,
        rgbBlanchedAlmond = 13495295,
        rgbBlue = 16711680,
        rgbBlueViolet = 14822282,
        rgbBrown = 2763429,
        rgbBurlyWood = 8894686,
        rgbCadetBlue = 10526303,
        rgbChartreuse = 65407,
        rgbCoral = 5275647,
        rgbCornflowerBlue = 15570276,
        rgbCornsilk = 14481663,
        rgbCrimson = 3937500,
        rgbDarkBlue = 9109504,
        rgbDarkCyan = 9145088,
        rgbDarkGoldenrod = 755384,
        rgbDarkGreen = 25600,
        rgbDarkGray = 11119017,
        rgbDarkGrey = 11119017,
        rgbDarkKhaki = 7059389,
        rgbDarkMagenta = 9109643,
        rgbDarkOliveGreen = 3107669,
        rgbDarkOrange = 36095,
        rgbDarkOrchid = 13382297,
        rgbDarkRed = 139,
        rgbDarkSalmon = 8034025,
        rgbDarkSeaGreen = 9419919,
        rgbDarkSlateBlue = 9125192,
        rgbDarkSlateGray = 5197615,
        rgbDarkSlateGrey = 5197615,
        rgbDarkTurquoise = 13749760,
        rgbDarkViolet = 13828244,
        rgbDeepPink = 9639167,
        rgbDeepSkyBlue = 16760576,
        rgbDimGray = 6908265,
        rgbDimGrey = 6908265,
        rgbDodgerBlue = 16748574,
        rgbFireBrick = 2237106,
        rgbFloralWhite = 15792895,
        rgbForestGreen = 2263842,
        rgbFuchsia = 16711935,
        rgbGainsboro = 14474460,
        rgbGhostWhite = 16775416,
        rgbGold = 55295,
        rgbGoldenrod = 2139610,
        rgbGray = 8421504,
        rgbGreen = 32768,
        rgbGrey = 8421504,
        rgbGreenYellow = 3145645,
        rgbHoneydew = 15794160,
        rgbHotPink = 11823615,
        rgbIndianRed = 6053069,
        rgbIndigo = 8519755,
        rgbIvory = 15794175,
        rgbKhaki = 9234160,
        rgbLavender = 16443110,
        rgbLavenderBlush = 16118015,
        rgbLawnGreen = 64636,
        rgbLemonChiffon = 13499135,
        rgbLightBlue = 15128749,
        rgbLightCoral = 8421616,
        rgbLightCyan = 9145088,
        rgbLightGoldenrodYellow = 13826810,
        rgbLightGray = 13882323,
        rgbLightGreen = 9498256,
        rgbLightGrey = 13882323,
        rgbLightPink = 12695295,
        rgbLightSalmon = 8036607,
        rgbLightSeaGreen = 11186720,
        rgbLightSkyBlue = 16436871,
        rgbLightSlateGray = 10061943,
        rgbLightSlateGrey = 10061943,
        rgbLightSteelBlue = 14599344,
        rgbLightYellow = 14745599,
        rgbLime = 65280,
        rgbLimeGreen = 3329330,
        rgbLinen = 15134970,
        rgbMaroon = 128,
        rgbMediumAquamarine = 11206502,
        rgbMediumBlue = 13434880,
        rgbMediumOrchid = 13850042,
        rgbMediumPurple = 14381203,
        rgbMediumSeaGreen = 7451452,
        rgbMediumSlateBlue = 15624315,
        rgbMediumSpringGreen = 10156544,
        rgbMediumTurquoise = 13422920,
        rgbMediumVioletRed = 8721863,
        rgbMidnightBlue = 7346457,
        rgbMintCream = 16449525,
        rgbMistyRose = 14804223,
        rgbMoccasin = 11920639,
        rgbNavajoWhite = 11394815,
        rgbNavy = 8388608,
        rgbNavyBlue = 8388608,
        rgbOldLace = 15136253,
        rgbOlive = 32896,
        rgbOliveDrab = 2330219,
        rgbOrange = 42495,
        rgbOrangeRed = 17919,
        rgbOrchid = 14053594,
        rgbPaleGoldenrod = 7071982,
        rgbPaleGreen = 10025880,
        rgbPaleTurquoise = 15658671,
        rgbPaleVioletRed = 9662683,
        rgbPapayaWhip = 14020607,
        rgbPeachPuff = 12180223,
        rgbPeru = 4163021,
        rgbPink = 13353215,
        rgbPlum = 14524637,
        rgbPowderBlue = 15130800,
        rgbPurple = 8388736,
        rgbRed = 255,
        rgbRosyBrown = 9408444,
        rgbRoyalBlue = 14772545,
        rgbSalmon = 7504122,
        rgbSandyBrown = 6333684,
        rgbSeaGreen = 5737262,
        rgbSeashell = 15660543,
        rgbSienna = 2970272,
        rgbSilver = 12632256,
        rgbSkyBlue = 15453831,
        rgbSlateBlue = 13458026,
        rgbSlateGray = 9470064,
        rgbSlateGrey = 9470064,
        rgbSnow = 16448255,
        rgbSpringGreen = 8388352,
        rgbSteelBlue = 11829830,
        rgbTan = 9221330,
        rgbTeal = 8421376,
        rgbThistle = 14204888,
        rgbTomato = 4678655,
        rgbTurquoise = 13688896,
        rgbYellow = 65535,
        rgbYellowGreen = 3329434,
        rgbViolet = 15631086,
        rgbWheat = 11788021,
        rgbWhite = 16777215,
        rgbWhiteSmoke = 16119285
    } XlRgbColor;

    typedef [uuid(850B18FB-AFB2-489C-A498-DF16AFF614F3)]
    enum {
        xlContinuous = 1,
        xlDash = -4115,
        xlDashDot = 4,
        xlDashDotDot = 5,
        xlDot = -4118,
        xlDouble = -4119,
        xlSlantDashDot = 13,
        xlLineStyleNone = -4142
    } XlLineStyle;

    typedef [uuid(B95C5967-64BB-4D6F-9EE8-9916B8637A41)]
    enum {
        xlAxisCrossesAutomatic = -4105,
        xlAxisCrossesCustom = -4114,
        xlAxisCrossesMaximum = 2,
        xlAxisCrossesMinimum = 4
    } XlAxisCrosses;

    typedef [uuid(9F3A2942-5BA4-4578-B6E3-4819C4CAD7B0)]
    enum {
        xlPrimary = 1,
        xlSecondary = 2
    } XlAxisGroup;

    typedef [uuid(DD79733B-5E46-49C9-8400-6BCF316EC79E)]
    enum {
        xlCategory = 1,
        xlSeriesAxis = 3,
        xlValue = 2
    } XlAxisType;

    typedef [uuid(D2431A3D-F112-4A83-97B2-BC3CE3C9B73B)]
    enum {
        xlBox = 0,
        xlPyramidToPoint = 1,
        xlPyramidToMax = 2,
        xlCylinder = 3,
        xlConeToPoint = 4,
        xlConeToMax = 5
    } XlBarShape;

    typedef [uuid(3918E32A-FD7F-461C-B2E0-F5605207C30B)]
    enum {
        xlHairline = 1,
        xlMedium = -4138,
        xlThick = 4,
        xlThin = 2
    } XlBorderWeight;

    typedef [uuid(406223E5-9460-41D9-BABF-B6E6D3C62F2D)]
    enum {
        xlCategoryScale = 2,
        xlTimeScale = 3,
        xlAutomaticScale = -4105
    } XlCategoryType;

    typedef [uuid(A66EB34B-BCC6-40E7-9722-398CF51F2A17)]
    enum {
        xlChartElementPositionAutomatic = -4105,
        xlChartElementPositionCustom = -4114
    } XlChartElementPosition;

    typedef [uuid(FB55F3EB-2F7C-4410-982E-ED9BC7812E32)]
    enum {
        xlDataLabel = 0,
        xlChartArea = 2,
        xlSeries = 3,
        xlChartTitle = 4,
        xlWalls = 5,
        xlCorners = 6,
        xlDataTable = 7,
        xlTrendline = 8,
        xlErrorBars = 9,
        xlXErrorBars = 10,
        xlYErrorBars = 11,
        xlLegendEntry = 12,
        xlLegendKey = 13,
        xlShape = 14,
        xlMajorGridlines = 15,
        xlMinorGridlines = 16,
        xlAxisTitle = 17,
        xlUpBars = 18,
        xlPlotArea = 19,
        xlDownBars = 20,
        xlAxis = 21,
        xlSeriesLines = 22,
        xlFloor = 23,
        xlLegend = 24,
        xlHiLoLines = 25,
        xlDropLines = 26,
        xlRadarAxisLabels = 27,
        xlNothing = 28,
        xlLeaderLines = 29,
        xlDisplayUnitLabel = 30,
        xlPivotChartFieldButton = 31,
        xlPivotChartDropZone = 32
    } XlChartItem;

    typedef [uuid(BCC70DFC-C553-4FA1-99CC-C599A711ADD0)]
    enum {
        xlDownward = -4170,
        xlHorizontal = -4128,
        xlUpward = -4171,
        xlVertical = -4166
    } XlOrientation;

    typedef [uuid(DE37E118-9080-45E2-8F09-67161638990F)]
    enum {
        xlStackScale = 3,
        xlStack = 2,
        xlStretch = 1
    } XlChartPictureType;

    typedef [uuid(878F9AD5-D422-4CA3-80A0-AE420918F413)]
    enum {
        xlSplitByPosition = 1,
        xlSplitByPercentValue = 3,
        xlSplitByCustomSplit = 4,
        xlSplitByValue = 2
    } XlChartSplitType;

    typedef [uuid(9DCDA232-6504-4F31-A174-CEEE2EFE5F27)]
    enum {
        xlColorIndexAutomatic = -4105,
        xlColorIndexNone = -4142
    } XlColorIndex;

    typedef [uuid(183EB140-C143-4A88-A7E0-15FC6E00C217)]
    enum {
        xlAutomatic = -4105,
        xlCombination = -4111,
        xlCustom = -4114,
        xlBar = 2,
        xlColumn = 3,
        xl3DBar = -4099,
        xl3DSurface = -4103,
        xlDefaultAutoFormat = -1,
        xlNone = -4142,
        xlAbove = 0,
        xlBelow = 1,
        xlBoth = 1,
        xlBottom = -4107,
        xlCenter = -4108,
        xlChecker = 9,
        xlCircle = 8,
        xlCorner = 2,
        xlCrissCross = 16,
        xlCross = 4,
        xlDiamond = 2,
        xlDistributed = -4117,
        xlFill = 5,
        xlFixedValue = 1,
        xlGeneral = 1,
        xlGray16 = 17,
        xlGray25 = -4124,
        xlGray50 = -4125,
        xlGray75 = -4126,
        xlGray8 = 18,
        xlGrid = 15,
        xlHigh = -4127,
        xlInside = 2,
        xlJustify = -4130,
        xlLeft = -4131,
        xlLightDown = 13,
        xlLightHorizontal = 11,
        xlLightUp = 14,
        xlLightVertical = 12,
        xlLow = -4134,
        xlMaximum = 2,
        xlMinimum = 4,
        xlMinusValues = 3,
        xlNextToAxis = 4,
        xlOpaque = 3,
        xlOutside = 3,
        xlPercent = 2,
        xlPlus = 9,
        xlPlusValues = 2,
        xlRight = -4152,
        xlScale = 3,
        xlSemiGray75 = 10,
        xlShowLabel = 4,
        xlShowLabelAndPercent = 5,
        xlShowPercent = 3,
        xlShowValue = 2,
        xlSingle = 2,
        xlSolid = 1,
        xlSquare = 1,
        xlStar = 5,
        xlStError = 4,
        xlTop = -4160,
        xlTransparent = 2,
        xlTriangle = 3
    } XlConstants;

    typedef [uuid(F11B2572-8FF8-44AE-9876-AEF9A8B749A8)]
    enum {
        xlLabelPositionCenter = -4108,
        xlLabelPositionAbove = 0,
        xlLabelPositionBelow = 1,
        xlLabelPositionLeft = -4131,
        xlLabelPositionRight = -4152,
        xlLabelPositionOutsideEnd = 2,
        xlLabelPositionInsideEnd = 3,
        xlLabelPositionInsideBase = 4,
        xlLabelPositionBestFit = 5,
        xlLabelPositionMixed = 6,
        xlLabelPositionCustom = 7
    } XlDataLabelPosition;

    typedef [uuid(840D3BE9-75B9-44F8-A4A9-8C23F48DFFE0)]
    enum {
        xlDataLabelsShowNone = -4142,
        xlDataLabelsShowValue = 2,
        xlDataLabelsShowPercent = 3,
        xlDataLabelsShowLabel = 4,
        xlDataLabelsShowLabelAndPercent = 5,
        xlDataLabelsShowBubbleSizes = 6
    } XlDataLabelsType;

    typedef [uuid(04B01227-B5BD-448C-89AB-D990E9E346F4)]
    enum {
        xlInterpolated = 3,
        xlNotPlotted = 1,
        xlZero = 2
    } XlDisplayBlanksAs;

    typedef [uuid(87A9A6EE-10D5-41C4-BD53-FDCA6EC7E139)]
    enum {
        xlHundreds = -2,
        xlThousands = -3,
        xlTenThousands = -4,
        xlHundredThousands = -5,
        xlMillions = -6,
        xlTenMillions = -7,
        xlHundredMillions = -8,
        xlThousandMillions = -9,
        xlMillionMillions = -10
    } XlDisplayUnit;

    typedef [uuid(7BD721FC-E709-48B5-9358-18408F131030)]
    enum {
        xlCap = 1,
        xlNoCap = 2
    } XlEndStyleCap;

    typedef [uuid(3AD2FBBD-B1AE-4BED-925D-CE60450115CB)]
    enum {
        xlChartX = -4168,
        xlChartY = 1
    } XlErrorBarDirection;

    typedef [uuid(00C9E500-2E7D-4ECF-B7BC-D0B86CB8F3A6)]
    enum {
        xlErrorBarIncludeBoth = 1,
        xlErrorBarIncludeMinusValues = 3,
        xlErrorBarIncludeNone = -4142,
        xlErrorBarIncludePlusValues = 2
    } XlErrorBarInclude;

    typedef [uuid(00983AAB-CA07-437D-9415-154DAD6918F0)]
    enum {
        xlErrorBarTypeCustom = -4114,
        xlErrorBarTypeFixedValue = 1,
        xlErrorBarTypePercent = 2,
        xlErrorBarTypeStDev = -4155,
        xlErrorBarTypeStError = 4
    } XlErrorBarType;

    typedef [uuid(9D60EF74-103F-4ACB-8042-20C4D100F034)]
    enum {
        xlHAlignCenter = -4108,
        xlHAlignCenterAcrossSelection = 7,
        xlHAlignDistributed = -4117,
        xlHAlignFill = 5,
        xlHAlignGeneral = 1,
        xlHAlignJustify = -4130,
        xlHAlignLeft = -4131,
        xlHAlignRight = -4152
    } XlHAlign;

    typedef [uuid(DB4B1313-F371-453B-9ECA-9C9495FC23AD)]
    enum {
        xlLegendPositionBottom = -4107,
        xlLegendPositionCorner = 2,
        xlLegendPositionLeft = -4131,
        xlLegendPositionRight = -4152,
        xlLegendPositionTop = -4160,
        xlLegendPositionCustom = -4161
    } XlLegendPosition;

    typedef [uuid(12B55737-A883-42FF-B5F7-D7360E7B97B4)]
    enum {
        xlMarkerStyleAutomatic = -4105,
        xlMarkerStyleCircle = 8,
        xlMarkerStyleDash = -4115,
        xlMarkerStyleDiamond = 2,
        xlMarkerStyleDot = -4118,
        xlMarkerStyleNone = -4142,
        xlMarkerStylePicture = -4147,
        xlMarkerStylePlus = 9,
        xlMarkerStyleSquare = 1,
        xlMarkerStyleStar = 5,
        xlMarkerStyleTriangle = 3,
        xlMarkerStyleX = -4168
    } XlMarkerStyle;

    typedef [uuid(7FAC3690-46D1-49CD-8793-5690439DDC8B)]
    enum {
        xlColumnField = 2,
        xlDataField = 4,
        xlHidden = 0,
        xlPageField = 3,
        xlRowField = 1
    } XlPivotFieldOrientation;

    typedef [uuid(34A545F2-2447-4991-9CD2-B7F0D5707591)]
    enum {
        xlContext = -5002,
        xlLTR = -5003,
        xlRTL = -5004
    } XlReadingOrder;

    typedef [uuid(08474527-2498-4302-9408-AAA07DE998D7)]
    enum {
        xlColumns = 2,
        xlRows = 1
    } XlRowCol;

    typedef [uuid(CA98C99C-D154-4B5E-A142-ED2E49FE6EA1)]
    enum {
        xlScaleLinear = -4132,
        xlScaleLogarithmic = -4133
    } XlScaleType;

    typedef [uuid(B5C2A6B9-6991-478A-86C0-C4A227F44940)]
    enum {
        xlSizeIsWidth = 2,
        xlSizeIsArea = 1
    } XlSizeRepresents;

    typedef [uuid(DC28ED70-ABB0-41A1-B45E-73D98203B3B5)]
    enum {
        xlTickLabelOrientationAutomatic = -4105,
        xlTickLabelOrientationDownward = -4170,
        xlTickLabelOrientationHorizontal = -4128,
        xlTickLabelOrientationUpward = -4171,
        xlTickLabelOrientationVertical = -4166
    } XlTickLabelOrientation;

    typedef [uuid(FBB0D012-58F0-4251-ABA7-0C0A5E416514)]
    enum {
        xlTickLabelPositionHigh = -4127,
        xlTickLabelPositionLow = -4134,
        xlTickLabelPositionNextToAxis = 4,
        xlTickLabelPositionNone = -4142
    } XlTickLabelPosition;

    typedef [uuid(6D1EDF65-FB90-465C-8777-015D7028E975)]
    enum {
        xlTickMarkCross = 4,
        xlTickMarkInside = 2,
        xlTickMarkNone = -4142,
        xlTickMarkOutside = 3
    } XlTickMark;

    typedef [uuid(B5E8C11D-EC7B-491B-96E8-AF57A773EED2)]
    enum {
        xlDays = 0,
        xlMonths = 1,
        xlYears = 2
    } XlTimeUnit;

    typedef [uuid(F2BFA1D6-B1E6-4375-96F0-11540CD587C2)]
    enum {
        xlExponential = 5,
        xlLinear = -4132,
        xlLogarithmic = -4133,
        xlMovingAvg = 6,
        xlPolynomial = 3,
        xlPower = 4
    } XlTrendlineType;

    typedef [uuid(DDAFA8B9-3BBB-4679-8D6C-8701B9F234E2)]
    enum {
        xlUnderlineStyleDouble = -4119,
        xlUnderlineStyleDoubleAccounting = 5,
        xlUnderlineStyleNone = -4142,
        xlUnderlineStyleSingle = 2,
        xlUnderlineStyleSingleAccounting = 4
    } XlUnderlineStyle;

    typedef [uuid(E0662922-D918-4344-8A6A-D95499304CE2)]
    enum {
        xlVAlignBottom = -4107,
        xlVAlignCenter = -4108,
        xlVAlignDistributed = -4117,
        xlVAlignJustify = -4130,
        xlVAlignTop = -4160
    } XlVAlign;

    [
      odl,
      uuid(92D41A52-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a6428),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Axes : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a6429)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d2), propget, helpcontext(0x000a642a)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] XlAxisType Type,
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup,
                        [out, retval] Axis** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] XlAxisType Type,
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup,
                        [out, retval] Axis** RHS);
    };

    [
      odl,
      uuid(92D41A53-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a6810),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Axis : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a6811)]
        HRESULT AxisBetweenCategories([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d1), propput, helpcontext(0x000a6811)]
        HRESULT AxisBetweenCategories([in] VARIANT_BOOL RHS);
        [id(0x000007d2), propget, helpcontext(0x000a6812)]
        HRESULT AxisGroup([out, retval] XlAxisGroup* RHS);
        [id(0x000007d3), propget, helpcontext(0x000a6813)]
        HRESULT AxisTitle([out, retval] AxisTitle** RHS);
        [id(0x000007d4), propget, helpcontext(0x000a6814)]
        HRESULT CategoryNames([out, retval] VARIANT* RHS);
        [id(0x000007d4), propput, helpcontext(0x000a6814)]
        HRESULT CategoryNames([in] VARIANT RHS);
        [id(0x000007d5), propget, helpcontext(0x000a6815)]
        HRESULT Crosses([out, retval] XlAxisCrosses* RHS);
        [id(0x000007d5), propput, helpcontext(0x000a6815)]
        HRESULT Crosses([in] XlAxisCrosses RHS);
        [id(0x000007d6), propget, helpcontext(0x000a6816)]
        HRESULT CrossesAt([out, retval] double* RHS);
        [id(0x000007d6), propput, helpcontext(0x000a6816)]
        HRESULT CrossesAt([in] double RHS);
        [id(0x000007d7), helpcontext(0x000a6817)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007d8), propget, helpcontext(0x000a6818)]
        HRESULT HasMajorGridlines([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d8), propput, helpcontext(0x000a6818)]
        HRESULT HasMajorGridlines([in] VARIANT_BOOL RHS);
        [id(0x000007d9), propget, helpcontext(0x000a6819)]
        HRESULT HasMinorGridlines([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d9), propput, helpcontext(0x000a6819)]
        HRESULT HasMinorGridlines([in] VARIANT_BOOL RHS);
        [id(0x000007da), propget, helpcontext(0x000a681a)]
        HRESULT HasTitle([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007da), propput, helpcontext(0x000a681a)]
        HRESULT HasTitle([in] VARIANT_BOOL RHS);
        [id(0x000007db), propget, helpcontext(0x000a681b)]
        HRESULT MajorGridlines([out, retval] Gridlines** RHS);
        [id(0x000007dc), propget, helpcontext(0x000a681c)]
        HRESULT MajorTickMark([out, retval] XlTickMark* RHS);
        [id(0x000007dc), propput, helpcontext(0x000a681c)]
        HRESULT MajorTickMark([in] XlTickMark RHS);
        [id(0x000007dd), propget, helpcontext(0x000a681d)]
        HRESULT MajorUnit([out, retval] double* RHS);
        [id(0x000007dd), propput, helpcontext(0x000a681d)]
        HRESULT MajorUnit([in] double RHS);
        [id(0x000007de), propget, helpcontext(0x000a681e)]
        HRESULT LogBase([out, retval] double* RHS);
        [id(0x000007de), propput, helpcontext(0x000a681e)]
        HRESULT LogBase([in] double RHS);
        [id(0x000007df), propget, helpcontext(0x000a681f)]
        HRESULT TickLabelSpacingIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007df), propput, helpcontext(0x000a681f)]
        HRESULT TickLabelSpacingIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000007e0), propget, helpcontext(0x000a6820)]
        HRESULT MajorUnitIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e0), propput, helpcontext(0x000a6820)]
        HRESULT MajorUnitIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000007e1), propget, helpcontext(0x000a6821)]
        HRESULT MaximumScale([out, retval] double* RHS);
        [id(0x000007e1), propput, helpcontext(0x000a6821)]
        HRESULT MaximumScale([in] double RHS);
        [id(0x000007e2), propget, helpcontext(0x000a6822)]
        HRESULT MaximumScaleIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e2), propput, helpcontext(0x000a6822)]
        HRESULT MaximumScaleIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000007e3), propget, helpcontext(0x000a6823)]
        HRESULT MinimumScale([out, retval] double* RHS);
        [id(0x000007e3), propput, helpcontext(0x000a6823)]
        HRESULT MinimumScale([in] double RHS);
        [id(0x000007e4), propget, helpcontext(0x000a6824)]
        HRESULT MinimumScaleIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e4), propput, helpcontext(0x000a6824)]
        HRESULT MinimumScaleIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000007e5), propget, helpcontext(0x000a6825)]
        HRESULT MinorGridlines([out, retval] Gridlines** RHS);
        [id(0x000007e6), propget, helpcontext(0x000a6826)]
        HRESULT MinorTickMark([out, retval] XlTickMark* RHS);
        [id(0x000007e6), propput, helpcontext(0x000a6826)]
        HRESULT MinorTickMark([in] XlTickMark RHS);
        [id(0x000007e7), propget, helpcontext(0x000a6827)]
        HRESULT MinorUnit([out, retval] double* RHS);
        [id(0x000007e7), propput, helpcontext(0x000a6827)]
        HRESULT MinorUnit([in] double RHS);
        [id(0x000007e8), propget, helpcontext(0x000a6828)]
        HRESULT MinorUnitIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e8), propput, helpcontext(0x000a6828)]
        HRESULT MinorUnitIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000007e9), propget, helpcontext(0x000a6829)]
        HRESULT ReversePlotOrder([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e9), propput, helpcontext(0x000a6829)]
        HRESULT ReversePlotOrder([in] VARIANT_BOOL RHS);
        [id(0x000007ea), propget, helpcontext(0x000a682a)]
        HRESULT ScaleType([out, retval] XlScaleType* RHS);
        [id(0x000007ea), propput, helpcontext(0x000a682a)]
        HRESULT ScaleType([in] XlScaleType RHS);
        [id(0x000007eb), helpcontext(0x000a682b)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x000007ec), propget, helpcontext(0x000a682c)]
        HRESULT TickLabelPosition([out, retval] XlTickLabelPosition* RHS);
        [id(0x000007ec), propput, helpcontext(0x000a682c)]
        HRESULT TickLabelPosition([in] XlTickLabelPosition RHS);
        [id(0x000007ed), propget, helpcontext(0x000a682d)]
        HRESULT TickLabels([out, retval] TickLabels** RHS);
        [id(0x000007ee), propget, helpcontext(0x000a682e)]
        HRESULT TickLabelSpacing([out, retval] long* RHS);
        [id(0x000007ee), propput, helpcontext(0x000a682e)]
        HRESULT TickLabelSpacing([in] long RHS);
        [id(0x000007ef), propget, helpcontext(0x000a682f)]
        HRESULT TickMarkSpacing([out, retval] long* RHS);
        [id(0x000007ef), propput, helpcontext(0x000a682f)]
        HRESULT TickMarkSpacing([in] long RHS);
        [id(0x000007f0), propget, helpcontext(0x000a6830)]
        HRESULT Type([out, retval] XlAxisType* RHS);
        [id(0x000007f0), propput, helpcontext(0x000a6830)]
        HRESULT Type([in] XlAxisType RHS);
        [id(0x000007f1), propget, helpcontext(0x000a6831)]
        HRESULT BaseUnit([out, retval] XlTimeUnit* RHS);
        [id(0x000007f1), propput, helpcontext(0x000a6831)]
        HRESULT BaseUnit([in] XlTimeUnit RHS);
        [id(0x000007f2), propget, helpcontext(0x000a6832)]
        HRESULT BaseUnitIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007f2), propput, helpcontext(0x000a6832)]
        HRESULT BaseUnitIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000007f3), propget, helpcontext(0x000a6833)]
        HRESULT MajorUnitScale([out, retval] XlTimeUnit* RHS);
        [id(0x000007f3), propput, helpcontext(0x000a6833)]
        HRESULT MajorUnitScale([in] XlTimeUnit RHS);
        [id(0x000007f4), propget, helpcontext(0x000a6834)]
        HRESULT MinorUnitScale([out, retval] XlTimeUnit* RHS);
        [id(0x000007f4), propput, helpcontext(0x000a6834)]
        HRESULT MinorUnitScale([in] XlTimeUnit RHS);
        [id(0x000007f5), propget, helpcontext(0x000a6835)]
        HRESULT CategoryType([out, retval] XlCategoryType* RHS);
        [id(0x000007f5), propput, helpcontext(0x000a6835)]
        HRESULT CategoryType([in] XlCategoryType RHS);
        [id(0x000007f6), propget, helpcontext(0x000a6836)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x000007f7), propget, helpcontext(0x000a6837)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x000007f8), propget, helpcontext(0x000a6838)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x000007f9), propget, helpcontext(0x000a6839)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x000007fa), propget, helpcontext(0x000a683a)]
        HRESULT DisplayUnit([out, retval] XlDisplayUnit* RHS);
        [id(0x000007fa), propput, helpcontext(0x000a683a)]
        HRESULT DisplayUnit([in] XlDisplayUnit RHS);
        [id(0x000007fb), propget, helpcontext(0x000a683b)]
        HRESULT DisplayUnitCustom([out, retval] double* RHS);
        [id(0x000007fb), propput, helpcontext(0x000a683b)]
        HRESULT DisplayUnitCustom([in] double RHS);
        [id(0x000007fc), propget, helpcontext(0x000a683c)]
        HRESULT HasDisplayUnitLabel([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007fc), propput, helpcontext(0x000a683c)]
        HRESULT HasDisplayUnitLabel([in] VARIANT_BOOL RHS);
        [id(0x000007fd), propget, helpcontext(0x000a683d)]
        HRESULT DisplayUnitLabel([out, retval] DisplayUnitLabel** RHS);
        [id(0x000007fe), propget, helpcontext(0x000a683e)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x000007ff), propget, helpcontext(0x000a683f)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000800), propget, helpcontext(0x000a6840)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A54-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a6bf8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AxisTitle : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000a6bf9)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x000007d1), propget, helpcontext(0x000a6bf9)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x000007d2), propget, helpcontext(0x000a6bfa)]
        HRESULT Characters(
                        [in, optional] VARIANT Start,
                        [in, optional] VARIANT Length,
                        [out, retval] ChartCharacters** RHS);
        [id(0x000007d3), propget, hidden, helpcontext(0x000a6bfb)]
        HRESULT Font([out, retval] ChartFont** ppfont);
        [id(0x000007d4), propput, helpcontext(0x000a6bfc)]
        HRESULT HorizontalAlignment([in] VARIANT RHS);
        [id(0x000007d4), propget, helpcontext(0x000a6bfc)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* RHS);
        [id(0x000007d5), propget, helpcontext(0x000a6bfd)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x000007d5), propput, helpcontext(0x000a6bfd)]
        HRESULT Left([in] double RHS);
        [id(0x000007d6), propput, helpcontext(0x000a6bfe)]
        HRESULT Orientation([in] VARIANT RHS);
        [id(0x000007d6), propget, helpcontext(0x000a6bfe)]
        HRESULT Orientation([out, retval] VARIANT* RHS);
        [id(0x000007d7), propget, helpcontext(0x000a6bff)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d7), propput, helpcontext(0x000a6bff)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x000007d8), propput, helpcontext(0x000a6c00)]
        HRESULT Text([in] BSTR RHS);
        [id(0x000007d8), propget, helpcontext(0x000a6c00)]
        HRESULT Text([out, retval] BSTR* RHS);
        [id(0x000007d9), propget, helpcontext(0x000a6c01)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x000007d9), propput, helpcontext(0x000a6c01)]
        HRESULT Top([in] double RHS);
        [id(0x000007da), propput, helpcontext(0x000a6c02)]
        HRESULT VerticalAlignment([in] VARIANT RHS);
        [id(0x000007da), propget, helpcontext(0x000a6c02)]
        HRESULT VerticalAlignment([out, retval] VARIANT* RHS);
        [id(0x000007db), propput, hidden, helpcontext(0x000a6c03)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x000007db), propget, hidden, helpcontext(0x000a6c03)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000007dc), propget, hidden, helpcontext(0x000a6c04)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x000007dd), propget, hidden, helpcontext(0x000a6c05)]
        HRESULT Fill([out, retval] ChartFillFormat** ppinterior);
        [id(0x000007de), helpcontext(0x000a6c06)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007df), propget, hidden, helpcontext(0x000a6c07)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x000007e0), propget, helpcontext(0x000a6c08)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007e1), propget, helpcontext(0x000a6c09)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007e2), helpcontext(0x000a6c0a)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000972), propget, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000972), propput, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL RHS);
        [id(0x00000687), propget, helpcontext(0x00010687)]
        HRESULT Position([out, retval] XlChartElementPosition* RHS);
        [id(0x00000687), propput, helpcontext(0x00010687)]
        HRESULT Position([in] XlChartElementPosition RHS);
        [id(0x000007e3), propget, helpcontext(0x000a6c0b)]
        HRESULT Format([out, retval] ChartFormat** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007e4), propget, helpcontext(0x000a6c0c)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007e5), propget, helpcontext(0x000a6c0d)]
        HRESULT ReadingOrder([out, retval] long* RHS);
        [id(0x000007e5), propput, helpcontext(0x000a6c0d)]
        HRESULT ReadingOrder([in] long RHS);
        [id(0x000007e6), propget, helpcontext(0x000a6c0e)]
        HRESULT Height([out, retval] double* Height);
        [id(0x000007e7), propget, helpcontext(0x000a6c0f)]
        HRESULT Width([out, retval] double* Width);
        [id(0x000007e8), propput, helpcontext(0x000a6c10)]
        HRESULT Formula([in] BSTR pbstr);
        [id(0x000007e8), propget, helpcontext(0x000a6c10)]
        HRESULT Formula([out, retval] BSTR* pbstr);
        [id(0x000007e9), propput, helpcontext(0x000a6c11)]
        HRESULT FormulaR1C1([in] BSTR pbstr);
        [id(0x000007e9), propget, helpcontext(0x000a6c11)]
        HRESULT FormulaR1C1([out, retval] BSTR* pbstr);
        [id(0x000007ea), propput, helpcontext(0x000a6c12)]
        HRESULT FormulaLocal([in] BSTR pbstr);
        [id(0x000007ea), propget, helpcontext(0x000a6c12)]
        HRESULT FormulaLocal([out, retval] BSTR* pbstr);
        [id(0x000007eb), propput, helpcontext(0x000a6c13)]
        HRESULT FormulaR1C1Local([in] BSTR pbstr);
        [id(0x000007eb), propget, helpcontext(0x000a6c13)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(92D41A55-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a6fe0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Chart : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000782), helpcontext(0x00010782)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type,
                        [in, optional] VARIANT LegendKey,
                        [in, optional] VARIANT AutoText,
                        [in, optional] VARIANT HasLeaderLines,
                        [in, optional] VARIANT ShowSeriesName,
                        [in, optional] VARIANT ShowCategoryName,
                        [in, optional] VARIANT ShowValue,
                        [in, optional] VARIANT ShowPercentage,
                        [in, optional] VARIANT ShowBubbleSize,
                        [in, optional] VARIANT Separator);
        [id(0x00000578), propget, helpcontext(0x00010578)]
        HRESULT ChartType([out, retval] XlChartType* RHS);
        [id(0x00000578), propput, helpcontext(0x00010578)]
        HRESULT ChartType([in] XlChartType RHS);
        [id(0x00000574), propget, helpcontext(0x00010574)]
        HRESULT HasDataTable([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000574), propput, helpcontext(0x00010574)]
        HRESULT HasDataTable([in] VARIANT_BOOL RHS);
        [id(0x00000579), hidden, helpcontext(0x00010579)]
        HRESULT ApplyCustomType(
                        [in] XlChartType ChartType,
                        [in, optional] VARIANT TypeName);
        [id(0x00000581), helpcontext(0x00010581)]
        HRESULT GetChartElement(
                        [in] long X,
                        [in] long Y,
                        [in, out] long* ElementID,
                        [in, out] long* Arg1,
                        [in, out] long* Arg2);
        [id(0x00000585), helpcontext(0x00010585)]
        HRESULT SetSourceData(
                        [in] BSTR Source,
                        [in, optional] VARIANT PlotBy);
        [id(0x000000ca), propget, helpcontext(0x000100ca)]
        HRESULT PlotBy([out, retval] XlRowCol* PlotBy);
        [id(0x000000ca), propput, helpcontext(0x000100ca)]
        HRESULT PlotBy([in] XlRowCol PlotBy);
        [id(0x000007d1), hidden, helpcontext(0x000a6fe1)]
        HRESULT AutoFormat(
                        [in] long Gallery,
                        [in, optional] VARIANT Format);
        [id(0x000007d2), helpcontext(0x000a6fe2)]
        HRESULT SetBackgroundPicture([in] BSTR FileName);
        [id(0x000007d3), propget, helpcontext(0x000a6fe3)]
        HRESULT DataTable([out, retval] DataTable** RHS);
        [id(0x000007d4), helpcontext(0x000a6fe4)]
        HRESULT Paste(
                        [in, optional] VARIANT Type,
                        [in, lcid] long lcid);
        [id(0x000007d5), propget, helpcontext(0x000a6fe5)]
        HRESULT BarShape([out, retval] XlBarShape* RHS);
        [id(0x000007d5), propput, helpcontext(0x000a6fe5)]
        HRESULT BarShape([in] XlBarShape RHS);
        [id(0x000007d6), helpcontext(0x000a6fe6)]
        HRESULT SetDefaultChart([in] VARIANT Name);
        [id(0x000007d7), helpcontext(0x000a6fe7)]
        HRESULT ApplyChartTemplate([in] BSTR FileName);
        [id(0x000007d8), helpcontext(0x000a6fe8)]
        HRESULT SaveChartTemplate([in] BSTR FileName);
        [id(0x00000949), propget, helpcontext(0x00010949)]
        HRESULT SideWall([out, retval] Walls** RHS);
        [id(0x0000094a), propget, helpcontext(0x0001094a)]
        HRESULT BackWall([out, retval] Walls** RHS);
        [id(0x000009a1), propget, helpcontext(0x000109a1)]
        HRESULT ChartStyle([out, retval] VARIANT* RHS);
        [id(0x000009a1), propput, helpcontext(0x000109a1)]
        HRESULT ChartStyle([in] VARIANT RHS);
        [id(0x000009a2), helpcontext(0x000109a2)]
        HRESULT ClearToMatchStyle();
        [id(0x00000717), propget, hidden, helpcontext(0x00010717)]
        HRESULT HasPivotFields([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000717), propput, hidden, helpcontext(0x00010717)]
        HRESULT HasPivotFields([in] VARIANT_BOOL RHS);
        [id(0x000007d9), propput, helpcontext(0x000a6fe9)]
        HRESULT ShowDataLabelsOverMaximum([in] VARIANT_BOOL RHS);
        [id(0x000007d9), propget, helpcontext(0x000a6fe9)]
        HRESULT ShowDataLabelsOverMaximum([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009a4), helpcontext(0x000109a4)]
        HRESULT ApplyLayout(
                        [in] long Layout,
                        [in, optional] VARIANT ChartType);
        [id(0x000007da), helpcontext(0x000a6fea)]
        HRESULT Refresh();
        [id(0x000007db), propget, helpcontext(0x000a6feb)]
        HRESULT ChartData([out, retval] ChartData** ppchartdata);
        [id(0x000007dc), propget, helpcontext(0x000a6fec)]
        HRESULT Shapes([out, retval] Shapes** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000011), propget, hidden, helpcontext(0x00010011)]
        HRESULT Area3DGroup(
                        [in, lcid] long lcid,
                        [out, retval] ChartGroup** RHS);
        [id(0x00000009), hidden, helpcontext(0x00010009)]
        HRESULT AreaGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x00000012), propget, hidden, helpcontext(0x00010012)]
        HRESULT Bar3DGroup(
                        [in, lcid] long lcid,
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000a), hidden, helpcontext(0x0001000a)]
        HRESULT BarGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x00000013), propget, hidden, helpcontext(0x00010013)]
        HRESULT Column3DGroup(
                        [in, lcid] long lcid,
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000b), hidden, helpcontext(0x0001000b)]
        HRESULT ColumnGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x00000014), propget, hidden, helpcontext(0x00010014)]
        HRESULT Line3DGroup(
                        [in, lcid] long lcid,
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000c), hidden, helpcontext(0x0001000c)]
        HRESULT LineGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x00000015), propget, hidden, helpcontext(0x00010015)]
        HRESULT Pie3DGroup(
                        [in, lcid] long lcid,
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000d), hidden, helpcontext(0x0001000d)]
        HRESULT PieGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x0000000e), hidden, helpcontext(0x0001000e)]
        HRESULT DoughnutGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x0000000f), hidden, helpcontext(0x0001000f)]
        HRESULT RadarGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x00000016), propget, hidden, helpcontext(0x00010016)]
        HRESULT SurfaceGroup(
                        [in, lcid] long lcid,
                        [out, retval] ChartGroup** RHS);
        [id(0x00000010), hidden, helpcontext(0x00010010)]
        HRESULT XYGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x000007dd), propget, helpcontext(0x000a6fed)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007de), hidden, helpcontext(0x000a6fee)]
        HRESULT _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type,
                        [in, optional] VARIANT LegendKey,
                        [in, optional] VARIANT AutoText,
                        [in, optional] VARIANT HasLeaderLines,
                        [in, lcid] long lcid);
        [id(0x000007df), propput, helpcontext(0x000a6fef)]
        HRESULT AutoScaling(
                        [in, lcid] long lcid,
                        [in] VARIANT_BOOL RHS);
        [id(0x000007df), propget, helpcontext(0x000a6fef)]
        HRESULT AutoScaling(
                        [in, lcid] long lcid,
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e0), helpcontext(0x000a6ff0)]
        HRESULT Axes(
                        [in, optional] VARIANT Type,
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x000007e1), propget, helpcontext(0x000a6ff1)]
        HRESULT ChartArea(
                        [in, lcid] long lcid,
                        [out, retval] ChartArea** ChartArea);
        [id(0x000007e2), helpcontext(0x000a6ff2)]
        HRESULT ChartGroups(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x000007e3), propget, helpcontext(0x000a6ff3)]
        HRESULT ChartTitle(
                        [in, lcid] long lcid,
                        [out, retval] ChartTitle** RHS);
        [id(0x000007e4), helpcontext(0x000a6ff4)]
        HRESULT ChartWizard(
                        [in, optional] VARIANT Source,
                        [in, optional] VARIANT Gallery,
                        [in, optional] VARIANT Format,
                        [in, optional] VARIANT PlotBy,
                        [in, optional] VARIANT CategoryLabels,
                        [in, optional] VARIANT SeriesLabels,
                        [in, optional] VARIANT HasLegend,
                        [in, optional] VARIANT Title,
                        [in, optional] VARIANT CategoryTitle,
                        [in, optional] VARIANT ValueTitle,
                        [in, optional] VARIANT ExtraTitle,
                        [in, lcid] long lcid);
        [id(0x000007e5), helpcontext(0x000a6ff5)]
        HRESULT Copy(
                        [in, optional] VARIANT Before,
                        [in, optional] VARIANT After,
                        [in, lcid] long lcid);
        [id(0x000007e6), helpcontext(0x000a6ff6)]
        HRESULT CopyPicture(
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance,
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format,
                        [in, optional, defaultvalue(2)] XlPictureAppearance Size,
                        [in, lcid] long LocaleID);
        [id(0x000007e7), propget, hidden, helpcontext(0x000a6ff7)]
        HRESULT Corners(
                        [in, lcid] long lcid,
                        [out, retval] Corners** RHS);
        [id(0x000007e8), helpcontext(0x000a6ff8)]
        HRESULT Delete([in, lcid] long lcid);
        [id(0x000007e9), propget, helpcontext(0x000a6ff9)]
        HRESULT DepthPercent(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007e9), propput, helpcontext(0x000a6ff9)]
        HRESULT DepthPercent(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007ea), propget, helpcontext(0x000a6ffa)]
        HRESULT DisplayBlanksAs(
                        [in, lcid] long lcid,
                        [out, retval] XlDisplayBlanksAs* RHS);
        [id(0x000007ea), propput, helpcontext(0x000a6ffa)]
        HRESULT DisplayBlanksAs(
                        [in, lcid] long lcid,
                        [in] XlDisplayBlanksAs RHS);
        [id(0x000007eb), propget, helpcontext(0x000a6ffb)]
        HRESULT Elevation(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007eb), propput, helpcontext(0x000a6ffb)]
        HRESULT Elevation(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007ec), helpcontext(0x000a6ffc)]
        HRESULT Export(
                        [in] BSTR FileName,
                        [in, optional] VARIANT FilterName,
                        [in, optional] VARIANT Interactive,
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000007ed), propget, helpcontext(0x000a6ffd)]
        HRESULT Floor(
                        [in, lcid] long lcid,
                        [out, retval] Floor** RHS);
        [id(0x000007ee), propget, helpcontext(0x000a6ffe)]
        HRESULT GapDepth(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007ee), propput, helpcontext(0x000a6ffe)]
        HRESULT GapDepth(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007ef), propget, helpcontext(0x000a6fff)]
        HRESULT HasAxis(
                        [in, optional] VARIANT Index1,
                        [in, optional] VARIANT Index2,
                        [in, lcid] long lcid,
                        [out, retval] VARIANT* RHS);
        [id(0x000007ef), propput, helpcontext(0x000a6fff)]
        HRESULT HasAxis(
                        [in, optional] VARIANT Index1,
                        [in, optional] VARIANT Index2,
                        [in, lcid] long lcid,
                        [in] VARIANT RHS);
        [id(0x000007f0), propget, helpcontext(0x000a7000)]
        HRESULT HasLegend(
                        [in, lcid] long lcid,
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000007f0), propput, helpcontext(0x000a7000)]
        HRESULT HasLegend(
                        [in, lcid] long lcid,
                        [in] VARIANT_BOOL RHS);
        [id(0x000007f1), propget, helpcontext(0x000a7001)]
        HRESULT HasTitle(
                        [in, lcid] long lcid,
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000007f1), propput, helpcontext(0x000a7001)]
        HRESULT HasTitle(
                        [in, lcid] long lcid,
                        [in] VARIANT_BOOL RHS);
        [id(0x000007f2), propget, helpcontext(0x000a7002)]
        HRESULT HeightPercent(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007f2), propput, helpcontext(0x000a7002)]
        HRESULT HeightPercent(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007f3), propget, helpcontext(0x000a7003)]
        HRESULT Legend(
                        [in, lcid] long lcid,
                        [out, retval] Legend** RHS);
        [id(0x000007f4), propget, helpcontext(0x000a7004)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007f4), propput, helpcontext(0x000a7004)]
        HRESULT Name([in] BSTR RHS);
        [id(0x000007f5), propget, helpcontext(0x000a7005)]
        HRESULT Perspective(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007f5), propput, helpcontext(0x000a7005)]
        HRESULT Perspective(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007f6), propget, helpcontext(0x000a7006)]
        HRESULT PlotArea(
                        [in, lcid] long lcid,
                        [out, retval] PlotArea** RHS);
        [id(0x000007f7), propget, helpcontext(0x000a7007)]
        HRESULT PlotVisibleOnly(
                        [in, lcid] long lcid,
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000007f7), propput, helpcontext(0x000a7007)]
        HRESULT PlotVisibleOnly(
                        [in, lcid] long lcid,
                        [in] VARIANT_BOOL RHS);
        [id(0x000007f8), propget, helpcontext(0x000a7008)]
        HRESULT RightAngleAxes(
                        [in, lcid] long lcid,
                        [out, retval] VARIANT* RHS);
        [id(0x000007f8), propput, helpcontext(0x000a7008)]
        HRESULT RightAngleAxes(
                        [in, lcid] long lcid,
                        [in] VARIANT RHS);
        [id(0x000007f9), propget, helpcontext(0x000a7009)]
        HRESULT Rotation(
                        [in, lcid] long lcid,
                        [out, retval] VARIANT* RHS);
        [id(0x000007f9), propput, helpcontext(0x000a7009)]
        HRESULT Rotation(
                        [in, lcid] long lcid,
                        [in] VARIANT RHS);
        [id(0x000007fa), helpcontext(0x000a700a)]
        HRESULT Select(
                        [in, optional] VARIANT Replace,
                        [in, lcid] long lcid);
        [id(0x000007fb), helpcontext(0x000a700b)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index,
                        [in, lcid] long lcid,
                        [out, retval] IDispatch** RHS);
        [id(0x000007fc), helpcontext(0x000a700c)]
        HRESULT SetElement([in] MsoChartElementType Element);
        [id(0x000007fd), propget, hidden, helpcontext(0x000a700d)]
        HRESULT Subtype(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007fd), propput, hidden, helpcontext(0x000a700d)]
        HRESULT Subtype(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007fe), propget, hidden, helpcontext(0x000a700e)]
        HRESULT Type(
                        [in, lcid] long lcid,
                        [out, retval] long* RHS);
        [id(0x000007fe), propput, hidden, helpcontext(0x000a700e)]
        HRESULT Type(
                        [in, lcid] long lcid,
                        [in] long RHS);
        [id(0x000007ff), propget, helpcontext(0x000a700f)]
        HRESULT Walls(
                        [in, lcid] long lcid,
                        [out, retval] Walls** RHS);
        [id(0x00000800), propget, helpcontext(0x000a7010)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000801), propget, helpcontext(0x000a7011)]
        HRESULT ShowReportFilterFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x00000801), propput, helpcontext(0x000a7011)]
        HRESULT ShowReportFilterFieldButtons([in] VARIANT_BOOL res);
        [id(0x00000802), propget, helpcontext(0x000a7012)]
        HRESULT ShowLegendFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x00000802), propput, helpcontext(0x000a7012)]
        HRESULT ShowLegendFieldButtons([in] VARIANT_BOOL res);
        [id(0x00000803), propget, helpcontext(0x000a7013)]
        HRESULT ShowAxisFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x00000803), propput, helpcontext(0x000a7013)]
        HRESULT ShowAxisFieldButtons([in] VARIANT_BOOL res);
        [id(0x00000804), propget, helpcontext(0x000a7014)]
        HRESULT ShowValueFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x00000804), propput, helpcontext(0x000a7014)]
        HRESULT ShowValueFieldButtons([in] VARIANT_BOOL res);
        [id(0x00000805), propget, helpcontext(0x000a7015)]
        HRESULT ShowAllFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x00000805), propput, helpcontext(0x000a7015)]
        HRESULT ShowAllFieldButtons([in] VARIANT_BOOL res);
        [id(0x00000806), propget, helpcontext(0x000a7016)]
        HRESULT AlternativeText([out, retval] BSTR* AlternativeText);
        [id(0x00000806), propput, helpcontext(0x000a7016)]
        HRESULT AlternativeText([in] BSTR AlternativeText);
        [id(0x00000807), propget, helpcontext(0x000a7017)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x00000807), propput, helpcontext(0x000a7017)]
        HRESULT Title([in] BSTR Title);
        [id(0x00000808), helpcontext(0x000a7018)]
        HRESULT FullSeriesCollection(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** ppFullSeriesCollection);
        [id(0x00000809), propget, helpcontext(0x000a7019)]
        HRESULT CategoryLabelLevel([out, retval] XlCategoryLabelLevel* plevel);
        [id(0x00000809), propput, helpcontext(0x000a7019)]
        HRESULT CategoryLabelLevel([in] XlCategoryLabelLevel plevel);
        [id(0x0000080a), propget, helpcontext(0x000a701a)]
        HRESULT SeriesNameLevel([out, retval] XlSeriesNameLevel* plevel);
        [id(0x0000080a), propput, helpcontext(0x000a701a)]
        HRESULT SeriesNameLevel([in] XlSeriesNameLevel plevel);
        [id(0x0000080b), propget, hidden, helpcontext(0x000a701b)]
        HRESULT HasHiddenContent([out, retval] VARIANT_BOOL* res);
        [id(0x0000080c), hidden, helpcontext(0x000a701b)]
        HRESULT DeleteHiddenContent();
        [id(0x000009a3), propget, helpcontext(0x000109a3)]
        HRESULT ChartColor([out, retval] VARIANT* pColor);
        [id(0x000009a3), propput, helpcontext(0x000109a3)]
        HRESULT ChartColor([in] VARIANT pColor);
        [id(0x000009a5), helpcontext(0x000109a2)]
        HRESULT ClearToMatchColorStyle();
    };

    [
      odl,
      uuid(92D41A56-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a73c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartBorder : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000a73c9)]
        HRESULT Color([in] VARIANT RHS);
        [id(0x000007d1), propget, helpcontext(0x000a73c9)]
        HRESULT Color([out, retval] VARIANT* RHS);
        [id(0x000007d2), propput, helpcontext(0x000a73ca)]
        HRESULT ColorIndex([in] VARIANT RHS);
        [id(0x000007d2), propget, helpcontext(0x000a73ca)]
        HRESULT ColorIndex([out, retval] VARIANT* RHS);
        [id(0x000007d3), propput, helpcontext(0x000a73cb)]
        HRESULT LineStyle([in] VARIANT RHS);
        [id(0x000007d3), propget, helpcontext(0x000a73cb)]
        HRESULT LineStyle([out, retval] VARIANT* RHS);
        [id(0x000007d4), propput, helpcontext(0x000a73cc)]
        HRESULT Weight([in] VARIANT RHS);
        [id(0x000007d4), propget, helpcontext(0x000a73cc)]
        HRESULT Weight([out, retval] VARIANT* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d5), propget, helpcontext(0x000a73cd)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A57-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a77b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartCharacters : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000008b), propget, helpcontext(0x0001008b)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x0000008b), propput, helpcontext(0x0001008b)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000092), propget, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x000000fc), helpcontext(0x000100fc)]
        HRESULT Insert(
                        [in] BSTR String,
                        [out, retval] VARIANT* RHS);
        [id(0x0000008a), propget, helpcontext(0x0001008a)]
        HRESULT Text([out, retval] BSTR* RHS);
        [id(0x0000008a), propput, helpcontext(0x0001008a)]
        HRESULT Text([in] BSTR RHS);
        [id(0x000005f2), propget, helpcontext(0x000105f2)]
        HRESULT PhoneticCharacters([out, retval] BSTR* RHS);
        [id(0x000005f2), propput, helpcontext(0x000105f2)]
        HRESULT PhoneticCharacters([in] BSTR RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000a77b1)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A58-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a7b98),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartArea : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x0000006f), helpcontext(0x0001006f)]
        HRESULT Clear([out, retval] VARIANT* pvar);
        [id(0x00000071), helpcontext(0x00010071)]
        HRESULT ClearContents([out, retval] VARIANT* pvar);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy([out, retval] VARIANT* pvar);
        [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** ppfont);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height([in] double RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppFill);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double RHS);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width([in] double RHS);
        [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* pvar);
        [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT pvar);
        [id(0x000007d1), propget, helpcontext(0x000a7b99)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007d2), propget, helpcontext(0x000a7b9a)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A59-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a7f80),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartColorFormat : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000066e), propget, helpcontext(0x0001066e)]
        HRESULT SchemeColor([out, retval] long* RHS);
        [id(0x0000066e), propput, helpcontext(0x0001066e)]
        HRESULT SchemeColor([in] long RHS);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default([out, retval] long* RHS);
        [id(0x0000006c), propget, helpcontext(0x0001006c)]
        HRESULT Type([out, retval] long* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000a7f81)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000a7f82)]
        HRESULT RGB([out, retval] long* RHS);
    };

    [
      odl,
      uuid(92D41A5A-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a8368),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartData : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a8369)]
        HRESULT Workbook([out, retval] IDispatch** ppdispWorkbook);
        [id(0x000007d2), helpcontext(0x000a836a)]
        HRESULT Activate();
        [id(0x000007d3), propget, helpcontext(0x000a836b)]
        HRESULT IsLinked([out, retval] VARIANT_BOOL* pfIsLinked);
        [id(0x000007d4), helpcontext(0x000a836c)]
        HRESULT BreakLink();
        [id(0x000007d5), helpcontext(0x000a836d)]
        HRESULT ActivateChartDataWindow();
    };

    [
      odl,
      uuid(92D41A5B-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a8750),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFillFormat : IDispatch {
        [id(0x000007d1), helpcontext(0x000a8751)]
        HRESULT Solid();
        [id(0x000007d2), helpcontext(0x000a8752)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x000007d3), propget, helpcontext(0x000a8753)]
        HRESULT BackColor([out, retval] ChartColorFormat** RHS);
        [id(0x000007d4), propget, helpcontext(0x000a8754)]
        HRESULT ForeColor([out, retval] ChartColorFormat** RHS);
        [id(0x000007d5), propget, helpcontext(0x000a8755)]
        HRESULT GradientDegree([out, retval] single* RHS);
        [id(0x000007d6), propget, helpcontext(0x000a8756)]
        HRESULT TextureName([out, retval] BSTR* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d7), propget, helpcontext(0x000a8757)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d8), helpcontext(0x000a8758)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style,
                        [in] long Variant,
                        [in] single Degree);
        [id(0x000007d9), propget, helpcontext(0x000a8759)]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* RHS);
        [id(0x000007da), propget, helpcontext(0x000a875a)]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* RHS);
        [id(0x000007db), propget, helpcontext(0x000a875b)]
        HRESULT GradientVariant([out, retval] long* RHS);
        [id(0x000007dc), propget, helpcontext(0x000a875c)]
        HRESULT Pattern([out, retval] MsoPatternType* RHS);
        [id(0x000007dd), helpcontext(0x000a875d)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x000007de), helpcontext(0x000a875e)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style,
                        [in] long Variant,
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x000007df), propget, helpcontext(0x000a875f)]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* RHS);
        [id(0x000007e0), propget, helpcontext(0x000a8760)]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* RHS);
        [id(0x000007e1), helpcontext(0x000a8761)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x000007e2), propget, helpcontext(0x000a8762)]
        HRESULT TextureType([out, retval] MsoTextureType* RHS);
        [id(0x000007e3), helpcontext(0x000a8763)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style,
                        [in] long Variant);
        [id(0x000007e4), propget, helpcontext(0x000a8764)]
        HRESULT Type([out, retval] MsoFillType* RHS);
        [id(0x000007e5), helpcontext(0x000a8765)]
        HRESULT UserPicture(
                        [in, optional] VARIANT PictureFile,
                        [in, optional] VARIANT PictureFormat,
                        [in, optional] VARIANT PictureStackUnit,
                        [in, optional] VARIANT PicturePlacement);
        [id(0x000007e6), propget, helpcontext(0x000a8766)]
        HRESULT Visible([out, retval] MsoTriState* RHS);
        [id(0x000007e6), propput, helpcontext(0x000a8766)]
        HRESULT Visible([in] MsoTriState RHS);
    };

    [
      odl,
      uuid(92D41A5C-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a8b38),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFormat : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000a8b39)]
        HRESULT Fill([out, retval] FillFormat** ppFill);
        [id(0x000007d2), propget, helpcontext(0x000a8b3a)]
        HRESULT Glow([out, retval] GlowFormat** ppGlow);
        [id(0x000007d3), propget, helpcontext(0x000a8b3b)]
        HRESULT Line([out, retval] LineFormat** ppLine);
        [id(0x000007d4), propget, helpcontext(0x000a8b3c)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x000007d5), propget, helpcontext(0x000a8b3d)]
        HRESULT PictureFormat([out, retval] PictureFormat** ppPictureFormat);
        [id(0x000007d6), propget, helpcontext(0x000a8b3e)]
        HRESULT Shadow([out, retval] ShadowFormat** ppShadow);
        [id(0x000007d7), propget, helpcontext(0x000a8b3f)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** ppSoftEdge);
        [id(0x000007d8), propget, helpcontext(0x000a8b40)]
        HRESULT TextFrame2([out, retval] TextFrame2** ppTextFrame);
        [id(0x000007d9), propget, helpcontext(0x000a8b41)]
        HRESULT ThreeD([out, retval] ThreeDFormat** ppThreeD);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007da), propget, helpcontext(0x000a8b42)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007db), propget, helpcontext(0x000a8b42)]
        HRESULT Adjustments([out, retval] Adjustments** ppAdjustments);
        [id(0x000007dc), propget, helpcontext(0x000a8b43)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* AutoShapeType);
        [id(0x000007dc), propput, helpcontext(0x000a8b43)]
        HRESULT AutoShapeType([in] MsoAutoShapeType AutoShapeType);
    };

    [
      odl,
      uuid(92D41A5D-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a8f20),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartGroup : IDispatch {
        [id(0x60020000), propget]
        HRESULT DownBars([out, retval] DownBars** ppdownbars);
        [id(0x60020001), propget]
        HRESULT DropLines([out, retval] DropLines** ppdroplines);
        [id(0x60020002), propput]
        HRESULT HasDropLines([in] VARIANT_BOOL RHS);
        [id(0x60020002), propget]
        HRESULT HasDropLines([out, retval] VARIANT_BOOL* RHS);
        [id(0x60020004), propput]
        HRESULT HasHiLoLines([in] VARIANT_BOOL RHS);
        [id(0x60020004), propget]
        HRESULT HasHiLoLines([out, retval] VARIANT_BOOL* RHS);
        [id(0x60020006), propput]
        HRESULT HasRadarAxisLabels([in] VARIANT_BOOL RHS);
        [id(0x60020006), propget]
        HRESULT HasRadarAxisLabels([out, retval] VARIANT_BOOL* RHS);
        [id(0x60020008), propput]
        HRESULT HasSeriesLines([in] VARIANT_BOOL RHS);
        [id(0x60020008), propget]
        HRESULT HasSeriesLines([out, retval] VARIANT_BOOL* RHS);
        [id(0x6002000a), propput]
        HRESULT HasUpDownBars([in] VARIANT_BOOL RHS);
        [id(0x6002000a), propget]
        HRESULT HasUpDownBars([out, retval] VARIANT_BOOL* RHS);
        [id(0x6002000c), propget]
        HRESULT HiLoLines([out, retval] HiLoLines** ppHiLoLines);
        [id(0x6002000d)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** ppSeriesCollection);
        [id(0x6002000e), propget]
        HRESULT SeriesLines([out, retval] SeriesLines** ppSeriesLines);
        [id(0x6002000f), propget]
        HRESULT UpBars([out, retval] UpBars** ppUpBars);
        [id(0x60020010), propput]
        HRESULT VaryByCategories([in] VARIANT_BOOL RHS);
        [id(0x60020010), propget]
        HRESULT VaryByCategories([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d1), propget, helpcontext(0x000a8f21)]
        HRESULT SizeRepresents([out, retval] XlSizeRepresents* RHS);
        [id(0x000007d1), propput, helpcontext(0x000a8f21)]
        HRESULT SizeRepresents([in] XlSizeRepresents RHS);
        [id(0x000007d2), propput, helpcontext(0x000a8f22)]
        HRESULT ShowNegativeBubbles([in] VARIANT_BOOL RHS);
        [id(0x000007d2), propget, helpcontext(0x000a8f22)]
        HRESULT ShowNegativeBubbles([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d3), propput, helpcontext(0x000a8f23)]
        HRESULT SplitType([in] XlChartSplitType RHS);
        [id(0x000007d3), propget, helpcontext(0x000a8f23)]
        HRESULT SplitType([out, retval] XlChartSplitType* RHS);
        [id(0x000007d4), propget, helpcontext(0x000a8f24)]
        HRESULT SplitValue([out, retval] VARIANT* RHS);
        [id(0x000007d4), propput, helpcontext(0x000a8f24)]
        HRESULT SplitValue([in] VARIANT RHS);
        [id(0x000007d5), propget, helpcontext(0x000a8f25)]
        HRESULT Has3DShading([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d5), propput, helpcontext(0x000a8f25)]
        HRESULT Has3DShading([in] VARIANT_BOOL RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d6), propget, helpcontext(0x000a8f26)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d7), propget, helpcontext(0x000a8f27)]
        HRESULT AxisGroup([out, retval] XlAxisGroup* RHS);
        [id(0x000007d7), propput, helpcontext(0x000a8f27)]
        HRESULT AxisGroup([in] XlAxisGroup RHS);
        [id(0x000007d8), propget, helpcontext(0x000a8f28)]
        HRESULT BubbleScale([out, retval] long* RHS);
        [id(0x000007d8), propput, helpcontext(0x000a8f28)]
        HRESULT BubbleScale([in] long RHS);
        [id(0x000007d9), propget, helpcontext(0x000a8f29)]
        HRESULT DoughnutHoleSize([out, retval] long* RHS);
        [id(0x000007d9), propput, helpcontext(0x000a8f29)]
        HRESULT DoughnutHoleSize([in] long RHS);
        [id(0x000007da), propget, helpcontext(0x000a8f2a)]
        HRESULT FirstSliceAngle([out, retval] long* RHS);
        [id(0x000007da), propput, helpcontext(0x000a8f2a)]
        HRESULT FirstSliceAngle([in] long RHS);
        [id(0x000007db), propget, helpcontext(0x000a8f2b)]
        HRESULT GapWidth([out, retval] long* RHS);
        [id(0x000007db), propput, helpcontext(0x000a8f2b)]
        HRESULT GapWidth([in] long RHS);
        [id(0x000007dc), propget, helpcontext(0x000a8f2c)]
        HRESULT Index([out, retval] long* RHS);
        [id(0x000007dd), propget, helpcontext(0x000a8f2d)]
        HRESULT Overlap([out, retval] long* RHS);
        [id(0x000007dd), propput, helpcontext(0x000a8f2d)]
        HRESULT Overlap([in] long RHS);
        [id(0x000007de), propget, helpcontext(0x000a8f2e)]
        HRESULT RadarAxisLabels([out, retval] TickLabels** RHS);
        [id(0x000007df), propget, hidden, helpcontext(0x000a8f2f)]
        HRESULT Subtype([out, retval] long* RHS);
        [id(0x000007df), propput, hidden, helpcontext(0x000a8f2f)]
        HRESULT Subtype([in] long RHS);
        [id(0x000007e0), propget, hidden, helpcontext(0x000a8f30)]
        HRESULT Type([out, retval] long* RHS);
        [id(0x000007e0), propput, hidden, helpcontext(0x000a8f30)]
        HRESULT Type([in] long RHS);
        [id(0x000007e1), propget, helpcontext(0x000a8f31)]
        HRESULT SecondPlotSize([out, retval] long* RHS);
        [id(0x000007e1), propput, helpcontext(0x000a8f31)]
        HRESULT SecondPlotSize([in] long RHS);
        [id(0x000007e2), helpcontext(0x000a8f32)]
        HRESULT CategoryCollection(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** RHS);
        [id(0x000007e3), helpcontext(0x000a8f33)]
        HRESULT FullCategoryCollection(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** RHS);
        [id(0x000007e4), propget, helpcontext(0x000a8f34)]
        HRESULT BinsType([out, retval] XlBinsType* RHS);
        [id(0x000007e4), propput, helpcontext(0x000a8f34)]
        HRESULT BinsType([in] XlBinsType RHS);
        [id(0x000007e5), propget, helpcontext(0x000a8f35)]
        HRESULT BinWidthValue([out, retval] double* pval);
        [id(0x000007e5), propput, helpcontext(0x000a8f35)]
        HRESULT BinWidthValue([in] double pval);
        [id(0x000007e6), propget, helpcontext(0x000a8f36)]
        HRESULT BinsCountValue([out, retval] int* pval);
        [id(0x000007e6), propput, helpcontext(0x000a8f36)]
        HRESULT BinsCountValue([in] int pval);
        [id(0x000007e7), propget, helpcontext(0x000a8f37)]
        HRESULT BinsOverflowEnabled([out, retval] VARIANT_BOOL* pval);
        [id(0x000007e7), propput, helpcontext(0x000a8f37)]
        HRESULT BinsOverflowEnabled([in] VARIANT_BOOL pval);
        [id(0x000007e8), propget, helpcontext(0x000a8f38)]
        HRESULT BinsOverflowValue([out, retval] double* pval);
        [id(0x000007e8), propput, helpcontext(0x000a8f38)]
        HRESULT BinsOverflowValue([in] double pval);
        [id(0x000007e9), propget, helpcontext(0x000a8f39)]
        HRESULT BinsUnderflowEnabled([out, retval] VARIANT_BOOL* pval);
        [id(0x000007e9), propput, helpcontext(0x000a8f39)]
        HRESULT BinsUnderflowEnabled([in] VARIANT_BOOL pval);
        [id(0x000007ea), propget, helpcontext(0x000a8f3a)]
        HRESULT BinsUnderflowValue([out, retval] double* pval);
        [id(0x000007ea), propput, helpcontext(0x000a8f3a)]
        HRESULT BinsUnderflowValue([in] double pval);
    };

    [
      odl,
      uuid(92D41A5E-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a9308),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartGroups : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] ChartGroup** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000a9309)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A5F-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a96f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartTitle : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000a96f1)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x000007d1), propget, helpcontext(0x000a96f1)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x000007d2), propget, helpcontext(0x000a96f2)]
        HRESULT Characters(
                        [in, optional] VARIANT Start,
                        [in, optional] VARIANT Length,
                        [out, retval] ChartCharacters** RHS);
        [id(0x000007d3), propget, hidden, helpcontext(0x000a96f3)]
        HRESULT Font([out, retval] ChartFont** ppfont);
        [id(0x000007d4), propput, helpcontext(0x000a96f4)]
        HRESULT HorizontalAlignment([in] VARIANT RHS);
        [id(0x000007d4), propget, helpcontext(0x000a96f4)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* RHS);
        [id(0x000007d5), propget, helpcontext(0x000a96f5)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x000007d5), propput, helpcontext(0x000a96f5)]
        HRESULT Left([in] double RHS);
        [id(0x000007d6), propput, helpcontext(0x000a96f6)]
        HRESULT Orientation([in] VARIANT RHS);
        [id(0x000007d6), propget, helpcontext(0x000a96f6)]
        HRESULT Orientation([out, retval] VARIANT* RHS);
        [id(0x000007d7), propget, helpcontext(0x000a96f7)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d7), propput, helpcontext(0x000a96f7)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x000007d8), propput, helpcontext(0x000a96f8)]
        HRESULT Text([in] BSTR RHS);
        [id(0x000007d8), propget, helpcontext(0x000a96f8)]
        HRESULT Text([out, retval] BSTR* RHS);
        [id(0x000007d9), propget, helpcontext(0x000a96f9)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x000007d9), propput, helpcontext(0x000a96f9)]
        HRESULT Top([in] double RHS);
        [id(0x000007da), propput, helpcontext(0x000a96fa)]
        HRESULT VerticalAlignment([in] VARIANT RHS);
        [id(0x000007da), propget, helpcontext(0x000a96fa)]
        HRESULT VerticalAlignment([out, retval] VARIANT* RHS);
        [id(0x000007db), propput, hidden, helpcontext(0x000a96fb)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x000007db), propget, hidden, helpcontext(0x000a96fb)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000007dc), propget, hidden, helpcontext(0x000a96fc)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x000007dd), propget, hidden, helpcontext(0x000a96fd)]
        HRESULT Fill([out, retval] ChartFillFormat** ppinterior);
        [id(0x000007de), helpcontext(0x000a96fe)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007df), propget, hidden, helpcontext(0x000a96ff)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x000007e0), propget, helpcontext(0x000a9700)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007e1), propget, helpcontext(0x000a9701)]
        HRESULT Parent([out, retval] IDispatch** ppval);
        [id(0x000007e2), helpcontext(0x000a9702)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000972), propget, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000972), propput, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL RHS);
        [id(0x00000687), propget, helpcontext(0x00010687)]
        HRESULT Position([out, retval] XlChartElementPosition* RHS);
        [id(0x00000687), propput, helpcontext(0x00010687)]
        HRESULT Position([in] XlChartElementPosition RHS);
        [id(0x000007e3), propget, helpcontext(0x000a9703)]
        HRESULT Format([out, retval] ChartFormat** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007e4), propget, helpcontext(0x000a9704)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007e5), propget, helpcontext(0x000a9705)]
        HRESULT ReadingOrder([out, retval] long* RHS);
        [id(0x000007e5), propput, helpcontext(0x000a9705)]
        HRESULT ReadingOrder([in] long RHS);
        [id(0x000007e6), propget, helpcontext(0x000a9706)]
        HRESULT Height([out, retval] double* Height);
        [id(0x000007e7), propget, helpcontext(0x000a9707)]
        HRESULT Width([out, retval] double* Width);
        [id(0x000007e8), propput, helpcontext(0x000a9708)]
        HRESULT Formula([in] BSTR pbstr);
        [id(0x000007e8), propget, helpcontext(0x000a9708)]
        HRESULT Formula([out, retval] BSTR* pbstr);
        [id(0x000007e9), propput, helpcontext(0x000a9709)]
        HRESULT FormulaR1C1([in] BSTR pbstr);
        [id(0x000007e9), propget, helpcontext(0x000a9709)]
        HRESULT FormulaR1C1([out, retval] BSTR* pbstr);
        [id(0x000007ea), propput, helpcontext(0x000a970a)]
        HRESULT FormulaLocal([in] BSTR pbstr);
        [id(0x000007ea), propget, helpcontext(0x000a970a)]
        HRESULT FormulaLocal([out, retval] BSTR* pbstr);
        [id(0x000007eb), propput, helpcontext(0x000a970b)]
        HRESULT FormulaR1C1Local([in] BSTR pbstr);
        [id(0x000007eb), propget, helpcontext(0x000a970b)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(92D41A60-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a9ad8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Corners : IDispatch {
        [id(0x00000096), propget, hidden, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, hidden, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), hidden, helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000a9ad9)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A61-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000a9ec0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DataLabel : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** RHS);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x0000008b), propget, helpcontext(0x0001008b)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x0000008b), propput, helpcontext(0x0001008b)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x0000025b), propget, helpcontext(0x0001025b)]
        HRESULT Characters(
                        [in, optional] VARIANT Start,
                        [in, optional] VARIANT Length,
                        [out, retval] ChartCharacters** RHS);
        [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x00000088), propget, helpcontext(0x00010088)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* RHS);
        [id(0x00000088), propput, helpcontext(0x00010088)]
        HRESULT HorizontalAlignment([in] VARIANT RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double RHS);
        [id(0x00000086), propget, helpcontext(0x00010086)]
        HRESULT Orientation([out, retval] VARIANT* RHS);
        [id(0x00000086), propput, helpcontext(0x00010086)]
        HRESULT Orientation([in] VARIANT RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x0000008a), propget, helpcontext(0x0001008a)]
        HRESULT Text([out, retval] BSTR* RHS);
        [id(0x0000008a), propput, helpcontext(0x0001008a)]
        HRESULT Text([in] BSTR RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double RHS);
        [id(0x00000089), propget, helpcontext(0x00010089)]
        HRESULT VerticalAlignment([out, retval] VARIANT* RHS);
        [id(0x00000089), propput, helpcontext(0x00010089)]
        HRESULT VerticalAlignment([in] VARIANT RHS);
        [id(0x000003cf), propget, helpcontext(0x000103cf)]
        HRESULT ReadingOrder([out, retval] long* RHS);
        [id(0x000003cf), propput, helpcontext(0x000103cf)]
        HRESULT ReadingOrder([in] long RHS);
        [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x00000087), propget, helpcontext(0x00010087)]
        HRESULT AutoText([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000087), propput, helpcontext(0x00010087)]
        HRESULT AutoText([in] VARIANT_BOOL RHS);
        [id(0x000000c1), propget, helpcontext(0x000100c1)]
        HRESULT NumberFormat([out, retval] BSTR* RHS);
        [id(0x000000c1), propput, helpcontext(0x000100c1)]
        HRESULT NumberFormat([in] BSTR RHS);
        [id(0x000000c2), propget, helpcontext(0x000100c2)]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000c2), propput, helpcontext(0x000100c2)]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL RHS);
        [id(0x00000449), propget, helpcontext(0x00010449)]
        HRESULT NumberFormatLocal([out, retval] VARIANT* RHS);
        [id(0x00000449), propput, helpcontext(0x00010449)]
        HRESULT NumberFormatLocal([in] VARIANT RHS);
        [id(0x000000ab), propget, helpcontext(0x000100ab)]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000ab), propput, helpcontext(0x000100ab)]
        HRESULT ShowLegendKey([in] VARIANT_BOOL RHS);
        [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
        HRESULT Type([out, retval] VARIANT* RHS);
        [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
        HRESULT Type([in] VARIANT RHS);
        [id(0x00000085), propget, helpcontext(0x00010085)]
        HRESULT Position([out, retval] XlDataLabelPosition* RHS);
        [id(0x00000085), propput, helpcontext(0x00010085)]
        HRESULT Position([in] XlDataLabelPosition RHS);
        [id(0x000007e6), propget, helpcontext(0x000107e6)]
        HRESULT ShowSeriesName([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e6), propput, helpcontext(0x000107e6)]
        HRESULT ShowSeriesName([in] VARIANT_BOOL RHS);
        [id(0x000007e7), propget, helpcontext(0x000107e7)]
        HRESULT ShowCategoryName([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e7), propput, helpcontext(0x000107e7)]
        HRESULT ShowCategoryName([in] VARIANT_BOOL RHS);
        [id(0x000007e8), propget, helpcontext(0x000107e8)]
        HRESULT ShowValue([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e8), propput, helpcontext(0x000107e8)]
        HRESULT ShowValue([in] VARIANT_BOOL RHS);
        [id(0x000007e9), propget, helpcontext(0x000107e9)]
        HRESULT ShowPercentage([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e9), propput, helpcontext(0x000107e9)]
        HRESULT ShowPercentage([in] VARIANT_BOOL RHS);
        [id(0x000007ea), propget, helpcontext(0x000107ea)]
        HRESULT ShowBubbleSize([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007ea), propput, helpcontext(0x000107ea)]
        HRESULT ShowBubbleSize([in] VARIANT_BOOL RHS);
        [id(0x000007eb), propget, helpcontext(0x000107eb)]
        HRESULT Separator([out, retval] VARIANT* RHS);
        [id(0x000007eb), propput, helpcontext(0x000107eb)]
        HRESULT Separator([in] VARIANT RHS);
        [id(0x000007d1), propget, helpcontext(0x000a9ec1)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000a9ec2)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d3), propget, hidden, helpcontext(0x000a9ec3)]
        HRESULT _Height([out, retval] double* Height);
        [id(0x000007d4), propget, hidden, helpcontext(0x000a9ec4)]
        HRESULT _Width([out, retval] double* Width);
        [id(0x000007d5), propput, helpcontext(0x000a9ec5)]
        HRESULT Formula([in] BSTR pbstr);
        [id(0x000007d5), propget, helpcontext(0x000a9ec5)]
        HRESULT Formula([out, retval] BSTR* pbstr);
        [id(0x000007d6), propput, helpcontext(0x000a9ec6)]
        HRESULT FormulaR1C1([in] BSTR pbstr);
        [id(0x000007d6), propget, helpcontext(0x000a9ec6)]
        HRESULT FormulaR1C1([out, retval] BSTR* pbstr);
        [id(0x000007d7), propput, helpcontext(0x000a9ec7)]
        HRESULT FormulaLocal([in] BSTR pbstr);
        [id(0x000007d7), propget, helpcontext(0x000a9ec7)]
        HRESULT FormulaLocal([out, retval] BSTR* pbstr);
        [id(0x000007d8), propput, helpcontext(0x000a9ec8)]
        HRESULT FormulaR1C1Local([in] BSTR pbstr);
        [id(0x000007d8), propget, helpcontext(0x000a9ec8)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* pbstr);
        [id(0x000007ec), propget, helpcontext(0x000107ec)]
        HRESULT ShowRange([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007ec), propput, helpcontext(0x000107ec)]
        HRESULT ShowRange([in] VARIANT_BOOL RHS);
        [id(0x000007ed), propget, helpcontext(0x00010847)]
        HRESULT Height([out, retval] double* Height);
        [id(0x000007ed), propput, helpcontext(0x00010847)]
        HRESULT Height([in] double Height);
        [id(0x000007ee), propget, helpcontext(0x00010848)]
        HRESULT Width([out, retval] double* Width);
        [id(0x000007ee), propput, helpcontext(0x00010848)]
        HRESULT Width([in] double Width);
    };

    [
      odl,
      uuid(92D41A62-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000aa2a8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DataLabels : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** RHS);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x00000088), propget, helpcontext(0x00010088)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* RHS);
        [id(0x00000088), propput, helpcontext(0x00010088)]
        HRESULT HorizontalAlignment([in] VARIANT RHS);
        [id(0x00000086), propget, helpcontext(0x00010086)]
        HRESULT Orientation([out, retval] VARIANT* RHS);
        [id(0x00000086), propput, helpcontext(0x00010086)]
        HRESULT Orientation([in] VARIANT RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x00000089), propget, helpcontext(0x00010089)]
        HRESULT VerticalAlignment([out, retval] VARIANT* RHS);
        [id(0x00000089), propput, helpcontext(0x00010089)]
        HRESULT VerticalAlignment([in] VARIANT RHS);
        [id(0x000003cf), propget, helpcontext(0x000103cf)]
        HRESULT ReadingOrder([out, retval] long* RHS);
        [id(0x000003cf), propput, helpcontext(0x000103cf)]
        HRESULT ReadingOrder([in] long RHS);
        [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x00000087), propget, helpcontext(0x00010087)]
        HRESULT AutoText([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000087), propput, helpcontext(0x00010087)]
        HRESULT AutoText([in] VARIANT_BOOL RHS);
        [id(0x000000c1), propget, helpcontext(0x000100c1)]
        HRESULT NumberFormat([out, retval] BSTR* RHS);
        [id(0x000000c1), propput, helpcontext(0x000100c1)]
        HRESULT NumberFormat([in] BSTR RHS);
        [id(0x000000c2), propget, helpcontext(0x000100c2)]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000c2), propput, helpcontext(0x000100c2)]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL RHS);
        [id(0x00000449), propget, helpcontext(0x00010449)]
        HRESULT NumberFormatLocal([out, retval] VARIANT* RHS);
        [id(0x00000449), propput, helpcontext(0x00010449)]
        HRESULT NumberFormatLocal([in] VARIANT RHS);
        [id(0x000000ab), propget, helpcontext(0x000100ab)]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000ab), propput, helpcontext(0x000100ab)]
        HRESULT ShowLegendKey([in] VARIANT_BOOL RHS);
        [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
        HRESULT Type([out, retval] VARIANT* RHS);
        [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
        HRESULT Type([in] VARIANT RHS);
        [id(0x00000085), propget, helpcontext(0x00010085)]
        HRESULT Position([out, retval] XlDataLabelPosition* RHS);
        [id(0x00000085), propput, helpcontext(0x00010085)]
        HRESULT Position([in] XlDataLabelPosition RHS);
        [id(0x000007e6), propget, helpcontext(0x000107e6)]
        HRESULT ShowSeriesName([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e6), propput, helpcontext(0x000107e6)]
        HRESULT ShowSeriesName([in] VARIANT_BOOL RHS);
        [id(0x000007e7), propget, helpcontext(0x000107e7)]
        HRESULT ShowCategoryName([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e7), propput, helpcontext(0x000107e7)]
        HRESULT ShowCategoryName([in] VARIANT_BOOL RHS);
        [id(0x000007e8), propget, helpcontext(0x000107e8)]
        HRESULT ShowValue([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e8), propput, helpcontext(0x000107e8)]
        HRESULT ShowValue([in] VARIANT_BOOL RHS);
        [id(0x000007e9), propget, helpcontext(0x000107e9)]
        HRESULT ShowPercentage([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007e9), propput, helpcontext(0x000107e9)]
        HRESULT ShowPercentage([in] VARIANT_BOOL RHS);
        [id(0x000007ea), propget, helpcontext(0x000107ea)]
        HRESULT ShowBubbleSize([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007ea), propput, helpcontext(0x000107ea)]
        HRESULT ShowBubbleSize([in] VARIANT_BOOL RHS);
        [id(0x000007eb), propget, helpcontext(0x000107eb)]
        HRESULT Separator([out, retval] VARIANT* RHS);
        [id(0x000007eb), propput, helpcontext(0x000107eb)]
        HRESULT Separator([in] VARIANT RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] DataLabel** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x000007d1), propget, helpcontext(0x000aa2a9)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000aa2aa)]
        HRESULT Application([out, retval] Application** Application);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index,
                        [out, retval] DataLabel** RHS);
        [id(0x000007ec), helpcontext(0x000aa2ab)]
        HRESULT Propagate([in] VARIANT Index);
        [id(0x000007ed), propget, helpcontext(0x000aa2ac)]
        HRESULT ShowRange([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007ed), propput, helpcontext(0x000aa2ac)]
        HRESULT ShowRange([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(92D41A63-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000aa690),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DataTable : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000aa691)]
        HRESULT ShowLegendKey([in] VARIANT_BOOL RHS);
        [id(0x000007d1), propget, helpcontext(0x000aa691)]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d2), propput, helpcontext(0x000aa692)]
        HRESULT HasBorderHorizontal([in] VARIANT_BOOL RHS);
        [id(0x000007d2), propget, helpcontext(0x000aa692)]
        HRESULT HasBorderHorizontal([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d3), propput, helpcontext(0x000aa693)]
        HRESULT HasBorderVertical([in] VARIANT_BOOL RHS);
        [id(0x000007d3), propget, helpcontext(0x000aa693)]
        HRESULT HasBorderVertical([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d4), propput, helpcontext(0x000aa694)]
        HRESULT HasBorderOutline([in] VARIANT_BOOL RHS);
        [id(0x000007d4), propget, helpcontext(0x000aa694)]
        HRESULT HasBorderOutline([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d5), propget, helpcontext(0x000aa695)]
        HRESULT Border([out, retval] ChartBorder** ppLine);
        [id(0x000007d6), propget, helpcontext(0x000aa696)]
        HRESULT Font([out, retval] ChartFont** pfont);
        [id(0x000007d7), helpcontext(0x000aa697)]
        HRESULT Select();
        [id(0x000007d8), helpcontext(0x000aa698)]
        HRESULT Delete();
        [id(0x000007d9), propget, helpcontext(0x000aa699)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007da), propget, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000007da), propput, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x000007db), propget, helpcontext(0x000aa69a)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007dc), propget, helpcontext(0x000aa69b)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A64-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000aaa78),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DisplayUnitLabel : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000aaa79)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x000007d1), propget, helpcontext(0x000aaa79)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x000007d2), propget, helpcontext(0x000aaa7a)]
        HRESULT Characters(
                        [in, optional] VARIANT Start,
                        [in, optional] VARIANT Length,
                        [out, retval] ChartCharacters** RHS);
        [id(0x000007d3), propget, hidden, helpcontext(0x000aaa7b)]
        HRESULT Font([out, retval] ChartFont** ppfont);
        [id(0x000007d4), propput, helpcontext(0x000aaa7c)]
        HRESULT HorizontalAlignment([in] VARIANT RHS);
        [id(0x000007d4), propget, helpcontext(0x000aaa7c)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* RHS);
        [id(0x000007d5), propget, helpcontext(0x000aaa7d)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x000007d5), propput, helpcontext(0x000aaa7d)]
        HRESULT Left([in] double RHS);
        [id(0x000007d6), propput, helpcontext(0x000aaa7e)]
        HRESULT Orientation([in] VARIANT RHS);
        [id(0x000007d6), propget, helpcontext(0x000aaa7e)]
        HRESULT Orientation([out, retval] VARIANT* RHS);
        [id(0x000007d7), propget, helpcontext(0x000aaa7f)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d7), propput, helpcontext(0x000aaa7f)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x000007d8), propput, helpcontext(0x000aaa80)]
        HRESULT Text([in] BSTR RHS);
        [id(0x000007d8), propget, helpcontext(0x000aaa80)]
        HRESULT Text([out, retval] BSTR* RHS);
        [id(0x000007d9), propget, helpcontext(0x000aaa81)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x000007d9), propput, helpcontext(0x000aaa81)]
        HRESULT Top([in] double RHS);
        [id(0x000007da), propput, helpcontext(0x000aaa82)]
        HRESULT VerticalAlignment([in] VARIANT RHS);
        [id(0x000007da), propget, helpcontext(0x000aaa82)]
        HRESULT VerticalAlignment([out, retval] VARIANT* RHS);
        [id(0x000007db), propput, hidden, helpcontext(0x000aaa83)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x000007db), propget, hidden, helpcontext(0x000aaa83)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000007dc), propget, hidden, helpcontext(0x000aaa84)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x000007dd), propget, hidden, helpcontext(0x000aaa85)]
        HRESULT Fill([out, retval] ChartFillFormat** ppinterior);
        [id(0x000007de), helpcontext(0x000aaa86)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007df), propget, hidden, helpcontext(0x000aaa87)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x000007e0), propget, helpcontext(0x000aaa88)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007e1), propget, helpcontext(0x000aaa89)]
        HRESULT Parent([out, retval] IDispatch** ppval);
        [id(0x000007e2), helpcontext(0x000aaa8a)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000687), propget, helpcontext(0x00010687)]
        HRESULT Position([out, retval] XlChartElementPosition* RHS);
        [id(0x00000687), propput, helpcontext(0x00010687)]
        HRESULT Position([in] XlChartElementPosition RHS);
        [id(0x000007e3), propget, helpcontext(0x000aaa8b)]
        HRESULT Format([out, retval] ChartFormat** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007e4), propget, helpcontext(0x000aaa8c)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007e5), propget, helpcontext(0x000aaa8d)]
        HRESULT ReadingOrder([out, retval] long* RHS);
        [id(0x000007e5), propput, helpcontext(0x000aaa8d)]
        HRESULT ReadingOrder([in] long RHS);
        [id(0x000007e6), propget, helpcontext(0x000aaa8e)]
        HRESULT Height([out, retval] double* Height);
        [id(0x000007e7), propget, helpcontext(0x000aaa8f)]
        HRESULT Width([out, retval] double* Width);
        [id(0x000007e8), propput, helpcontext(0x000aaa90)]
        HRESULT Formula([in] BSTR pbstr);
        [id(0x000007e8), propget, helpcontext(0x000aaa90)]
        HRESULT Formula([out, retval] BSTR* pbstr);
        [id(0x000007e9), propput, helpcontext(0x000aaa91)]
        HRESULT FormulaR1C1([in] BSTR pbstr);
        [id(0x000007e9), propget, helpcontext(0x000aaa91)]
        HRESULT FormulaR1C1([out, retval] BSTR* pbstr);
        [id(0x000007ea), propput, helpcontext(0x000aaa92)]
        HRESULT FormulaLocal([in] BSTR pbstr);
        [id(0x000007ea), propget, helpcontext(0x000aaa92)]
        HRESULT FormulaLocal([out, retval] BSTR* pbstr);
        [id(0x000007eb), propput, helpcontext(0x000aaa93)]
        HRESULT FormulaR1C1Local([in] BSTR pbstr);
        [id(0x000007eb), propget, helpcontext(0x000aaa93)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(92D41A65-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000aae60),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DownBars : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppFill);
        [id(0x000007d1), propget, helpcontext(0x000aae61)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000aae62)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A66-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ab248),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DropLines : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000ab249)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007d2), propget, helpcontext(0x000ab24a)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d3), propget, helpcontext(0x000ab24b)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x000007d4), propget, helpcontext(0x000ab24c)]
        HRESULT Format([out, retval] ChartFormat** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d5), propget, helpcontext(0x000ab24d)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d6), helpcontext(0x000ab24e)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007d7), helpcontext(0x000ab24f)]
        HRESULT Select([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(92D41A67-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ab630),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ErrorBars : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* RHS);
        [id(0x00000464), propget, helpcontext(0x00010464)]
        HRESULT EndStyle([out, retval] XlEndStyleCap* RHS);
        [id(0x00000464), propput, helpcontext(0x00010464)]
        HRESULT EndStyle([in] XlEndStyleCap RHS);
        [id(0x000007d1), propget, helpcontext(0x000ab631)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000ab632)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A68-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000aba18),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Floor : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppFill);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] VARIANT* RHS);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] VARIANT RHS);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste();
        [id(0x00000973), propget, helpcontext(0x00010973)]
        HRESULT Thickness([out, retval] long* RHS);
        [id(0x00000973), propput, helpcontext(0x00010973)]
        HRESULT Thickness([in] long RHS);
        [id(0x000007d1), propget, helpcontext(0x000aba19)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000aba1a)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A69-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000abe00),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFont : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000abe01)]
        HRESULT Background([in] VARIANT RHS);
        [id(0x000007d1), propget, helpcontext(0x000abe01)]
        HRESULT Background([out, retval] VARIANT* RHS);
        [id(0x000007d2), propput, helpcontext(0x000abe02)]
        HRESULT Bold([in] VARIANT RHS);
        [id(0x000007d2), propget, helpcontext(0x000abe02)]
        HRESULT Bold([out, retval] VARIANT* RHS);
        [id(0x000007d3), propput, helpcontext(0x000abe03)]
        HRESULT Color([in] VARIANT RHS);
        [id(0x000007d3), propget, helpcontext(0x000abe03)]
        HRESULT Color([out, retval] VARIANT* RHS);
        [id(0x000007d4), propput, helpcontext(0x000abe04)]
        HRESULT ColorIndex([in] VARIANT RHS);
        [id(0x000007d4), propget, helpcontext(0x000abe04)]
        HRESULT ColorIndex([out, retval] VARIANT* RHS);
        [id(0x000007d5), propput, helpcontext(0x000abe05)]
        HRESULT FontStyle([in] VARIANT RHS);
        [id(0x000007d5), propget, helpcontext(0x000abe05)]
        HRESULT FontStyle([out, retval] VARIANT* RHS);
        [id(0x000007d6), propput, helpcontext(0x000abe06)]
        HRESULT Italic([in] VARIANT RHS);
        [id(0x000007d6), propget, helpcontext(0x000abe06)]
        HRESULT Italic([out, retval] VARIANT* RHS);
        [id(0x000007d7), propput, helpcontext(0x000abe07)]
        HRESULT Name([in] VARIANT RHS);
        [id(0x000007d7), propget, helpcontext(0x000abe07)]
        HRESULT Name([out, retval] VARIANT* RHS);
        [id(0x000007d8), propput, hidden, helpcontext(0x000abe08)]
        HRESULT OutlineFont([in] VARIANT RHS);
        [id(0x000007d8), propget, hidden, helpcontext(0x000abe08)]
        HRESULT OutlineFont([out, retval] VARIANT* RHS);
        [id(0x000007d9), propput, hidden, helpcontext(0x000abe09)]
        HRESULT Shadow([in] VARIANT RHS);
        [id(0x000007d9), propget, hidden, helpcontext(0x000abe09)]
        HRESULT Shadow([out, retval] VARIANT* RHS);
        [id(0x000007da), propput, helpcontext(0x000abe0a)]
        HRESULT Size([in] VARIANT RHS);
        [id(0x000007da), propget, helpcontext(0x000abe0a)]
        HRESULT Size([out, retval] VARIANT* RHS);
        [id(0x000007db), propput, helpcontext(0x000abe0b)]
        HRESULT Strikethrough([in] VARIANT RHS);
        [id(0x000007db), propget, helpcontext(0x000abe0b)]
        HRESULT Strikethrough([out, retval] VARIANT* RHS);
        [id(0x000007dc), propput, helpcontext(0x000abe0c)]
        HRESULT Subscript([in] VARIANT RHS);
        [id(0x000007dc), propget, helpcontext(0x000abe0c)]
        HRESULT Subscript([out, retval] VARIANT* RHS);
        [id(0x000007dd), propput, helpcontext(0x000abe0d)]
        HRESULT Superscript([in] VARIANT RHS);
        [id(0x000007dd), propget, helpcontext(0x000abe0d)]
        HRESULT Superscript([out, retval] VARIANT* RHS);
        [id(0x000007de), propput, helpcontext(0x000abe0e)]
        HRESULT Underline([in] VARIANT RHS);
        [id(0x000007de), propget, helpcontext(0x000abe0e)]
        HRESULT Underline([out, retval] VARIANT* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007df), propget, helpcontext(0x000abe0f)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A6A-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ac1e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Gridlines : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x000007d1), propget, helpcontext(0x000ac1e9)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000ac1ea)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A6B-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ac5d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HiLoLines : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000ac5d1)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d2), propget, helpcontext(0x000ac5d2)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007d3), propget, helpcontext(0x000ac5d3)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x000007d4), propget, helpcontext(0x000ac5d4)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d5), propget, helpcontext(0x000ac5d5)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d6), helpcontext(0x000ac5d6)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007d7), helpcontext(0x000ac5d7)]
        HRESULT Select([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(92D41A6C-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ac9b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Interior : IDispatch {
        [id(0x000007d1), propput, helpcontext(0x000ac9b9)]
        HRESULT Color([in] VARIANT RHS);
        [id(0x000007d1), propget, helpcontext(0x000ac9b9)]
        HRESULT Color([out, retval] VARIANT* RHS);
        [id(0x000007d2), propput, helpcontext(0x000ac9ba)]
        HRESULT ColorIndex([in] VARIANT RHS);
        [id(0x000007d2), propget, helpcontext(0x000ac9ba)]
        HRESULT ColorIndex([out, retval] VARIANT* RHS);
        [id(0x000007d3), propput, helpcontext(0x000ac9bb)]
        HRESULT InvertIfNegative([in] VARIANT RHS);
        [id(0x000007d3), propget, helpcontext(0x000ac9bb)]
        HRESULT InvertIfNegative([out, retval] VARIANT* RHS);
        [id(0x000007d4), propput, helpcontext(0x000ac9bc)]
        HRESULT Pattern([in] VARIANT RHS);
        [id(0x000007d4), propget, helpcontext(0x000ac9bc)]
        HRESULT Pattern([out, retval] VARIANT* RHS);
        [id(0x000007d5), propput, helpcontext(0x000ac9bd)]
        HRESULT PatternColor([in] VARIANT RHS);
        [id(0x000007d5), propget, helpcontext(0x000ac9bd)]
        HRESULT PatternColor([out, retval] VARIANT* RHS);
        [id(0x000007d6), propput, helpcontext(0x000ac9be)]
        HRESULT PatternColorIndex([in] VARIANT RHS);
        [id(0x000007d6), propget, helpcontext(0x000ac9be)]
        HRESULT PatternColorIndex([out, retval] VARIANT* RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d7), propget, helpcontext(0x000ac9bf)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A6D-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000acda0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LeaderLines : IDispatch {
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select();
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete();
        [id(0x000007d1), propget, helpcontext(0x000acda1)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d2), propget, helpcontext(0x000acda2)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A6E-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ad188),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Legend : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x000000ad), helpcontext(0x000100ad)]
        HRESULT LegendEntries(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** RHS);
        [id(0x00000085), propget, helpcontext(0x00010085)]
        HRESULT Position([out, retval] XlLegendPosition* RHS);
        [id(0x00000085), propput, helpcontext(0x00010085)]
        HRESULT Position([in] XlLegendPosition RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x0000006f), helpcontext(0x0001006f)]
        HRESULT Clear([out, retval] VARIANT* RHS);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height([in] double RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** RHS);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double RHS);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width([in] double RHS);
        [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x00000972), propget, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000972), propput, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL RHS);
        [id(0x000007d1), propget, helpcontext(0x000ad189)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000ad18a)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A6F-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ad570),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LegendEntries : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] LegendEntry** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000ad571)]
        HRESULT Application([out, retval] Application** Application);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index,
                        [out, retval] LegendEntry** RHS);
    };

    [
      odl,
      uuid(92D41A70-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ad958),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LegendEntry : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000092), propget, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x000001e6), propget, helpcontext(0x000101e6)]
        HRESULT Index([out, retval] long* RHS);
        [id(0x000000ae), propget, helpcontext(0x000100ae)]
        HRESULT LegendKey([out, retval] LegendKey** RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x000007d1), propget, helpcontext(0x000ad959)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000ad95a)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A71-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000add40),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LegendKey : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** RHS);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x00000084), propget, helpcontext(0x00010084)]
        HRESULT InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000084), propput, helpcontext(0x00010084)]
        HRESULT InvertIfNegative([in] VARIANT_BOOL RHS);
        [id(0x00000049), propget, helpcontext(0x00010049)]
        HRESULT MarkerBackgroundColor([out, retval] long* RHS);
        [id(0x00000049), propput, helpcontext(0x00010049)]
        HRESULT MarkerBackgroundColor([in] long RHS);
        [id(0x0000004a), propget, helpcontext(0x0001004a)]
        HRESULT MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x0000004a), propput, helpcontext(0x0001004a)]
        HRESULT MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [id(0x0000004b), propget, helpcontext(0x0001004b)]
        HRESULT MarkerForegroundColor([out, retval] long* RHS);
        [id(0x0000004b), propput, helpcontext(0x0001004b)]
        HRESULT MarkerForegroundColor([in] long RHS);
        [id(0x0000004c), propget, helpcontext(0x0001004c)]
        HRESULT MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x0000004c), propput, helpcontext(0x0001004c)]
        HRESULT MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [id(0x000000e7), propget, helpcontext(0x000100e7)]
        HRESULT MarkerSize([out, retval] long* RHS);
        [id(0x000000e7), propput, helpcontext(0x000100e7)]
        HRESULT MarkerSize([in] long RHS);
        [id(0x00000048), propget, helpcontext(0x00010048)]
        HRESULT MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [id(0x00000048), propput, helpcontext(0x00010048)]
        HRESULT MarkerStyle([in] XlMarkerStyle RHS);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] long* RHS);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] long RHS);
        [id(0x000000eb), hidden, helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x000000a3), propget, helpcontext(0x000100a3)]
        HRESULT Smooth([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000a3), propput, helpcontext(0x000100a3)]
        HRESULT Smooth([in] VARIANT_BOOL RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x000007d1), propget, helpcontext(0x000add41)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000a59), propget, helpcontext(0x00010a59)]
        HRESULT PictureUnit2([out, retval] double* RHS);
        [id(0x00000a59), propput, helpcontext(0x00010a59)]
        HRESULT PictureUnit2([in] double RHS);
        [id(0x000007d2), propget, helpcontext(0x000add42)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d3), propget, hidden, helpcontext(0x000add43)]
        HRESULT PictureUnit([out, retval] long* RHS);
        [id(0x000007d3), propput, hidden, helpcontext(0x000add43)]
        HRESULT PictureUnit([in] long RHS);
    };

    [
      odl,
      uuid(92D41A72-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ae128),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PlotArea : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height([in] double RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppFill);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double RHS);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width([in] double RHS);
        [id(0x00000683), propget, helpcontext(0x00010683)]
        HRESULT InsideLeft([out, retval] double* RHS);
        [id(0x00000683), propput, helpcontext(0x00010683)]
        HRESULT InsideLeft([in] double RHS);
        [id(0x00000684), propget, helpcontext(0x00010684)]
        HRESULT InsideTop([out, retval] double* RHS);
        [id(0x00000684), propput, helpcontext(0x00010684)]
        HRESULT InsideTop([in] double RHS);
        [id(0x00000685), propget, helpcontext(0x00010685)]
        HRESULT InsideWidth([out, retval] double* RHS);
        [id(0x00000685), propput, helpcontext(0x00010685)]
        HRESULT InsideWidth([in] double RHS);
        [id(0x00000686), propget, helpcontext(0x00010686)]
        HRESULT InsideHeight([out, retval] double* RHS);
        [id(0x00000686), propput, helpcontext(0x00010686)]
        HRESULT InsideHeight([in] double RHS);
        [id(0x00000687), propget, helpcontext(0x00010687)]
        HRESULT Position([out, retval] XlChartElementPosition* RHS);
        [id(0x00000687), propput, helpcontext(0x00010687)]
        HRESULT Position([in] XlChartElementPosition RHS);
        [id(0x000007d1), propget, helpcontext(0x000ae129)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007d2), propget, helpcontext(0x000ae12a)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A73-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ae510),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Point : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* RHS);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy([out, retval] VARIANT* RHS);
        [id(0x0000009e), propget, helpcontext(0x0001009e)]
        HRESULT DataLabel([out, retval] DataLabel** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000000b6), propget, helpcontext(0x000100b6)]
        HRESULT Explosion([out, retval] long* RHS);
        [id(0x000000b6), propput, helpcontext(0x000100b6)]
        HRESULT Explosion([in] long RHS);
        [id(0x0000004d), propget, helpcontext(0x0001004d)]
        HRESULT HasDataLabel([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000004d), propput, helpcontext(0x0001004d)]
        HRESULT HasDataLabel([in] VARIANT_BOOL RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** RHS);
        [id(0x00000084), propget, helpcontext(0x00010084)]
        HRESULT InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000084), propput, helpcontext(0x00010084)]
        HRESULT InvertIfNegative([in] VARIANT_BOOL RHS);
        [id(0x00000049), propget, helpcontext(0x00010049)]
        HRESULT MarkerBackgroundColor([out, retval] long* RHS);
        [id(0x00000049), propput, helpcontext(0x00010049)]
        HRESULT MarkerBackgroundColor([in] long RHS);
        [id(0x0000004a), propget, helpcontext(0x0001004a)]
        HRESULT MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x0000004a), propput, helpcontext(0x0001004a)]
        HRESULT MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [id(0x0000004b), propget, helpcontext(0x0001004b)]
        HRESULT MarkerForegroundColor([out, retval] long* RHS);
        [id(0x0000004b), propput, helpcontext(0x0001004b)]
        HRESULT MarkerForegroundColor([in] long RHS);
        [id(0x0000004c), propget, helpcontext(0x0001004c)]
        HRESULT MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x0000004c), propput, helpcontext(0x0001004c)]
        HRESULT MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [id(0x000000e7), propget, helpcontext(0x000100e7)]
        HRESULT MarkerSize([out, retval] long* RHS);
        [id(0x000000e7), propput, helpcontext(0x000100e7)]
        HRESULT MarkerSize([in] long RHS);
        [id(0x00000048), propget, helpcontext(0x00010048)]
        HRESULT MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [id(0x00000048), propput, helpcontext(0x00010048)]
        HRESULT MarkerStyle([in] XlMarkerStyle RHS);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste([out, retval] VARIANT* RHS);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] XlChartPictureType* RHS);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] XlChartPictureType RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x0000067b), propget, helpcontext(0x0001067b)]
        HRESULT ApplyPictToSides([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067b), propput, helpcontext(0x0001067b)]
        HRESULT ApplyPictToSides([in] VARIANT_BOOL RHS);
        [id(0x0000067c), propget, helpcontext(0x0001067c)]
        HRESULT ApplyPictToFront([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067c), propput, helpcontext(0x0001067c)]
        HRESULT ApplyPictToFront([in] VARIANT_BOOL RHS);
        [id(0x0000067d), propget, helpcontext(0x0001067d)]
        HRESULT ApplyPictToEnd([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067d), propput, helpcontext(0x0001067d)]
        HRESULT ApplyPictToEnd([in] VARIANT_BOOL RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x0000067e), propget, helpcontext(0x0001067e)]
        HRESULT SecondaryPlot([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067e), propput, helpcontext(0x0001067e)]
        HRESULT SecondaryPlot([in] VARIANT_BOOL RHS);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x00000681), propget, helpcontext(0x00010681)]
        HRESULT Has3DEffect([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000681), propput, helpcontext(0x00010681)]
        HRESULT Has3DEffect([in] VARIANT_BOOL RHS);
        [id(0x000007d1), propget, helpcontext(0x000ae511)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000a59), propget, helpcontext(0x00010a59)]
        HRESULT PictureUnit2([out, retval] double* RHS);
        [id(0x00000a59), propput, helpcontext(0x00010a59)]
        HRESULT PictureUnit2([in] double RHS);
        [id(0x000007d2), propget, helpcontext(0x000ae512)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d3), hidden, helpcontext(0x000ae513)]
        HRESULT _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type,
                        [in, optional] VARIANT LegendKey,
                        [in, optional] VARIANT AutoText,
                        [in, optional] VARIANT HasLeaderLines,
                        [out, retval] VARIANT* RHS);
        [id(0x000007d4), helpcontext(0x000ae514)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type,
                        [in, optional] VARIANT LegendKey,
                        [in, optional] VARIANT AutoText,
                        [in, optional] VARIANT HasLeaderLines,
                        [in, optional] VARIANT ShowSeriesName,
                        [in, optional] VARIANT ShowCategoryName,
                        [in, optional] VARIANT ShowValue,
                        [in, optional] VARIANT ShowPercentage,
                        [in, optional] VARIANT ShowBubbleSize,
                        [in, optional] VARIANT Separator,
                        [out, retval] VARIANT* RHS);
        [id(0x000007d5), propget, hidden, helpcontext(0x000ae515)]
        HRESULT PictureUnit([out, retval] long* RHS);
        [id(0x000007d5), propput, hidden, helpcontext(0x000ae515)]
        HRESULT PictureUnit([in] long RHS);
        [id(0x000007d6), propget, helpcontext(0x000ae516)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007d7), propget, helpcontext(0x000ae517)]
        HRESULT Height([out, retval] double* pval);
        [id(0x000007d8), propget, helpcontext(0x000ae518)]
        HRESULT Width([out, retval] double* pval);
        [id(0x000007d9), propget, helpcontext(0x000ae519)]
        HRESULT Left([out, retval] double* pval);
        [id(0x000007da), propget, helpcontext(0x000ae51a)]
        HRESULT Top([out, retval] double* pval);
        [id(0x000007db), helpcontext(0x000ae51b)]
        HRESULT PieSliceLocation(
                        [in] XlPieSliceLocation loc,
                        [in, optional, defaultvalue(2)] XlPieSliceIndex Index,
                        [out, retval] double* pval);
        [id(0x000007dc), propget, helpcontext(0x000ae51c)]
        HRESULT IsTotal([out, retval] VARIANT_BOOL* pval);
        [id(0x000007dc), propput, helpcontext(0x000ae51c)]
        HRESULT IsTotal([in] VARIANT_BOOL pval);
    };

    [
      odl,
      uuid(92D41A74-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000ae8f8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Points : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] long Index,
                        [out, retval] Point** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000ae8f9)]
        HRESULT Application([out, retval] Application** Application);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] long Index,
                        [out, retval] Point** RHS);
    };

    [
      odl,
      uuid(92D41A75-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000aece0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Series : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000002f), propget, helpcontext(0x0001002f)]
        HRESULT AxisGroup([out, retval] XlAxisGroup* RHS);
        [id(0x0000002f), propput, helpcontext(0x0001002f)]
        HRESULT AxisGroup([in] XlAxisGroup RHS);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* RHS);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy([out, retval] VARIANT* RHS);
        [id(0x0000009d), helpcontext(0x0001009d)]
        HRESULT DataLabels(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000098), helpcontext(0x00010098)]
        HRESULT ErrorBar(
                        [in] XlErrorBarDirection Direction,
                        [in] XlErrorBarInclude Include,
                        [in] XlErrorBarType Type,
                        [in, optional] VARIANT Amount,
                        [in, optional] VARIANT MinusValues,
                        [out, retval] VARIANT* RHS);
        [id(0x0000009f), propget, helpcontext(0x0001009f)]
        HRESULT ErrorBars([out, retval] ErrorBars** RHS);
        [id(0x000000b6), propget, helpcontext(0x000100b6)]
        HRESULT Explosion([out, retval] long* RHS);
        [id(0x000000b6), propput, helpcontext(0x000100b6)]
        HRESULT Explosion([in] long RHS);
        [id(0x00000105), propget, helpcontext(0x00010105)]
        HRESULT Formula([out, retval] BSTR* RHS);
        [id(0x00000105), propput, helpcontext(0x00010105)]
        HRESULT Formula([in] BSTR RHS);
        [id(0x00000107), propget, helpcontext(0x00010107)]
        HRESULT FormulaLocal([out, retval] BSTR* RHS);
        [id(0x00000107), propput, helpcontext(0x00010107)]
        HRESULT FormulaLocal([in] BSTR RHS);
        [id(0x00000108), propget, helpcontext(0x00010108)]
        HRESULT FormulaR1C1([out, retval] BSTR* RHS);
        [id(0x00000108), propput, helpcontext(0x00010108)]
        HRESULT FormulaR1C1([in] BSTR RHS);
        [id(0x00000109), propget, helpcontext(0x00010109)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* RHS);
        [id(0x00000109), propput, helpcontext(0x00010109)]
        HRESULT FormulaR1C1Local([in] BSTR RHS);
        [id(0x0000004e), propget, helpcontext(0x0001004e)]
        HRESULT HasDataLabels([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000004e), propput, helpcontext(0x0001004e)]
        HRESULT HasDataLabels([in] VARIANT_BOOL RHS);
        [id(0x000000a0), propget, helpcontext(0x000100a0)]
        HRESULT HasErrorBars([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000a0), propput, helpcontext(0x000100a0)]
        HRESULT HasErrorBars([in] VARIANT_BOOL RHS);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** RHS);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x00000084), propget, helpcontext(0x00010084)]
        HRESULT InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000084), propput, helpcontext(0x00010084)]
        HRESULT InvertIfNegative([in] VARIANT_BOOL RHS);
        [id(0x00000049), propget, helpcontext(0x00010049)]
        HRESULT MarkerBackgroundColor([out, retval] long* RHS);
        [id(0x00000049), propput, helpcontext(0x00010049)]
        HRESULT MarkerBackgroundColor([in] long RHS);
        [id(0x0000004a), propget, helpcontext(0x0001004a)]
        HRESULT MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x0000004a), propput, helpcontext(0x0001004a)]
        HRESULT MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [id(0x0000004b), propget, helpcontext(0x0001004b)]
        HRESULT MarkerForegroundColor([out, retval] long* RHS);
        [id(0x0000004b), propput, helpcontext(0x0001004b)]
        HRESULT MarkerForegroundColor([in] long RHS);
        [id(0x0000004c), propget, helpcontext(0x0001004c)]
        HRESULT MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x0000004c), propput, helpcontext(0x0001004c)]
        HRESULT MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [id(0x000000e7), propget, helpcontext(0x000100e7)]
        HRESULT MarkerSize([out, retval] long* RHS);
        [id(0x000000e7), propput, helpcontext(0x000100e7)]
        HRESULT MarkerSize([in] long RHS);
        [id(0x00000048), propget, helpcontext(0x00010048)]
        HRESULT MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [id(0x00000048), propput, helpcontext(0x00010048)]
        HRESULT MarkerStyle([in] XlMarkerStyle RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x0000006e), propput, helpcontext(0x0001006e)]
        HRESULT Name([in] BSTR RHS);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste([out, retval] VARIANT* RHS);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] XlChartPictureType* RHS);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] XlChartPictureType RHS);
        [id(0x000000e4), propget, helpcontext(0x000100e4)]
        HRESULT PlotOrder([out, retval] long* RHS);
        [id(0x000000e4), propput, helpcontext(0x000100e4)]
        HRESULT PlotOrder([in] long RHS);
        [id(0x00000046), helpcontext(0x00010046)]
        HRESULT Points(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x000000a3), propget, helpcontext(0x000100a3)]
        HRESULT Smooth([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000a3), propput, helpcontext(0x000100a3)]
        HRESULT Smooth([in] VARIANT_BOOL RHS);
        [id(0x0000009a), helpcontext(0x0001009a)]
        HRESULT Trendlines(
                        [in, optional] VARIANT Index,
                        [out, retval] IDispatch** RHS);
        [id(0x0000006c), propget, helpcontext(0x0001006c)]
        HRESULT Type([out, retval] long* RHS);
        [id(0x0000006c), propput, helpcontext(0x0001006c)]
        HRESULT Type([in] long RHS);
        [id(0x00000578), propget, helpcontext(0x00010578)]
        HRESULT ChartType([out, retval] XlChartType* RHS);
        [id(0x00000578), propput, helpcontext(0x00010578)]
        HRESULT ChartType([in] XlChartType RHS);
        [id(0x00000579), hidden, helpcontext(0x00010579)]
        HRESULT ApplyCustomType([in] XlChartType ChartType);
        [id(0x000000a4), propget, helpcontext(0x000100a4)]
        HRESULT Values([out, retval] VARIANT* RHS);
        [id(0x000000a4), propput, helpcontext(0x000100a4)]
        HRESULT Values([in] VARIANT RHS);
        [id(0x00000457), propget, helpcontext(0x00010457)]
        HRESULT XValues([out, retval] VARIANT* RHS);
        [id(0x00000457), propput, helpcontext(0x00010457)]
        HRESULT XValues([in] VARIANT RHS);
        [id(0x00000680), propget, helpcontext(0x00010680)]
        HRESULT BubbleSizes([out, retval] VARIANT* RHS);
        [id(0x00000680), propput, helpcontext(0x00010680)]
        HRESULT BubbleSizes([in] VARIANT RHS);
        [id(0x0000057b), propget, helpcontext(0x0001057b)]
        HRESULT BarShape([out, retval] XlBarShape* RHS);
        [id(0x0000057b), propput, helpcontext(0x0001057b)]
        HRESULT BarShape([in] XlBarShape RHS);
        [id(0x0000067b), propget, helpcontext(0x0001067b)]
        HRESULT ApplyPictToSides([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067b), propput, helpcontext(0x0001067b)]
        HRESULT ApplyPictToSides([in] VARIANT_BOOL RHS);
        [id(0x0000067c), propget, helpcontext(0x0001067c)]
        HRESULT ApplyPictToFront([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067c), propput, helpcontext(0x0001067c)]
        HRESULT ApplyPictToFront([in] VARIANT_BOOL RHS);
        [id(0x0000067d), propget, helpcontext(0x0001067d)]
        HRESULT ApplyPictToEnd([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000067d), propput, helpcontext(0x0001067d)]
        HRESULT ApplyPictToEnd([in] VARIANT_BOOL RHS);
        [id(0x00000681), propget, helpcontext(0x00010681)]
        HRESULT Has3DEffect([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000681), propput, helpcontext(0x00010681)]
        HRESULT Has3DEffect([in] VARIANT_BOOL RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x00000572), propget, helpcontext(0x00010572)]
        HRESULT HasLeaderLines([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000572), propput, helpcontext(0x00010572)]
        HRESULT HasLeaderLines([in] VARIANT_BOOL RHS);
        [id(0x00000682), propget, helpcontext(0x00010682)]
        HRESULT LeaderLines([out, retval] LeaderLines** RHS);
        [id(0x000007d1), propget, helpcontext(0x000aece1)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000a59), propget, helpcontext(0x00010a59)]
        HRESULT PictureUnit2([out, retval] double* RHS);
        [id(0x00000a59), propput, helpcontext(0x00010a59)]
        HRESULT PictureUnit2([in] double RHS);
        [id(0x000007d2), propget, helpcontext(0x000aece2)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d3), hidden, helpcontext(0x000aece3)]
        HRESULT _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type,
                        [in, optional] VARIANT LegendKey,
                        [in, optional] VARIANT AutoText,
                        [in, optional] VARIANT HasLeaderLines,
                        [out, retval] VARIANT* RHS);
        [id(0x000007d4), helpcontext(0x000aece4)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type,
                        [in, optional] VARIANT LegendKey,
                        [in, optional] VARIANT AutoText,
                        [in, optional] VARIANT HasLeaderLines,
                        [in, optional] VARIANT ShowSeriesName,
                        [in, optional] VARIANT ShowCategoryName,
                        [in, optional] VARIANT ShowValue,
                        [in, optional] VARIANT ShowPercentage,
                        [in, optional] VARIANT ShowBubbleSize,
                        [in, optional] VARIANT Separator,
                        [out, retval] VARIANT* RHS);
        [id(0x000007d5), propget, hidden, helpcontext(0x000aece5)]
        HRESULT PictureUnit([out, retval] long* RHS);
        [id(0x000007d5), propput, hidden, helpcontext(0x000aece5)]
        HRESULT PictureUnit([in] long RHS);
        [id(0x000007d6), propget, helpcontext(0x000aece6)]
        HRESULT PlotColorIndex([out, retval] long* RHS);
        [id(0x000007d7), propget, helpcontext(0x000aece7)]
        HRESULT InvertColor([out, retval] long* RHS);
        [id(0x000007d7), propput, helpcontext(0x000aece7)]
        HRESULT InvertColor([in] long RHS);
        [id(0x000007d8), propget, helpcontext(0x000aece8)]
        HRESULT InvertColorIndex([out, retval] XlColorIndex* RHS);
        [id(0x000007d8), propput, helpcontext(0x000aece8)]
        HRESULT InvertColorIndex([in] XlColorIndex RHS);
        [id(0x000007d9), propget, helpcontext(0x000aece9)]
        HRESULT IsFiltered([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d9), propput, helpcontext(0x000aece9)]
        HRESULT IsFiltered([in] VARIANT_BOOL RHS);
        [id(0x000007da), propget, helpcontext(0x000aecea)]
        HRESULT ParentDataLabelOption([out, retval] XlParentDataLabelOptions* RHS);
        [id(0x000007da), propput, helpcontext(0x000aecea)]
        HRESULT ParentDataLabelOption([in] XlParentDataLabelOptions RHS);
        [id(0x000007db), propget, helpcontext(0x000aeceb)]
        HRESULT QuartileCalculationInclusiveMedian([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007db), propput, helpcontext(0x000aeceb)]
        HRESULT QuartileCalculationInclusiveMedian([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(92D41A76-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000af0c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SeriesCollection : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000e3), helpcontext(0x000100e3)]
        HRESULT Extend(
                        [in] VARIANT Source,
                        [in, optional] VARIANT Rowcol,
                        [in, optional] VARIANT CategoryLabels,
                        [out, retval] VARIANT* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Series** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x0000045d), helpcontext(0x0001045d)]
        HRESULT NewSeries([out, retval] Series** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000af0c9)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), helpcontext(0x000af0ca)]
        HRESULT Add(
                        [in] VARIANT Source,
                        [in, optional, defaultvalue(-4105)] XlRowCol Rowcol,
                        [in, optional] VARIANT SeriesLabels,
                        [in, optional] VARIANT CategoryLabels,
                        [in, optional] VARIANT Replace,
                        [out, retval] Series** RHS);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index,
                        [out, retval] Series** RHS);
    };

    [
      odl,
      uuid(92D41A77-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000af4b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SeriesLines : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x000007d1), propget, helpcontext(0x000af4b1)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000af4b2)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A78-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000af898),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TickLabels : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000af899)]
        HRESULT Parent([out, retval] IDispatch** ppval);
        [id(0x000007d2), helpcontext(0x000af89a)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000007d3), propget, helpcontext(0x000af89b)]
        HRESULT Font([out, retval] ChartFont** ppval);
        [id(0x000007d4), propget, helpcontext(0x000af89c)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000007d5), propget, helpcontext(0x000af89d)]
        HRESULT NumberFormat([out, retval] BSTR* RHS);
        [id(0x000007d5), propput, helpcontext(0x000af89d)]
        HRESULT NumberFormat([in] BSTR RHS);
        [id(0x000007d6), propget, helpcontext(0x000af89e)]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d6), propput, helpcontext(0x000af89e)]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL RHS);
        [id(0x000007d7), propget, helpcontext(0x000af89f)]
        HRESULT NumberFormatLocal([out, retval] VARIANT* RHS);
        [id(0x000007d7), propput, helpcontext(0x000af89f)]
        HRESULT NumberFormatLocal([in] VARIANT RHS);
        [id(0x000007d8), propget, helpcontext(0x000af8a0)]
        HRESULT Orientation([out, retval] XlTickLabelOrientation* RHS);
        [id(0x000007d8), propput, helpcontext(0x000af8a0)]
        HRESULT Orientation([in] XlTickLabelOrientation RHS);
        [id(0x000007d9), helpcontext(0x000af8a1)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x000007da), propget, hidden, helpcontext(0x000af8a2)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000007da), propput, hidden, helpcontext(0x000af8a2)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x000007db), propget, helpcontext(0x000af8a3)]
        HRESULT Depth([out, retval] int* RHS);
        [id(0x000007dc), propget, helpcontext(0x000af8a4)]
        HRESULT Offset([out, retval] int* RHS);
        [id(0x000007dc), propput, helpcontext(0x000af8a4)]
        HRESULT Offset([in] int RHS);
        [id(0x000007dd), propget, helpcontext(0x000af8a5)]
        HRESULT MultiLevel([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007dd), propput, helpcontext(0x000af8a5)]
        HRESULT MultiLevel([in] VARIANT_BOOL RHS);
        [id(0x000007de), propget, helpcontext(0x000af8a6)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007df), propget, helpcontext(0x000af8a7)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007e0), propget, helpcontext(0x000af8a8)]
        HRESULT Alignment([out, retval] long* RHS);
        [id(0x000007e0), propput, helpcontext(0x000af8a8)]
        HRESULT Alignment([in] long RHS);
        [id(0x000007e1), propget, helpcontext(0x000af8a9)]
        HRESULT ReadingOrder([out, retval] long* RHS);
        [id(0x000007e1), propput, helpcontext(0x000af8a9)]
        HRESULT ReadingOrder([in] long RHS);
    };

    [
      odl,
      uuid(92D41A79-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000afc80),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Trendline : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** RHS);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* RHS);
        [id(0x0000009e), propget, helpcontext(0x0001009e)]
        HRESULT DataLabel([out, retval] DataLabel** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x000000be), propget, helpcontext(0x000100be)]
        HRESULT DisplayEquation([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000be), propput, helpcontext(0x000100be)]
        HRESULT DisplayEquation([in] VARIANT_BOOL RHS);
        [id(0x000000bd), propget, helpcontext(0x000100bd)]
        HRESULT DisplayRSquared([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000bd), propput, helpcontext(0x000100bd)]
        HRESULT DisplayRSquared([in] VARIANT_BOOL RHS);
        [id(0x000001e6), propget, helpcontext(0x000101e6)]
        HRESULT Index([out, retval] long* RHS);
        [id(0x000000ba), propget, helpcontext(0x000100ba)]
        HRESULT Intercept([out, retval] double* RHS);
        [id(0x000000ba), propput, helpcontext(0x000100ba)]
        HRESULT Intercept([in] double RHS);
        [id(0x000000bb), propget, helpcontext(0x000100bb)]
        HRESULT InterceptIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000bb), propput, helpcontext(0x000100bb)]
        HRESULT InterceptIsAuto([in] VARIANT_BOOL RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x0000006e), propput, helpcontext(0x0001006e)]
        HRESULT Name([in] BSTR RHS);
        [id(0x000000bc), propget, helpcontext(0x000100bc)]
        HRESULT NameIsAuto([out, retval] VARIANT_BOOL* RHS);
        [id(0x000000bc), propput, helpcontext(0x000100bc)]
        HRESULT NameIsAuto([in] VARIANT_BOOL RHS);
        [id(0x000000c0), propget, helpcontext(0x000100c0)]
        HRESULT Order([out, retval] long* RHS);
        [id(0x000000c0), propput, helpcontext(0x000100c0)]
        HRESULT Order([in] long RHS);
        [id(0x000000b8), propget, helpcontext(0x000100b8)]
        HRESULT Period([out, retval] long* RHS);
        [id(0x000000b8), propput, helpcontext(0x000100b8)]
        HRESULT Period([in] long RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x0000006c), propget, helpcontext(0x0001006c)]
        HRESULT Type([out, retval] XlTrendlineType* RHS);
        [id(0x0000006c), propput, helpcontext(0x0001006c)]
        HRESULT Type([in] XlTrendlineType RHS);
        [id(0x000007d1), propget, helpcontext(0x000afc81)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000a5a), propget, helpcontext(0x00010a5a)]
        HRESULT Backward2([out, retval] double* RHS);
        [id(0x00000a5a), propput, helpcontext(0x00010a5a)]
        HRESULT Backward2([in] double RHS);
        [id(0x00000a5b), propget, helpcontext(0x00010a5b)]
        HRESULT Forward2([out, retval] double* RHS);
        [id(0x00000a5b), propput, helpcontext(0x00010a5b)]
        HRESULT Forward2([in] double RHS);
        [id(0x000007d2), propget, helpcontext(0x000afc82)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d3), propget, hidden, helpcontext(0x000afc83)]
        HRESULT Backward([out, retval] long* RHS);
        [id(0x000007d3), propput, hidden, helpcontext(0x000afc83)]
        HRESULT Backward([in] long RHS);
        [id(0x000007d4), propget, hidden, helpcontext(0x000afc84)]
        HRESULT Forward([out, retval] long* RHS);
        [id(0x000007d4), propput, hidden, helpcontext(0x000afc84)]
        HRESULT Forward([in] long RHS);
    };

    [
      odl,
      uuid(92D41A7A-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000b0068),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Trendlines : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000000b5), helpcontext(0x000100b5)]
        HRESULT Add(
                        [in, optional, defaultvalue(-4132)] XlTrendlineType Type,
                        [in, optional] VARIANT Order,
                        [in, optional] VARIANT Period,
                        [in, optional] VARIANT Forward,
                        [in, optional] VARIANT Backward,
                        [in, optional] VARIANT Intercept,
                        [in, optional] VARIANT DisplayEquation,
                        [in, optional] VARIANT DisplayRSquared,
                        [in, optional] VARIANT Name,
                        [out, retval] Trendline** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in, optional] VARIANT Index,
                        [out, retval] Trendline** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d1), propget, helpcontext(0x000b0069)]
        HRESULT Application([out, retval] Application** Application);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in, optional] VARIANT Index,
                        [out, retval] Trendline** RHS);
    };

    [
      odl,
      uuid(92D41A7B-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000b0450),
      dual,
      nonextensible,
      oleautomation
    ]
    interface UpBars : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppFill);
        [id(0x000007d1), propget, helpcontext(0x000b0451)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000007d2), propget, helpcontext(0x000b0452)]
        HRESULT Application([out, retval] Application** Application);
    };

    [
      odl,
      uuid(92D41A7C-F07E-4CA4-AF6F-BEF486AA4E6F),
      helpcontext(0x000b0838),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Walls : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppparent);
        [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
        HRESULT Border([out, retval] ChartBorder** ppborder);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] Interior** ppinterior);
        [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppFill);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] VARIANT* pvar);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] VARIANT pvar);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste();
        [id(0x000000a2), propget, helpcontext(0x000100a2)]
        HRESULT PictureUnit([out, retval] VARIANT* pvar);
        [id(0x000000a2), propput, helpcontext(0x000100a2)]
        HRESULT PictureUnit([in] VARIANT pvar);
        [id(0x00000973), propget, helpcontext(0x00010973)]
        HRESULT Thickness([out, retval] long* RHS);
        [id(0x00000973), propput, helpcontext(0x00010973)]
        HRESULT Thickness([in] long RHS);
        [id(0x000007d1), propget, helpcontext(0x000b0839)]
        HRESULT Format([out, retval] ChartFormat** ppChartFormat);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* RHS);
        [id(0x000007d2), propget, helpcontext(0x000b083a)]
        HRESULT Application([out, retval] Application** Application);
    };

    typedef [uuid(CB5DD948-AAB3-405F-9F29-79468F1F5971)]
    enum {
        ppResampleMediaProfileCustom = 1,
        ppResampleMediaProfileSmall = 2,
        ppResampleMediaProfileSmaller = 3,
        ppResampleMediaProfileSmallest = 4
    } PpResampleMediaProfile;

    typedef [uuid(B44003E4-31C5-46DA-9FBA-985A62352AFD)]
    enum {
        ppMediaTaskStatusNone = 0,
        ppMediaTaskStatusInProgress = 1,
        ppMediaTaskStatusQueued = 2,
        ppMediaTaskStatusDone = 3,
        ppMediaTaskStatusFailed = 4
    } PpMediaTaskStatus;

    [
      odl,
      uuid(BA72E550-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b0c20),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MediaFormat : IDispatch {
        [id(0x000007d0), propget, helpcontext(0x000b0c21)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d1), propget, helpcontext(0x000b0c22)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d2), propget, helpcontext(0x000b0c23)]
        HRESULT Volume([out, retval] single* Volume);
        [id(0x000007d2), propput, helpcontext(0x000b0c23)]
        HRESULT Volume([in] single Volume);
        [id(0x000007d3), propget, helpcontext(0x000b0c24)]
        HRESULT Muted([out, retval] VARIANT_BOOL* Muted);
        [id(0x000007d3), propput, helpcontext(0x000b0c24)]
        HRESULT Muted([in] VARIANT_BOOL Muted);
        [id(0x000007d4), propget, helpcontext(0x000b0c25)]
        HRESULT Length([out, retval] long* Length);
        [id(0x000007d5), propget, helpcontext(0x000b0c26)]
        HRESULT StartPoint([out, retval] long* StartPoint);
        [id(0x000007d5), propput, helpcontext(0x000b0c26)]
        HRESULT StartPoint([in] long StartPoint);
        [id(0x000007d6), propget, helpcontext(0x000b0c27)]
        HRESULT EndPoint([out, retval] long* EndPoint);
        [id(0x000007d6), propput, helpcontext(0x000b0c27)]
        HRESULT EndPoint([in] long EndPoint);
        [id(0x000007d7), propget, helpcontext(0x000b0c28)]
        HRESULT FadeInDuration([out, retval] long* FadeInDuration);
        [id(0x000007d7), propput, helpcontext(0x000b0c28)]
        HRESULT FadeInDuration([in] long FadeInDuration);
        [id(0x000007d8), propget, helpcontext(0x000b0c29)]
        HRESULT FadeOutDuration([out, retval] long* FadeOutDuration);
        [id(0x000007d8), propput, helpcontext(0x000b0c29)]
        HRESULT FadeOutDuration([in] long FadeOutDuration);
        [id(0x000007d9), propget, helpcontext(0x000b0c2a)]
        HRESULT MediaBookmarks([out, retval] MediaBookmarks** MediaBookmarks);
        [id(0x000007da), helpcontext(0x000b0c2b)]
        HRESULT SetDisplayPicture([in] long Position);
        [id(0x000007db), helpcontext(0x000b0c2c)]
        HRESULT SetDisplayPictureFromFile([in] BSTR FilePath);
        [id(0x000007dc), helpcontext(0x000b0c2d)]
        HRESULT Resample(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Trim,
                        [in, optional, defaultvalue(1080)] int SampleHeight,
                        [in, optional, defaultvalue(1920)] int SampleWidth,
                        [in, optional, defaultvalue(24)] long VideoFrameRate,
                        [in, optional, defaultvalue(48000)] long AudioSamplingRate,
                        [in, optional, defaultvalue(7000000)] long VideoBitRate);
        [id(0x000007dd), helpcontext(0x000b0c2e)]
        HRESULT ResampleFromProfile([in, optional, defaultvalue(2)] PpResampleMediaProfile profile);
        [id(0x000007de), propget, helpcontext(0x000b0c2f)]
        HRESULT ResamplingStatus([out, retval] PpMediaTaskStatus* ResamplingStatus);
        [id(0x000007df), propget, helpcontext(0x000b0c30)]
        HRESULT IsLinked([out, retval] VARIANT_BOOL* IsLinked);
        [id(0x000007e0), propget, helpcontext(0x000b0c31)]
        HRESULT IsEmbedded([out, retval] VARIANT_BOOL* IsEmbedded);
        [id(0x000007e1), propget, helpcontext(0x000b0c32)]
        HRESULT AudioSamplingRate([out, retval] long* AudioSamplingRate);
        [id(0x000007e2), propget, helpcontext(0x000b0c33)]
        HRESULT VideoFrameRate([out, retval] long* VideoFrameRate);
        [id(0x000007e3), propget, helpcontext(0x000b0c34)]
        HRESULT SampleHeight([out, retval] long* SampleHeight);
        [id(0x000007e4), propget, helpcontext(0x000b0c35)]
        HRESULT SampleWidth([out, retval] long* SampleWidth);
        [id(0x000007e5), propget, helpcontext(0x000b0c36)]
        HRESULT VideoCompressionType([out, retval] BSTR* VideoCompressionType);
        [id(0x000007e6), propget, helpcontext(0x000b0c37)]
        HRESULT AudioCompressionType([out, retval] BSTR* AudioCompressionType);
    };

    [
      odl,
      uuid(BA72E551-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b1008),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SectionProperties : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b1009)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b100a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000b100b)]
        HRESULT Count([out, retval] long* Count);
        [id(0x000007d4), helpcontext(0x000b100c)]
        HRESULT Name(
                        [in] int sectionIndex,
                        [out, retval] BSTR* Name);
        [id(0x000007d5), helpcontext(0x000b100d)]
        HRESULT Rename(
                        [in] int sectionIndex,
                        [in] BSTR sectionName);
        [id(0x000007d6), helpcontext(0x000b100e)]
        HRESULT SlidesCount(
                        [in] int sectionIndex,
                        [out, retval] long* SlidesCount);
        [id(0x000007d7), helpcontext(0x000b100f)]
        HRESULT FirstSlide(
                        [in] int sectionIndex,
                        [out, retval] int* FirstSlide);
        [id(0x000007d8), helpcontext(0x000b1010)]
        HRESULT AddBeforeSlide(
                        [in] int SlideIndex,
                        [in] BSTR sectionName,
                        [out, retval] int* BeforeSlide);
        [id(0x000007d9), helpcontext(0x000b1011)]
        HRESULT AddSection(
                        [in] int sectionIndex,
                        [in, optional] VARIANT sectionName,
                        [out, retval] int* Section);
        [id(0x000007da), helpcontext(0x000b1012)]
        HRESULT Move(
                        [in] int sectionIndex,
                        [in] int toPos);
        [id(0x000007db), helpcontext(0x000b1013)]
        HRESULT Delete(
                        [in] int sectionIndex,
                        [in] VARIANT_BOOL deleteSlides);
        [id(0x000007dc), helpcontext(0x000b1014)]
        HRESULT SectionID(
                        [in] int sectionIndex,
                        [out, retval] BSTR* SectionID);
    };

    typedef [uuid(1AB5AC71-B868-45CE-94DD-42B327B8BC0F)]
    enum {
        ppPlaying = 0,
        ppPaused = 1,
        ppStopped = 2,
        ppNotReady = 3
    } PpPlayerState;

    [
      odl,
      uuid(BA72E552-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b13f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Player : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b13f1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b13f2)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), helpcontext(0x000b13f3)]
        HRESULT Play();
        [id(0x000007d4), helpcontext(0x000b13f4)]
        HRESULT Pause();
        [id(0x000007d5), helpcontext(0x000b13f5)]
        HRESULT Stop();
        [id(0x000007d6), helpcontext(0x000b13f6)]
        HRESULT GoToNextBookmark();
        [id(0x000007d7), helpcontext(0x000b13f7)]
        HRESULT GoToPreviousBookmark();
        [id(0x000007d8), propget, helpcontext(0x000b13f8)]
        HRESULT CurrentPosition([out, retval] long* CurrentPosition);
        [id(0x000007d8), propput, helpcontext(0x000b13f8)]
        HRESULT CurrentPosition([in] long CurrentPosition);
        [id(0x000007d9), propget, helpcontext(0x000b13f9)]
        HRESULT State([out, retval] PpPlayerState* State);
    };

    [
      odl,
      uuid(BA72E553-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b17d8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ResampleMediaTask : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b17d9)]
        HRESULT profile([out, retval] PpResampleMediaProfile* profile);
        [id(0x000007d2), propget, helpcontext(0x000b17da)]
        HRESULT IsLinked([out, retval] VARIANT_BOOL* IsLinked);
        [id(0x000007d3), propget, helpcontext(0x000b17db)]
        HRESULT IsEmbedded([out, retval] VARIANT_BOOL* IsEmbedded);
        [id(0x000007d4), propget, helpcontext(0x000b17dc)]
        HRESULT AudioSamplingRate([out, retval] long* AudioSamplingRate);
        [id(0x000007d5), propget, helpcontext(0x000b17dd)]
        HRESULT VideoFrameRate([out, retval] long* VideoFrameRate);
        [id(0x000007d6), propget, helpcontext(0x000b17de)]
        HRESULT SampleHeight([out, retval] long* SampleHeight);
        [id(0x000007d7), propget, helpcontext(0x000b17df)]
        HRESULT SampleWidth([out, retval] long* SampleWidth);
        [id(0x000007d8), propget, helpcontext(0x000b17e0)]
        HRESULT ContainerType([out, retval] BSTR* ContainerType);
        [id(0x000007d9), propget, helpcontext(0x000b17e1)]
        HRESULT VideoCompressionType([out, retval] BSTR* VideoCompressionType);
        [id(0x000007da), propget, helpcontext(0x000b17e2)]
        HRESULT AudioCompressionType([out, retval] BSTR* AudioCompressionType);
        [id(0x000007db), propget, helpcontext(0x000b17e3)]
        HRESULT Shape([out, retval] Shape** Shape);
    };

    [
      odl,
      uuid(BA72E554-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b1bc0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ResampleMediaTasks : Collection {
        [id(00000000), helpcontext(0x000b1bc1),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] ResampleMediaTask** Item);
        [id(0x000007d1), helpcontext(0x000b1bc2)]
        HRESULT Pause();
        [id(0x000007d2), helpcontext(0x000b1bc3)]
        HRESULT Cancel();
        [id(0x000007d3), helpcontext(0x000b1bc4)]
        HRESULT Resume();
        [id(0x000007d4), propget, helpcontext(0x000b1bc5)]
        HRESULT PercentComplete([out, retval] long* PercentComplete);
    };

    [
      odl,
      uuid(BA72E555-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b1fa8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MediaBookmark : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b1fa9)]
        HRESULT Index([out, retval] int* Index);
        [id(0x000007d2), propget, helpcontext(0x000b1faa)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d3), propget, helpcontext(0x000b1fab)]
        HRESULT Position([out, retval] long* Position);
        [id(0x000007d4), helpcontext(0x000b1fac)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(BA72E556-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b2390),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MediaBookmarks : Collection {
        [id(00000000), helpcontext(0x000b2391),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] MediaBookmark** Item);
        [id(0x000007d1), helpcontext(0x000b2392)]
        HRESULT Add(
                        [in] long Position,
                        [in] BSTR Name,
                        [out, retval] MediaBookmark** Add);
    };

    [
      odl,
      uuid(BA72E557-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b2778),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Coauthoring : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b2779)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b277a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000b277b)]
        HRESULT MergeMode([out, retval] VARIANT_BOOL* MergeMode);
        [id(0x000007d4), propget, helpcontext(0x000b277c)]
        HRESULT FavorServerEditsDuringMerge([out, retval] VARIANT_BOOL* FavorServerEditsDuringMerge);
        [id(0x000007d4), propput, helpcontext(0x000b277c)]
        HRESULT FavorServerEditsDuringMerge([in] VARIANT_BOOL FavorServerEditsDuringMerge);
        [id(0x000007d5), helpcontext(0x000b277d)]
        HRESULT EndReview();
        [id(0x000007d6), propget, helpcontext(0x000b277e)]
        HRESULT PendingUpdates([out, retval] VARIANT_BOOL* PendingUpdates);
        [id(0x000007d7), propget, hidden, helpcontext(0x000b277f)]
        HRESULT CoauthorCount([out, retval] long* CoauthorCount);
    };

    [
      odl,
      uuid(BA72E558-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b2b60),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Broadcast : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b2b61)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b2b62)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), helpcontext(0x000b2b63)]
        HRESULT Start([in] BSTR serverUrl);
        [id(0x000007d4), helpcontext(0x000b2b64)]
        HRESULT End();
        [id(0x000007d5), propget, helpcontext(0x000b2b65)]
        HRESULT AttendeeUrl([out, retval] BSTR* AttendeeUrl);
        [id(0x000007d6), propget, helpcontext(0x000b2b66)]
        HRESULT IsBroadcasting([out, retval] VARIANT_BOOL* IsBroadcasting);
        [id(0x000007d7), helpcontext(0x000b2b67)]
        HRESULT Pause();
        [id(0x000007d8), helpcontext(0x000b2b68)]
        HRESULT Resume();
        [id(0x000007d9), helpcontext(0x000b2b69)]
        HRESULT AddMeetingNotes(
                        [in] BSTR notesUrl,
                        [in] BSTR notesWacUrl);
        [id(0x000007da), propget, helpcontext(0x000b2b6a)]
        HRESULT State([out, retval] MsoBroadcastState* BroadcastState);
        [id(0x000007db), propget, helpcontext(0x000b2b6b)]
        HRESULT Capabilities([out, retval] long* Capabilities);
        [id(0x000007dc), propget, helpcontext(0x000b2b6c)]
        HRESULT SessionID([out, retval] BSTR* SessionID);
        [id(0x000007dd), propget, helpcontext(0x000b2b6d)]
        HRESULT PresenterServiceUrl([out, retval] BSTR* PresenterServiceUrl);
    };

    typedef [uuid(33E189F9-6F21-42C5-95CB-B064ABF618EA)]
    enum {
        xlHorizontalCoordinate = 1,
        xlVerticalCoordinate = 2
    } XlPieSliceLocation;

    typedef [uuid(C11F48F8-2ECB-4A6D-81CE-96C4C604A765)]
    enum {
        xlOuterCounterClockwisePoint = 1,
        xlOuterCenterPoint = 2,
        xlOuterClockwisePoint = 3,
        xlMidClockwiseRadiusPoint = 4,
        xlCenterPoint = 5,
        xlMidCounterClockwiseRadiusPoint = 6,
        xlInnerClockwisePoint = 7,
        xlInnerCenterPoint = 8,
        xlInnerCounterClockwisePoint = 9
    } XlPieSliceIndex;

    typedef [uuid(7F9B36C7-48CC-335E-B058-49658FD8CECE)]
    enum {
        ppProtectedViewCloseNormal = 0,
        ppProtectedViewCloseEdit = 1,
        ppProtectedViewCloseForced = 2
    } PpProtectedViewCloseReason;

    [
      odl,
      uuid(BA72E559-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b2f48),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ProtectedViewWindows : Collection {
        [id(0x000007d1), propget, helpcontext(0x000b2f49)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b2f4a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000b2f4b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] ProtectedViewWindow** Item);
        [id(0x000007d3), helpcontext(0x000b2f4c)]
        HRESULT Open(
                        [in] BSTR FileName,
                        [in, optional, defaultvalue("")] BSTR ReadPassword,
                        [in, optional, defaultvalue(0)] MsoTriState OpenAndRepair,
                        [out, retval] ProtectedViewWindow** Open);
    };

    [
      odl,
      uuid(BA72E55A-4FF5-48F4-8215-5505F990966F),
      helpcontext(0x000b3330),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ProtectedViewWindow : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b3331)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b3332)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000b3333)]
        HRESULT Presentation([out, retval] Presentation** Presentation);
        [id(0x000007d4), propget, helpcontext(0x000b3334)]
        HRESULT Active([out, retval] MsoTriState* Active);
        [id(0x000007d5), propget, helpcontext(0x000b3335)]
        HRESULT WindowState([out, retval] PpWindowState* WindowState);
        [id(0x000007d5), propput, helpcontext(0x000b3335)]
        HRESULT WindowState([in] PpWindowState WindowState);
        [id(00000000), propget, helpcontext(0x000b3336)]
        HRESULT Caption([out, retval] BSTR* Caption);
        [id(0x000007d6), propget, helpcontext(0x000b3337)]
        HRESULT SourcePath([out, retval] BSTR* SourcePath);
        [id(0x000007d7), propget, helpcontext(0x000b3338)]
        HRESULT SourceName([out, retval] BSTR* SourceName);
        [id(0x000007d8), propget, helpcontext(0x000b3339)]
        HRESULT Left([out, retval] single* Left);
        [id(0x000007d8), propput, helpcontext(0x000b3339)]
        HRESULT Left([in] single Left);
        [id(0x000007d9), propget, helpcontext(0x000b333a)]
        HRESULT Top([out, retval] single* Top);
        [id(0x000007d9), propput, helpcontext(0x000b333a)]
        HRESULT Top([in] single Top);
        [id(0x000007da), propget, helpcontext(0x000b333b)]
        HRESULT Width([out, retval] single* Width);
        [id(0x000007da), propput, helpcontext(0x000b333b)]
        HRESULT Width([in] single Width);
        [id(0x000007db), propget, helpcontext(0x000b333c)]
        HRESULT Height([out, retval] single* Height);
        [id(0x000007db), propput, helpcontext(0x000b333c)]
        HRESULT Height([in] single Height);
        [id(0x000007dc), helpcontext(0x000b333d)]
        HRESULT Activate();
        [id(0x000007dd), helpcontext(0x000b333e)]
        HRESULT Close();
        [id(0x000007de), helpcontext(0x000b333f)]
        HRESULT Edit(
                        [in, optional, defaultvalue("")] BSTR ModifyPassword,
                        [out, retval] Presentation** Edit);
        [id(0x000007df), propget, restricted, helpcontext(0x000b3340)]
        HRESULT HWND([out, retval] long* HWND);
    };

    [
      odl,
      uuid(288B25A9-98EF-41E5-BEBA-F547D7169BF2),
      helpcontext(0x000b3718),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FullSeriesCollection : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b3719)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d2), propget, helpcontext(0x000b371a)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] Series** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x000007d4), propget, helpcontext(0x000b371c)]
        HRESULT Application([out, retval] Application** ppval);
        [id(0x000007d5), propget, helpcontext(0x000b371d)]
        HRESULT Creator([out, retval] long* pval);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index,
                        [out, retval] Series** RHS);
    };

    [
      odl,
      uuid(AF028401-4619-4271-AFDD-F480FA925186),
      helpcontext(0x000b3b00),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartCategory : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b3b01)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d2), propget, helpcontext(0x000b3b02)]
        HRESULT Name([out, retval] BSTR* pbstr);
        [id(0x000007d3), propget, helpcontext(0x000b3b03)]
        HRESULT IsFiltered([out, retval] VARIANT_BOOL* pfIsFiltered);
        [id(0x000007d3), propput, helpcontext(0x000b3b03)]
        HRESULT IsFiltered([in] VARIANT_BOOL pfIsFiltered);
    };

    [
      odl,
      uuid(2432F529-514B-4575-AA71-1754C74A13D6),
      helpcontext(0x000b3ee8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CategoryCollection : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b3ee9)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d2), propget, helpcontext(0x000b3eea)]
        HRESULT Count([out, retval] long* cCategory);
        [id(0x000007d3), helpcontext(0x000b3eeb)]
        HRESULT Item(
                        [in] VARIANT Index,
                        [out, retval] ChartCategory** ppcategory);
        [id(0x000007d4), propget, helpcontext(0x000b3eec)]
        HRESULT Application([out, retval] Application** ppval);
        [id(0x000007d5), propget, helpcontext(0x000b3eed)]
        HRESULT Creator([out, retval] long* pval);
        [id(00000000), helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index,
                        [out, retval] ChartCategory** RHS);
    };

    [
      odl,
      uuid(C9195677-B4F9-4228-BFD0-40C1F77D2F6A),
      helpcontext(0x000b42d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThemeVariant : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b4aa1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b3b01)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d3), propget, helpcontext(0x000b42d3)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000007d4), propget, helpcontext(0x000b42d3)]
        HRESULT Width([out, retval] long* Width);
        [id(0x000007d5), propget, helpcontext(0x000b42d3)]
        HRESULT Height([out, retval] long* Height);
        [id(0x000007d6), propget, helpcontext(0x000b42d3)]
        HRESULT Id([out, retval] BSTR* Id);
    };

    [
      odl,
      uuid(9E116A3C-2C6D-4D07-93AF-8675D452FCA2),
      helpcontext(0x000b46b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThemeVariants : Collection {
        [id(0x000007d1), propget, helpcontext(0x000b4aa1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b3b01)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(00000000), helpcontext(0x0007c44b),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] ThemeVariant** Item);
    };

    [
      odl,
      uuid(D9D60EB3-D4B4-4991-9C16-75585B3346BB),
      helpcontext(0x000b4aa0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Theme : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b4aa1)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b3b01)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000007d3), propget, helpcontext(0x000b4aa2)]
        HRESULT ThemeVariants([out, retval] ThemeVariants** ThemeVariants);
    };

    typedef [uuid(BFFE8F80-6A67-4B7A-AEAA-8823E7932C87)]
    enum {
        xlCategoryLabelLevelNone = -3,
        xlCategoryLabelLevelCustom = -2,
        xlCategoryLabelLevelAll = -1
    } XlCategoryLabelLevel;

    typedef [uuid(76D9466C-84C2-4355-81FE-CB1B9CB03C19)]
    enum {
        xlSeriesNameLevelNone = -3,
        xlSeriesNameLevelCustom = -2,
        xlSeriesNameLevelAll = -1
    } XlSeriesNameLevel;

    [
      odl,
      uuid(F658E3EC-F2D3-4272-AA49-4EC155D5AA76),
      helpcontext(0x000b4e88),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SlideNavigation : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b4e8c)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b4e89)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), propget, helpcontext(0x000b4e8a)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x000007d3), propput, helpcontext(0x000b4e8a)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
    };

    typedef [uuid(6E8C12BD-5FD3-4AE8-A61F-D0F27BCBB2D2)]
    enum {
        ppHorizontalGuide = 1,
        ppVerticalGuide = 2
    } PpGuideOrientation;

    [
      odl,
      uuid(1641E775-2277-46DE-A06D-8C49C3C5D5E7),
      helpcontext(0x000b5270),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Guides : Collection {
        [id(0x000007d1), propget, helpcontext(0x000b5271)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b5272)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), helpcontext(0x000b5273),
            custom({2941FF83-88D8-4F73-B6A9-BDF8712D000D}, "propget")]
        HRESULT Item(
                        [in] int Index,
                        [out, retval] Guide** Item);
        [id(0x000007d3), helpcontext(0x000b5274)]
        HRESULT Add(
                        [in] PpGuideOrientation Orientation,
                        [in] single Position,
                        [out, retval] Guide** Add);
    };

    [
      odl,
      uuid(3D2F865B-E2DB-4896-BC35-6A006DF896DC),
      helpcontext(0x000b5658),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Guide : IDispatch {
        [id(0x000007d1), propget, helpcontext(0x000b5659)]
        HRESULT Application([out, retval] Application** Application);
        [id(0x000007d2), propget, helpcontext(0x000b565a)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x000007d3), helpcontext(0x000b565b)]
        HRESULT Delete();
        [id(0x000007d4), propget, helpcontext(0x000b565c)]
        HRESULT Orientation([out, retval] PpGuideOrientation* Orientation);
        [id(0x000007d5), propget, helpcontext(0x000b565d)]
        HRESULT Position([out, retval] single* Position);
        [id(0x000007d5), propput, helpcontext(0x000b565d)]
        HRESULT Position([in] single Position);
        [id(0x000007d6), propget, helpcontext(0x000b565e)]
        HRESULT Color([out, retval] ColorFormat** Color);
    };

    typedef [uuid(445BB65F-2ED4-4653-A80A-04FF61373CB4)]
    enum {
        xlParentDataLabelOptionsNone = 0,
        xlParentDataLabelOptionsBanner = 1,
        xlParentDataLabelOptionsOverlapping = 2
    } XlParentDataLabelOptions;

    typedef [uuid(D66A5206-A935-4E70-8383-5A1010BCA0BE)]
    enum {
        xlBinsTypeAutomatic = 0,
        xlBinsTypeCategorical = 1,
        xlBinsTypeManual = 2,
        xlBinsTypeBinSize = 3,
        xlBinsTypeBinCount = 4
    } XlBinsType;
};
